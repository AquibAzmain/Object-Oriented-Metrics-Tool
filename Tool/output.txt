LOC and Comments of all the files:

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\CCFinderOutputParser.java
Comment: /* \n */
Comment Type: Block Comment
Comment: // Skip options, get n and preprocessed_file_postfix only
Comment Type: Line Comment
Comment: // Read file info
Comment Type: Line Comment
Comment: /*int fileId = */
Comment Type: Block Comment
Comment: /*int length = */
Comment Type: Block Comment
Comment: // read source file remarks
Comment Type: Line Comment
Comment: // while true
Comment Type: Line Comment
Comment: // read clone data
Comment Type: Line Comment
File LOC: 320
Number of Comments: 8
Comment Percentage: 2%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\CloneDetectorOutputParseException.java
File LOC: 13
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\CloneDetectorOutputParser.java
File LOC: 177
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\CloneDetectorOutputParserFactory.java
File LOC: 20
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\CloneDetectorOutputParserProgressObserver.java
File LOC: 4
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\CloneDetectorType.java
File LOC: 12
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\CloneDROutputParser.java
Comment: // There will be one clone group for each file
Comment Type: Line Comment
File LOC: 91
Number of Comments: 1
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\CloneGroup.java
File LOC: 117
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\CloneGroupList.java
File LOC: 55
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\CloneInstance.java
Comment: /* From substring documentation:
		 * The substring begins at the specified beginIndex and extends to the character at **index endIndex - 1**
		 */
Comment Type: Block Comment
File LOC: 131
Number of Comments: 1
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\CloneInstanceLocationInfo.java
Comment: // The first offset of the start line
Comment Type: Line Comment
Comment: // The last offset of the end line
Comment Type: Line Comment
Comment: // 1 for Line Feed character
Comment Type: Line Comment
Comment: // Happens when the last char of the document is not a line feed character
Comment Type: Line Comment
File LOC: 176
Number of Comments: 4
Comment Percentage: 2%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\CloneInstanceStatus.java
File LOC: 4
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\ClonesRelativeLocation.java
File LOC: 12
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\ConQATOutputParser.java
File LOC: 99
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\DeckardOutputParser.java
File LOC: 75
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\InvalidInputFileException.java
File LOC: 13
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\JavaModelUtility.java
Comment: /*
		 * We sort the src paths by their character lengths in a non-increasing
		 * order, because we are going to see whether a Java file's path starts
		 * with a specific source path For example, if the Java file's path is
		 * "src/main/org/blah/blah", the "src/main" is considered the source
		 * path not "src/"
		 */
Comment Type: Block Comment
File LOC: 62
Number of Comments: 1
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\NiCadOutputParser.java
File LOC: 84
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\ResourceInfo.java
Comment: // parser.setResolveBindings(true);
Comment Type: Line Comment
Comment: // First try the given path, if not found, prepend src dir
Comment Type: Line Comment
File LOC: 91
Number of Comments: 2
Comment Percentage: 2%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\ca\concordia\jdeodorant\clone\parsers\TextDiff.java
Comment: /*
 * Functions for ca.concordia.jdeodorant.eclipse.commandline.diff, match and patch.
 * Computes the difference between two texts to create a patch.
 * Applies the patch onto another text, allowing for errors.
 *
 * @author fraser@google.com (Neil Fraser)
 */
Comment Type: Block Comment
Comment: /**
 * Class containing the ca.concordia.jdeodorant.eclipse.commandline.diff, match and patch methods.
 * Also contains the behaviour settings.
 */
Comment Type: Java Doc Comment
Comment: // Defaults.
Comment Type: Line Comment
Comment: // Set these on your TextDiff instance to override the defaults.
Comment Type: Line Comment
Comment: // DIFF FUNCTIONS
Comment Type: Line Comment
Comment: // MATCH FUNCTIONS
Comment Type: Line Comment
Comment: // PATCH FUNCTIONS
Comment Type: Line Comment
Comment: /**
 * Number of seconds to map a ca.concordia.jdeodorant.eclipse.commandline.diff before giving up (0 for infinity).
 */
Comment Type: Java Doc Comment
Comment: /**
 * Cost of an empty edit operation in terms of edit characters.
 */
Comment Type: Java Doc Comment
Comment: /**
 * At what point is no match declared (0.0 = perfection, 1.0 = very loose).
 */
Comment Type: Java Doc Comment
Comment: /**
 * How far to search for a match (0 = exact location, 1000+ = broad match).
 * A match this many characters away from the expected location will add
 * 1.0 to the score (0.0 is a perfect match).
 */
Comment Type: Java Doc Comment
Comment: /**
 * When deleting a large block of text (over ~64 characters), how close do
 * the contents have to be to match the expected contents. (0.0 = perfection,
 * 1.0 = very loose).  Note that Match_Threshold controls how closely the
 * end points of a delete need to match.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Chunk size for context length.
 */
Comment Type: Java Doc Comment
Comment: /**
 * The number of bits in an int.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Internal class for returning results from diff_linesToChars().
 * Other less paranoid languages just use a three-element array.
 */
Comment Type: Java Doc Comment
Comment: /**
 * The data structure representing a ca.concordia.jdeodorant.eclipse.commandline.diff is a Linked list of Diff objects:
 * {Diff(Operation.DELETE, "Hello"), Diff(Operation.INSERT, "Goodbye"),
 *  Diff(Operation.EQUAL, " world.")}
 * which means: delete "Hello", add "Goodbye" and keep " world."
 */
Comment Type: Java Doc Comment
Comment: /**
 * Find the differences between two texts.
 * Run a faster, slightly less optimal ca.concordia.jdeodorant.eclipse.commandline.diff.
 * This method allows the 'checklines' of diff_main() to be optional.
 * Most of the time checklines is wanted, so default to true.
 * @param text1 Old string to be diffed.
 * @param text2 New string to be diffed.
 * @return Linked List of Diff objects.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Find the differences between two texts.
 * @param text1 Old string to be diffed.
 * @param text2 New string to be diffed.
 * @param checklines Speedup flag.  If false, then don't run a
 *     line-level ca.concordia.jdeodorant.eclipse.commandline.diff first to identify the changed areas.
 *     If true, then run a faster slightly less optimal ca.concordia.jdeodorant.eclipse.commandline.diff.
 * @return Linked List of Diff objects.
 */
Comment Type: Java Doc Comment
Comment: // Set a deadline by which time the ca.concordia.jdeodorant.eclipse.commandline.diff must be complete.
Comment Type: Line Comment
Comment: /**
 * Find the differences between two texts.  Simplifies the problem by
 * stripping any common prefix or suffix off the texts before diffing.
 * @param text1 Old string to be diffed.
 * @param text2 New string to be diffed.
 * @param checklines Speedup flag.  If false, then don't run a
 *     line-level ca.concordia.jdeodorant.eclipse.commandline.diff first to identify the changed areas.
 *     If true, then run a faster slightly less optimal ca.concordia.jdeodorant.eclipse.commandline.diff.
 * @param deadline Time when the ca.concordia.jdeodorant.eclipse.commandline.diff should be complete by.  Used
 *     internally for recursive calls.  Users should set DiffTimeout instead.
 * @return Linked List of Diff objects.
 */
Comment Type: Java Doc Comment
Comment: // Check for null inputs.
Comment Type: Line Comment
Comment: // Check for equality (speedup).
Comment Type: Line Comment
Comment: // Trim off common prefix (speedup).
Comment Type: Line Comment
Comment: // Trim off common suffix (speedup).
Comment Type: Line Comment
Comment: // Compute the ca.concordia.jdeodorant.eclipse.commandline.diff on the middle block.
Comment Type: Line Comment
Comment: // Restore the prefix and suffix.
Comment Type: Line Comment
Comment: /**
 * Find the differences between two texts.  Assumes that the texts do not
 * have any common prefix or suffix.
 * @param text1 Old string to be diffed.
 * @param text2 New string to be diffed.
 * @param checklines Speedup flag.  If false, then don't run a
 *     line-level ca.concordia.jdeodorant.eclipse.commandline.diff first to identify the changed areas.
 *     If true, then run a faster slightly less optimal ca.concordia.jdeodorant.eclipse.commandline.diff.
 * @param deadline Time when the ca.concordia.jdeodorant.eclipse.commandline.diff should be complete by.
 * @return Linked List of Diff objects.
 */
Comment Type: Java Doc Comment
Comment: // Just add some text (speedup).
Comment Type: Line Comment
Comment: // Just delete some text (speedup).
Comment Type: Line Comment
Comment: // Shorter text is inside the longer text (speedup).
Comment Type: Line Comment
Comment: // Single character string.
Comment Type: Line Comment
Comment: // After the previous speedup, the character can't be an equality.
Comment Type: Line Comment
Comment: // Check to see if the problem can be split in two.
Comment Type: Line Comment
Comment: // A half-match was found, sort out the return data.
Comment Type: Line Comment
Comment: // Send both pairs off for separate processing.
Comment Type: Line Comment
Comment: // Merge the results.
Comment Type: Line Comment
Comment: /**
 * Do a quick line-level ca.concordia.jdeodorant.eclipse.commandline.diff on both strings, then rediff the parts for
 * greater accuracy.
 * This speedup can produce non-minimal diffs.
 * @param text1 Old string to be diffed.
 * @param text2 New string to be diffed.
 * @param deadline Time when the ca.concordia.jdeodorant.eclipse.commandline.diff should be complete by.
 * @return Linked List of Diff objects.
 */
Comment Type: Java Doc Comment
Comment: // Rediff any replacement blocks, this time character-by-character.
Comment Type: Line Comment
Comment: // Scan the text on a line-by-line basis first.
Comment Type: Line Comment
Comment: // Convert the ca.concordia.jdeodorant.eclipse.commandline.diff back to original text.
Comment Type: Line Comment
Comment: // Eliminate freak matches (e.g. blank lines)
Comment Type: Line Comment
Comment: // Add a dummy entry at the end.
Comment Type: Line Comment
Comment: // Upon reaching an equality, check for prior redundancies.
Comment Type: Line Comment
Comment: // Delete the offending records and add the merged ones.
Comment Type: Line Comment
Comment: // Remove the dummy entry at the end.
Comment Type: Line Comment
Comment: /**
 * Find the 'middle snake' of a ca.concordia.jdeodorant.eclipse.commandline.diff, split the problem in two
 * and return the recursively constructed ca.concordia.jdeodorant.eclipse.commandline.diff.
 * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
 * @param text1 Old string to be diffed.
 * @param text2 New string to be diffed.
 * @param deadline Time at which to bail if not yet complete.
 * @return LinkedList of Diff objects.
 */
Comment Type: Java Doc Comment
Comment: // If the total number of characters is odd, then the front path will
Comment Type: Line Comment
Comment: // Offsets for start and end of k loop.
Comment Type: Line Comment
Comment: // Diff took too long and hit the deadline or
Comment Type: Line Comment
Comment: // Cache the text lengths to prevent multiple calls.
Comment Type: Line Comment
Comment: // collide with the reverse path.
Comment Type: Line Comment
Comment: // Prevents mapping of space beyond the grid.
Comment Type: Line Comment
Comment: // Bail out if deadline is reached.
Comment Type: Line Comment
Comment: // Walk the front path one step.
Comment Type: Line Comment
Comment: // Ran off the right of the graph.
Comment Type: Line Comment
Comment: // Ran off the bottom of the graph.
Comment Type: Line Comment
Comment: // Mirror x2 onto top-left coordinate system.
Comment Type: Line Comment
Comment: // Overlap detected.
Comment Type: Line Comment
Comment: // Walk the reverse path one step.
Comment Type: Line Comment
Comment: // Ran off the left of the graph.
Comment Type: Line Comment
Comment: // Ran off the top of the graph.
Comment Type: Line Comment
Comment: // Mirror x2 onto top-left coordinate system.
Comment Type: Line Comment
Comment: // Overlap detected.
Comment Type: Line Comment
Comment: // number of diffs equals number of characters, no commonality at all.
Comment Type: Line Comment
Comment: /**
 * Given the location of the 'middle snake', split the ca.concordia.jdeodorant.eclipse.commandline.diff in two parts
 * and recurse.
 * @param text1 Old string to be diffed.
 * @param text2 New string to be diffed.
 * @param x Index of split point in text1.
 * @param y Index of split point in text2.
 * @param deadline Time at which to bail if not yet complete.
 * @return LinkedList of Diff objects.
 */
Comment Type: Java Doc Comment
Comment: // Compute both diffs serially.
Comment Type: Line Comment
Comment: /**
 * Split two texts into a list of strings.  Reduce the texts to a string of
 * hashes where each Unicode character represents one line.
 * @param text1 First string.
 * @param text2 Second string.
 * @return An object containing the encoded text1, the encoded text2 and
 *     the List of unique strings.  The zeroth element of the List of
 *     unique strings is intentionally blank.
 */
Comment Type: Java Doc Comment
Comment: // e.g. linearray[4] == "Hello\n"
Comment Type: Line Comment
Comment: // e.g. linehash.get("Hello\n") == 4
Comment Type: Line Comment
Comment: // "\x00" is a valid character, but various debuggers don't like it.
Comment Type: Line Comment
Comment: // So we'll insert a junk entry to avoid generating a null character.
Comment Type: Line Comment
Comment: /**
 * Split a text into a list of strings.  Reduce the texts to a string of
 * hashes where each Unicode character represents one line.
 * @param text String to encode.
 * @param lineArray List of unique strings.
 * @param lineHash Map of strings to indices.
 * @return Encoded string.
 */
Comment Type: Java Doc Comment
Comment: // Walk the text, pulling out a substring for each line.
Comment Type: Line Comment
Comment: // text.split('\n') would would temporarily double our memory footprint.
Comment Type: Line Comment
Comment: // Modifying text would create many large strings to garbage collect.
Comment Type: Line Comment
Comment: /**
 * Rehydrate the text in a ca.concordia.jdeodorant.eclipse.commandline.diff from a string of line hashes to real lines of
 * text.
 * @param diffs LinkedList of Diff objects.
 * @param lineArray List of unique strings.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Determine the common prefix of two strings
 * @param text1 First string.
 * @param text2 Second string.
 * @return The number of characters common to the start of each string.
 */
Comment Type: Java Doc Comment
Comment: // Performance analysis: http://neil.fraser.name/news/2007/10/09/
Comment Type: Line Comment
Comment: /**
 * Determine the common suffix of two strings
 * @param text1 First string.
 * @param text2 Second string.
 * @return The number of characters common to the end of each string.
 */
Comment Type: Java Doc Comment
Comment: // Performance analysis: http://neil.fraser.name/news/2007/10/09/
Comment Type: Line Comment
Comment: /**
 * Determine if the suffix of one string is the prefix of another.
 * @param text1 First string.
 * @param text2 Second string.
 * @return The number of characters common to the end of the first
 *     string and the start of the second string.
 */
Comment Type: Java Doc Comment
Comment: // Start by looking for a single character match
Comment Type: Line Comment
Comment: // and increase length until no match is found.
Comment Type: Line Comment
Comment: // Cache the text lengths to prevent multiple calls.
Comment Type: Line Comment
Comment: // Eliminate the null case.
Comment Type: Line Comment
Comment: // Truncate the longer string.
Comment Type: Line Comment
Comment: // Quick check for the worst case.
Comment Type: Line Comment
Comment: // Performance analysis: http://neil.fraser.name/news/2010/11/04/
Comment Type: Line Comment
Comment: /**
 * Do the two texts share a substring which is at least half the length of
 * the longer text?
 * This speedup can produce non-minimal diffs.
 * @param text1 First string.
 * @param text2 Second string.
 * @return Five element String array, containing the prefix of text1, the
 *     suffix of text1, the prefix of text2, the suffix of text2 and the
 *     common middle.  Or null if there was no match.
 */
Comment Type: Java Doc Comment
Comment: // Don't risk returning a non-optimal ca.concordia.jdeodorant.eclipse.commandline.diff if we have unlimited time.
Comment Type: Line Comment
Comment: // Pointless.
Comment Type: Line Comment
Comment: // First check if the second quarter is the seed for a half-match.
Comment Type: Line Comment
Comment: // Check again based on the third quarter.
Comment Type: Line Comment
Comment: // Both matched.  Select the longest.
Comment Type: Line Comment
Comment: // A half-match was found, sort out the return data.
Comment Type: Line Comment
Comment: // return new String[]{hm[0], hm[1], hm[2], hm[3], hm[4]};
Comment Type: Line Comment
Comment: /**
 * Does a substring of shorttext exist within longtext such that the
 * substring is at least half the length of longtext?
 * @param longtext Longer string.
 * @param shorttext Shorter string.
 * @param i Start index of quarter length substring within longtext.
 * @return Five element String array, containing the prefix of longtext, the
 *     suffix of longtext, the prefix of shorttext, the suffix of shorttext
 *     and the common middle.  Or null if there was no match.
 */
Comment Type: Java Doc Comment
Comment: // Start with a 1/4 length substring at position i as a seed.
Comment Type: Line Comment
Comment: /**
 * Reduce the number of edits by eliminating semantically trivial equalities.
 * @param diffs LinkedList of Diff objects.
 */
Comment Type: Java Doc Comment
Comment: // Find any overlaps between deletions and insertions.
Comment Type: Line Comment
Comment: // e.g: <del>abcxxx</del><ins>xxxdef</ins>
Comment Type: Line Comment
Comment: // -> <del>abc</del>xxx<ins>def</ins>
Comment Type: Line Comment
Comment: // e.g: <del>xxxabc</del><ins>defxxx</ins>
Comment Type: Line Comment
Comment: // -> <ins>def</ins>xxx<del>abc</del>
Comment Type: Line Comment
Comment: // Stack of qualities.
Comment Type: Line Comment
Comment: // Always equal to equalities.lastElement().text
Comment Type: Line Comment
Comment: // Number of characters that changed prior to the equality.
Comment Type: Line Comment
Comment: // Number of characters that changed after the equality.
Comment Type: Line Comment
Comment: // Equality found.
Comment Type: Line Comment
Comment: // Eliminate an equality that is smaller or equal to the edits on both
Comment Type: Line Comment
Comment: // An insertion or deletion.
Comment Type: Line Comment
Comment: // sides of it.
Comment Type: Line Comment
Comment: // System.out.println("Splitting: '" + lastequality + "'");
Comment Type: Line Comment
Comment: // Walk back to offending equality.
Comment Type: Line Comment
Comment: // Replace equality with a delete.
Comment Type: Line Comment
Comment: // Insert a corresponding an insert.
Comment Type: Line Comment
Comment: // Throw away the equality we just deleted.
Comment Type: Line Comment
Comment: // Throw away the previous equality (it needs to be reevaluated).
Comment Type: Line Comment
Comment: // There are no previous equalities, walk back to the start.
Comment Type: Line Comment
Comment: // There is a safe equality we can fall back to.
Comment Type: Line Comment
Comment: // Intentionally empty loop.
Comment Type: Line Comment
Comment: // Reset the counters.
Comment Type: Line Comment
Comment: // Normalize the ca.concordia.jdeodorant.eclipse.commandline.diff.
Comment Type: Line Comment
Comment: // Only extract an overlap if it is as big as the edit ahead or behind it.
Comment Type: Line Comment
Comment: // pointer.add inserts the element before the cursor, so there is
Comment Type: Line Comment
Comment: // no need to step past the new element.
Comment Type: Line Comment
Comment: // Overlap found. Insert an equality and trim the surrounding edits.
Comment Type: Line Comment
Comment: // Reverse overlap found.
Comment Type: Line Comment
Comment: // pointer.add inserts the element before the cursor, so there is
Comment Type: Line Comment
Comment: // no need to step past the new element.
Comment Type: Line Comment
Comment: // Insert an equality and swap and trim the surrounding edits.
Comment Type: Line Comment
Comment: /**
 * Look for single edits surrounded on both sides by equalities
 * which can be shifted sideways to align the edit to a word boundary.
 * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
 * @param diffs LinkedList of Diff objects.
 */
Comment Type: Java Doc Comment
Comment: // Create a new iterator at the start.
Comment Type: Line Comment
Comment: // Intentionally ignore the first and last element (don't need checking).
Comment Type: Line Comment
Comment: // This is a single edit surrounded by equalities.
Comment Type: Line Comment
Comment: // First, shift the edit as far left as possible.
Comment Type: Line Comment
Comment: // Second, step character by character right, looking for the best fit.
Comment Type: Line Comment
Comment: // The >= encourages trailing rather than leading whitespace on edits.
Comment Type: Line Comment
Comment: // We have an improvement, save it back to the ca.concordia.jdeodorant.eclipse.commandline.diff.
Comment Type: Line Comment
Comment: // Walk past nextDiff.
Comment Type: Line Comment
Comment: // Walk past thisDiff.
Comment Type: Line Comment
Comment: // Walk past prevDiff.
Comment Type: Line Comment
Comment: // Delete prevDiff.
Comment Type: Line Comment
Comment: // Walk past thisDiff.
Comment Type: Line Comment
Comment: // Walk past nextDiff.
Comment Type: Line Comment
Comment: // Delete nextDiff.
Comment Type: Line Comment
Comment: /**
 * Given two strings, compute a score representing whether the internal
 * boundary falls on logical boundaries.
 * Scores range from 6 (best) to 0 (worst).
 * @param one First string.
 * @param two Second string.
 * @return The score.
 */
Comment Type: Java Doc Comment
Comment: // Each port of this function behaves slightly differently due to
Comment Type: Line Comment
Comment: // subtle differences in each language's definition of things like
Comment Type: Line Comment
Comment: // 'whitespace'.  Since this function's purpose is largely cosmetic,
Comment Type: Line Comment
Comment: // the choice has been made to use each language's native features
Comment Type: Line Comment
Comment: // Edges are the best.
Comment Type: Line Comment
Comment: // rather than force total conformity.
Comment Type: Line Comment
Comment: // Five points for blank lines.
Comment Type: Line Comment
Comment: // Four points for line breaks.
Comment Type: Line Comment
Comment: // Three points for end of sentences.
Comment Type: Line Comment
Comment: // Two points for whitespace.
Comment Type: Line Comment
Comment: // One point for non-alphanumeric.
Comment Type: Line Comment
Comment: // Define some regex patterns for matching boundaries.
Comment Type: Line Comment
Comment: /**
 * Reduce the number of edits by eliminating operationally trivial equalities.
 * @param diffs LinkedList of Diff objects.
 */
Comment Type: Java Doc Comment
Comment: // Stack of equalities.
Comment Type: Line Comment
Comment: // Always equal to equalities.lastElement().text
Comment Type: Line Comment
Comment: // Is there an insertion operation before the last equality.
Comment Type: Line Comment
Comment: // Is there a deletion operation before the last equality.
Comment Type: Line Comment
Comment: // Is there an insertion operation after the last equality.
Comment Type: Line Comment
Comment: // Is there a deletion operation after the last equality.
Comment Type: Line Comment
Comment: // The last Diff that is known to be unsplitable.
Comment Type: Line Comment
Comment: // Equality found.
Comment Type: Line Comment
Comment: // Candidate found.
Comment Type: Line Comment
Comment: // Not a candidate, and can never become one.
Comment Type: Line Comment
Comment: // An insertion or deletion.
Comment Type: Line Comment
Comment: /*
         * Five types to be split:
         * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>
         * <ins>A</ins>X<ins>C</ins><del>D</del>
         * <ins>A</ins><del>B</del>X<ins>C</ins>
         * <ins>A</del>X<ins>C</ins><del>D</del>
         * <ins>A</ins><del>B</del>X<del>C</del>
         */
Comment Type: Block Comment
Comment: // System.out.println("Splitting: '" + lastequality + "'");
Comment Type: Line Comment
Comment: // Walk back to offending equality.
Comment Type: Line Comment
Comment: // Replace equality with a delete.
Comment Type: Line Comment
Comment: // Insert a corresponding an insert.
Comment Type: Line Comment
Comment: // Throw away the equality we just deleted.
Comment Type: Line Comment
Comment: // No changes made which could affect previous entry, keep going.
Comment Type: Line Comment
Comment: // Throw away the previous equality (it needs to be reevaluated).
Comment Type: Line Comment
Comment: // There are no previous questionable equalities,
Comment Type: Line Comment
Comment: // walk back to the last known safe ca.concordia.jdeodorant.eclipse.commandline.diff.
Comment Type: Line Comment
Comment: // There is an equality we can fall back to.
Comment Type: Line Comment
Comment: // Intentionally empty loop.
Comment Type: Line Comment
Comment: /**
 * Reorder and merge like edit sections.  Merge equalities.
 * Any edit section can move as long as it doesn't cross an equality.
 * @param diffs LinkedList of Diff objects.
 */
Comment Type: Java Doc Comment
Comment: // Create a new iterator at the start.
Comment Type: Line Comment
Comment: // Add a dummy entry at the end.
Comment Type: Line Comment
Comment: // Delete the offending records.
Comment Type: Line Comment
Comment: // Reverse direction.
Comment Type: Line Comment
Comment: // Factor out any common prefixies.
Comment Type: Line Comment
Comment: // Factor out any common suffixies.
Comment Type: Line Comment
Comment: // Insert the merged records.
Comment Type: Line Comment
Comment: // Step forward to the equality.
Comment Type: Line Comment
Comment: // Merge this equality with the previous one.
Comment Type: Line Comment
Comment: // Forward direction
Comment Type: Line Comment
Comment: // Remove the dummy entry at the end.
Comment Type: Line Comment
Comment: /*
     * Second pass: look for single edits surrounded on both sides by equalities
     * which can be shifted sideways to eliminate an equality.
     * e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
     */
Comment Type: Block Comment
Comment: // (As opposed to walking the current one back.)
Comment Type: Line Comment
Comment: // Intentionally ignore the first and last element (don't need checking).
Comment Type: Line Comment
Comment: // This is a single edit surrounded by equalities.
Comment Type: Line Comment
Comment: // Shift the edit over the previous equality.
Comment Type: Line Comment
Comment: // Walk past nextDiff.
Comment Type: Line Comment
Comment: // Walk past thisDiff.
Comment Type: Line Comment
Comment: // Walk past prevDiff.
Comment Type: Line Comment
Comment: // Delete prevDiff.
Comment Type: Line Comment
Comment: // Walk past thisDiff.
Comment Type: Line Comment
Comment: // Walk past nextDiff.
Comment Type: Line Comment
Comment: // Shift the edit over the next equality.
Comment Type: Line Comment
Comment: // Delete nextDiff.
Comment Type: Line Comment
Comment: // If shifts were made, the ca.concordia.jdeodorant.eclipse.commandline.diff needs reordering and another shift sweep.
Comment Type: Line Comment
Comment: /**
 * loc is a location in text1, compute and return the equivalent location in
 * text2.
 * e.g. "The cat" vs "The big cat", 1->1, 5->8
 * @param diffs LinkedList of Diff objects.
 * @param loc ClonePairLocation within text1.
 * @return ClonePairLocation within text2.
 */
Comment Type: Java Doc Comment
Comment: // Equality or deletion.
Comment Type: Line Comment
Comment: // Equality or insertion.
Comment Type: Line Comment
Comment: // Overshot the location.
Comment Type: Line Comment
Comment: // The location was deleted.
Comment Type: Line Comment
Comment: // Add the remaining character length.
Comment Type: Line Comment
Comment: /**
 * Convert a Diff list into a pretty HTML report.
 * @param diffs LinkedList of Diff objects.
 * @return HTML representation.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Compute and return the source text (all equalities and deletions).
 * @param diffs LinkedList of Diff objects.
 * @return Source text.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Compute and return the destination text (all equalities and insertions).
 * @param diffs LinkedList of Diff objects.
 * @return Destination text.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Compute the Levenshtein distance; the number of inserted, deleted or
 * substituted characters.
 * @param diffs LinkedList of Diff objects.
 * @return Number of changes.
 */
Comment Type: Java Doc Comment
Comment: // A deletion and an insertion is one substitution.
Comment Type: Line Comment
Comment: /**
 * Crush the ca.concordia.jdeodorant.eclipse.commandline.diff into an encoded string which describes the operations
 * required to transform text1 into text2.
 * E.g. =3\t-2\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.
 * Operations are tab-separated.  Inserted text is escaped using %xx notation.
 * @param diffs Array of Diff objects.
 * @return Delta text.
 */
Comment Type: Java Doc Comment
Comment: // Not likely on modern system.
Comment Type: Line Comment
Comment: // Strip off trailing tab character.
Comment Type: Line Comment
Comment: /**
 * Given the original text1, and an encoded string which describes the
 * operations required to transform text1 into text2, compute the full ca.concordia.jdeodorant.eclipse.commandline.diff.
 * @param text1 Source string for the ca.concordia.jdeodorant.eclipse.commandline.diff.
 * @param delta Delta text.
 * @return Array of Diff objects or null if invalid.
 * @throws IllegalArgumentException If invalid input.
 */
Comment Type: Java Doc Comment
Comment: // Cursor in text1
Comment Type: Line Comment
Comment: // Each token begins with a one character parameter which specifies the
Comment Type: Line Comment
Comment: // Blank tokens are ok (from a trailing \t).
Comment Type: Line Comment
Comment: // operation of this token (delete, insert, equality).
Comment Type: Line Comment
Comment: // decode would change all "+" to " "
Comment Type: Line Comment
Comment: // Not likely on modern system.
Comment Type: Line Comment
Comment: // Malformed URI sequence.
Comment Type: Line Comment
Comment: // Fall through.
Comment Type: Line Comment
Comment: // Anything else is an error.
Comment Type: Line Comment
Comment: /**
 * Locate the best instance of 'pattern' in 'text' near 'loc'.
 * Returns -1 if no match found.
 * @param text The text to search.
 * @param pattern The pattern to search for.
 * @param loc The location to search around.
 * @return Best match index or -1.
 */
Comment Type: Java Doc Comment
Comment: // Check for null inputs.
Comment Type: Line Comment
Comment: // Shortcut (potentially not guaranteed by the algorithm)
Comment Type: Line Comment
Comment: // Nothing to match.
Comment Type: Line Comment
Comment: // Perfect match at the perfect spot!  (Includes case of null pattern)
Comment Type: Line Comment
Comment: // Do a fuzzy compare.
Comment Type: Line Comment
Comment: /**
 * Locate the best instance of 'pattern' in 'text' near 'loc' using the
 * Bitap algorithm.  Returns -1 if no match found.
 * @param text The text to search.
 * @param pattern The pattern to search for.
 * @param loc The location to search around.
 * @return Best match index or -1.
 */
Comment Type: Java Doc Comment
Comment: // Initialise the alphabet.
Comment Type: Line Comment
Comment: // Highest score beyond which we give up.
Comment Type: Line Comment
Comment: // Is there a nearby exact match? (speedup)
Comment Type: Line Comment
Comment: // What about in the other direction? (speedup)
Comment Type: Line Comment
Comment: // Initialise the bit arrays.
Comment Type: Line Comment
Comment: // Empty initialization added to appease Java compiler.
Comment Type: Line Comment
Comment: // Scan for the best match; each iteration allows for one more error.
Comment Type: Line Comment
Comment: // Run a binary search to determine how far from 'loc' we can stray at
Comment Type: Line Comment
Comment: // this error level.
Comment Type: Line Comment
Comment: // Use the result from this iteration as the maximum for the next.
Comment Type: Line Comment
Comment: // Out of range.
Comment Type: Line Comment
Comment: // First pass: exact match.
Comment Type: Line Comment
Comment: // Subsequent passes: fuzzy match.
Comment Type: Line Comment
Comment: // This match will almost certainly be better than any existing
Comment Type: Line Comment
Comment: // match.  But check anyway.
Comment Type: Line Comment
Comment: // Told you so.
Comment Type: Line Comment
Comment: // When passing loc, don't exceed our current distance from loc.
Comment Type: Line Comment
Comment: // Already passed loc, downhill from here on in.
Comment Type: Line Comment
Comment: // No hope for a (better) match at greater error levels.
Comment Type: Line Comment
Comment: /**
 * Compute and return the score for a match with e errors and x location.
 * @param e Number of errors in match.
 * @param x ClonePairLocation of match.
 * @param loc Expected location of match.
 * @param pattern Pattern being sought.
 * @return Overall score for match (0.0 = good, 1.0 = bad).
 */
Comment Type: Java Doc Comment
Comment: // Dodge divide by zero error.
Comment Type: Line Comment
Comment: /**
 * Initialise the alphabet for the Bitap algorithm.
 * @param pattern The text to encode.
 * @return Hash of character locations.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Increase the context until it is unique,
 * but don't let the pattern expand beyond Match_MaxBits.
 * @param patch The patch to grow.
 * @param text Source text.
 */
Comment Type: Java Doc Comment
Comment: // Look for the first and last matches of pattern in text.  If two different
Comment Type: Line Comment
Comment: // matches are found, increase the pattern length.
Comment Type: Line Comment
Comment: // Add one chunk for good luck.
Comment Type: Line Comment
Comment: // Add the prefix.
Comment Type: Line Comment
Comment: // Add the suffix.
Comment Type: Line Comment
Comment: // Roll back the start points.
Comment Type: Line Comment
Comment: // Extend the lengths.
Comment Type: Line Comment
Comment: /**
 * Compute a list of patches to turn text1 into text2.
 * A set of diffs will be computed.
 * @param text1 Old text.
 * @param text2 New text.
 * @return LinkedList of Patch objects.
 */
Comment Type: Java Doc Comment
Comment: // No diffs provided, compute our own.
Comment Type: Line Comment
Comment: /**
 * Compute a list of patches to turn text1 into text2.
 * text1 will be derived from the provided diffs.
 * @param diffs Array of Diff objects for text1 to text2.
 * @return LinkedList of Patch objects.
 */
Comment Type: Java Doc Comment
Comment: // No origin string provided, compute our own.
Comment Type: Line Comment
Comment: /**
 * Compute a list of patches to turn text1 into text2.
 * text2 is ignored, diffs are the delta between text1 and text2.
 * @param text1 Old text
 * @param text2 Ignored.
 * @param diffs Array of Diff objects for text1 to text2.
 * @return LinkedList of Patch objects.
 * @deprecated Prefer patch_make(String text1, LinkedList<Diff> diffs).
 */
Comment Type: Java Doc Comment
Comment: /**
 * Compute a list of patches to turn text1 into text2.
 * text2 is not provided, diffs are the delta between text1 and text2.
 * @param text1 Old text.
 * @param diffs Array of Diff objects for text1 to text2.
 * @return LinkedList of Patch objects.
 */
Comment Type: Java Doc Comment
Comment: // Start with text1 (prepatch_text) and apply the diffs until we arrive at
Comment Type: Line Comment
Comment: // text2 (postpatch_text). We recreate the patches one by one to determine
Comment Type: Line Comment
Comment: // Get rid of the null case.
Comment Type: Line Comment
Comment: // Number of characters into the text1 string.
Comment Type: Line Comment
Comment: // Number of characters into the text2 string.
Comment Type: Line Comment
Comment: // context info.
Comment Type: Line Comment
Comment: // A new patch starts here.
Comment Type: Line Comment
Comment: // Small equality inside a patch.
Comment Type: Line Comment
Comment: // Time for a new patch.
Comment Type: Line Comment
Comment: // Unlike Unidiff, our patch lists have a rolling context.
Comment Type: Line Comment
Comment: // http://code.google.com/p/google-ca.concordia.jdeodorant.eclipse.commandline.diff-match-patch/wiki/Unidiff
Comment Type: Line Comment
Comment: // Update prepatch text & pos to reflect the application of the
Comment Type: Line Comment
Comment: // just completed patch.
Comment Type: Line Comment
Comment: // Update the current character count.
Comment Type: Line Comment
Comment: // Pick up the leftover patch if not empty.
Comment Type: Line Comment
Comment: /**
 * Given an array of patches, return another array that is identical.
 * @param patches Array of Patch objects.
 * @return Array of Patch objects.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Merge a set of patches onto the text.  Return a patched text, as well
 * as an array of true/false values indicating which patches were applied.
 * @param patches Array of Patch objects
 * @param text Old text.
 * @return Two element Object array, containing the new text and an array of
 *      boolean values.
 */
Comment Type: Java Doc Comment
Comment: // delta keeps track of the offset between the expected and actual location
Comment Type: Line Comment
Comment: // of the previous patch.  If there are patches expected at positions 10 and
Comment Type: Line Comment
Comment: // 20, but the first patch was found at 12, delta is 2 and the second patch
Comment Type: Line Comment
Comment: // Deep copy the patches so that no changes are made to originals.
Comment Type: Line Comment
Comment: // has an effective expected position of 22.
Comment Type: Line Comment
Comment: // patch_splitMax will only provide an oversized pattern in the case of
Comment Type: Line Comment
Comment: // a monster delete.
Comment Type: Line Comment
Comment: // Can't find valid trailing context.  Drop this patch.
Comment Type: Line Comment
Comment: // No match found.  :(
Comment Type: Line Comment
Comment: // Subtract the delta for this failed patch from subsequent patches.
Comment Type: Line Comment
Comment: // Found a match.  :)
Comment Type: Line Comment
Comment: // Perfect match, just shove the replacement text in.
Comment Type: Line Comment
Comment: // Imperfect match.  Run a ca.concordia.jdeodorant.eclipse.commandline.diff to get a framework of equivalent
Comment Type: Line Comment
Comment: // indices.
Comment Type: Line Comment
Comment: // The end points match, but the content is unacceptably bad.
Comment Type: Line Comment
Comment: // Insertion
Comment Type: Line Comment
Comment: // Deletion
Comment Type: Line Comment
Comment: // Strip the padding off.
Comment Type: Line Comment
Comment: /**
 * Add some padding on text start and end so that edges can match something.
 * Intended to be called only from within patch_apply.
 * @param patches Array of Patch objects.
 * @return The padding string added to each side.
 */
Comment Type: Java Doc Comment
Comment: // Bump all the patches forward.
Comment Type: Line Comment
Comment: // Add some padding on start of first ca.concordia.jdeodorant.eclipse.commandline.diff.
Comment Type: Line Comment
Comment: // Add nullPadding equality.
Comment Type: Line Comment
Comment: // Should be 0.
Comment Type: Line Comment
Comment: // Should be 0.
Comment Type: Line Comment
Comment: // Grow first equality.
Comment Type: Line Comment
Comment: // Add some padding on end of last ca.concordia.jdeodorant.eclipse.commandline.diff.
Comment Type: Line Comment
Comment: // Add nullPadding equality.
Comment Type: Line Comment
Comment: // Grow last equality.
Comment Type: Line Comment
Comment: /**
 * Look through the patches and break up any which are longer than the
 * maximum limit of the match algorithm.
 * Intended to be called only from within patch_apply.
 * @param patches LinkedList of Patch objects.
 */
Comment Type: Java Doc Comment
Comment: // Remove the big old patch.
Comment Type: Line Comment
Comment: // Create one of several smaller patches.
Comment Type: Line Comment
Comment: // Insertions are harmless.
Comment Type: Line Comment
Comment: // This is a large deletion.  Let it pass in one chunk.
Comment Type: Line Comment
Comment: // Deletion or equality.  Only take as much as we can stomach.
Comment Type: Line Comment
Comment: // Compute the head context for the next patch.
Comment Type: Line Comment
Comment: // Append the end context for this patch.
Comment Type: Line Comment
Comment: /**
 * Take a list of patches and return a textual representation.
 * @param patches List of Patch objects.
 * @return Text representation of patches.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Parse a textual representation of patches and return a List of Patch
 * objects.
 * @param textline Text representation of patches.
 * @return List of Patch objects.
 * @throws IllegalArgumentException If invalid input.
 */
Comment Type: Java Doc Comment
Comment: // Blank line?  Whatever.
Comment Type: Line Comment
Comment: // decode would change all "+" to " "
Comment Type: Line Comment
Comment: // Not likely on modern system.
Comment Type: Line Comment
Comment: // Malformed URI sequence.
Comment Type: Line Comment
Comment: // Deletion.
Comment Type: Line Comment
Comment: // Insertion.
Comment Type: Line Comment
Comment: // Minor equality.
Comment Type: Line Comment
Comment: // Start of next patch.
Comment Type: Line Comment
Comment: // WTF?
Comment Type: Line Comment
Comment: /**
 * Class representing one ca.concordia.jdeodorant.eclipse.commandline.diff operation.
 */
Comment Type: Java Doc Comment
Comment: /**
 * One of: INSERT, DELETE or EQUAL.
 */
Comment Type: Java Doc Comment
Comment: /**
 * The text associated with this ca.concordia.jdeodorant.eclipse.commandline.diff operation.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Constructor.  Initializes the ca.concordia.jdeodorant.eclipse.commandline.diff with the provided values.
 * @param operation One of INSERT, DELETE or EQUAL.
 * @param text The text being applied.
 */
Comment Type: Java Doc Comment
Comment: // Construct a ca.concordia.jdeodorant.eclipse.commandline.diff with the specified operation and text.
Comment Type: Line Comment
Comment: /**
 * Display a human-readable version of this Diff.
 * @return text version.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Create a numeric hash value for a Diff.
 * This function is not used by DMP.
 * @return Hash value.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Is this Diff equivalent to another Diff?
 * @param obj Another Diff to compare against.
 * @return true or false.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Class representing one patch operation.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Constructor.  Initializes with an empty list of diffs.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Emmulate GNU ca.concordia.jdeodorant.eclipse.commandline.diff's format.
 * Header: @@ -382,8 +481,9 @@
 * Indicies are printed as 1-based, not 0-based.
 * @return The GNU ca.concordia.jdeodorant.eclipse.commandline.diff string.
 */
Comment Type: Java Doc Comment
Comment: // Escape the body of the patch with %xx notation.
Comment Type: Line Comment
Comment: // Not likely on modern system.
Comment Type: Line Comment
Comment: /**
 * Unescape selected chars for compatability with JavaScript's encodeURI.
 * In speed critical applications this could be dropped since the
 * receiving application will certainly decode these fine.
 * Note that this function is case-sensitive.  Thus "%3f" would not be
 * unescaped.  But this is ok because it is only called with the output of
 * URLEncoder.encode which returns uppercase hex.
 *
 * Example: "%3F" -> "?", "%24" -> "$", etc.
 *
 * @param str The string to escape.
 * @return The escaped string.
 */
Comment Type: Java Doc Comment
File LOC: 1533
Number of Comments: 354
Comment Percentage: 23%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\AbstractMethodDeclaration.java
File LOC: 70
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\AbstractMethodInvocationObject.java
Comment: // private MethodInvocation methodInvocation;
Comment Type: Line Comment
Comment: // sb.append(":").append(returnType);
Comment Type: Line Comment
File LOC: 117
Number of Comments: 2
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\Access.java
File LOC: 18
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\AnonymousClassDeclarationObject.java
Comment: // add the fields of the class in which the anonymous class is declared
Comment Type: Line Comment
File LOC: 57
Number of Comments: 1
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\ArrayAccessObject.java
File LOC: 18
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\ArrayCreationObject.java
File LOC: 13
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\association\Association.java
File LOC: 49
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\association\AssociationDetection.java
Comment: // cover also other collections in the future
Comment Type: Line Comment
Comment: // node is the target class of move operation
Comment Type: Line Comment
File LOC: 164
Number of Comments: 2
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\ASTInformation.java
File LOC: 52
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\ASTInformationGenerator.java
File LOC: 12
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\ASTReader.java
Comment: // we need bindings later on
Comment Type: Line Comment
File LOC: 562
Number of Comments: 1
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\ClassDeclarationObject.java
File LOC: 195
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\ClassInstanceCreationObject.java
File LOC: 54
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\ClassObject.java
Comment: /*public boolean isInnerClass() {
    	if(typeDeclaration.getParent() instanceof TypeDeclaration)
    		return true;
    	else if(typeDeclaration.getParent() instanceof CompilationUnit)
    		return false;
    	return false;
    }

    public TypeDeclaration getOuterClass() {
    	if(typeDeclaration.getParent() instanceof TypeDeclaration)
    		return (TypeDeclaration)typeDeclaration.getParent();
    	else if(typeDeclaration.getParent() instanceof CompilationUnit)
    		return null;
    	return null;
    }*/
Comment Type: Block Comment
Comment: // private TypeDeclaration typeDeclaration;
Comment Type: Line Comment
Comment: // this.typeDeclaration = typeDeclaration;
Comment Type: Line Comment
Comment: // return this.typeDeclaration;
Comment Type: Line Comment
Comment: // TypeCheckCodeFragmentAnalyzer analyzer = new TypeCheckCodeFragmentAnalyzer(typeCheckElimination, typeDeclaration, methodObject.getMethodDeclaration());
Comment Type: Line Comment
File LOC: 238
Number of Comments: 5
Comment Percentage: 2%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\CommentObject.java
Comment: // first line of the file starts from 0
Comment Type: Line Comment
File LOC: 72
Number of Comments: 1
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\CommentType.java
File LOC: 4
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\CompilationErrorDetectedException.java
File LOC: 13
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\CompilationUnitCache.java
Comment: // String key corresponds to MethodDeclaration.resolveBinding.getKey()
Comment Type: Line Comment
Comment: // String key corresponds to MethodDeclaration.resolveBinding.getKey()
Comment Type: Line Comment
Comment: // String key corresponds to MethodDeclaration.resolveBinding.getKey()
Comment Type: Line Comment
File LOC: 218
Number of Comments: 3
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\ConstructorInvocationObject.java
Comment: // return this.superMethodInvocation;
Comment Type: Line Comment
File LOC: 17
Number of Comments: 1
Comment Percentage: 5%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\ConstructorObject.java
Comment: // protected MethodDeclaration methodDeclaration;
Comment Type: Line Comment
Comment: // this.methodDeclaration = methodDeclaration;
Comment Type: Line Comment
Comment: // return this.methodDeclaration;
Comment Type: Line Comment
Comment: /*if(methodBody != null)
        	sb.append("\n").append(methodBody.toString());*/
Comment Type: Block Comment
File LOC: 429
Number of Comments: 4
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\CreationObject.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\AbstractExpression.java
File LOC: 59
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\AbstractMethodFragment.java
Comment: // private Map<AbstractVariable, LinkedHashSet<MethodInvocationObject>> invokedMethodsThroughFields;
Comment Type: Line Comment
Comment: // private Map<AbstractVariable, LinkedHashSet<MethodInvocationObject>> invokedMethodsThroughParameters;
Comment Type: Line Comment
Comment: // private Map<AbstractVariable, LinkedHashSet<MethodInvocationObject>> invokedMethodsThroughLocalVariables;
Comment Type: Line Comment
Comment: // private Set<MethodInvocationObject> invokedMethodsThroughThisReference;
Comment Type: Line Comment
Comment: // private Set<AbstractVariable> definedFieldsThroughFields;
Comment Type: Line Comment
Comment: // private Set<AbstractVariable> usedFieldsThroughFields;
Comment Type: Line Comment
Comment: // private Set<AbstractVariable> definedFieldsThroughParameters;
Comment Type: Line Comment
Comment: // private Set<AbstractVariable> usedFieldsThroughParameters;
Comment Type: Line Comment
Comment: // private Set<AbstractVariable> definedFieldsThroughLocalVariables;
Comment Type: Line Comment
Comment: // private Set<AbstractVariable> usedFieldsThroughLocalVariables;
Comment Type: Line Comment
Comment: // private Set<PlainVariable> definedFieldsThroughThisReference;
Comment Type: Line Comment
Comment: // private Set<PlainVariable> usedFieldsThroughThisReference;
Comment Type: Line Comment
Comment: // this.invokedMethodsThroughFields = new LinkedHashMap<AbstractVariable, LinkedHashSet<MethodInvocationObject>>();
Comment Type: Line Comment
Comment: // this.invokedMethodsThroughParameters = new LinkedHashMap<AbstractVariable, LinkedHashSet<MethodInvocationObject>>();
Comment Type: Line Comment
Comment: // this.invokedMethodsThroughLocalVariables = new LinkedHashMap<AbstractVariable, LinkedHashSet<MethodInvocationObject>>();
Comment Type: Line Comment
Comment: // this.invokedMethodsThroughThisReference = new LinkedHashSet<MethodInvocationObject>();
Comment Type: Line Comment
Comment: // this.definedFieldsThroughFields = new LinkedHashSet<AbstractVariable>();
Comment Type: Line Comment
Comment: // this.usedFieldsThroughFields = new LinkedHashSet<AbstractVariable>();
Comment Type: Line Comment
Comment: // this.definedFieldsThroughParameters = new LinkedHashSet<AbstractVariable>();
Comment Type: Line Comment
Comment: // this.usedFieldsThroughParameters = new LinkedHashSet<AbstractVariable>();
Comment Type: Line Comment
Comment: // this.definedFieldsThroughLocalVariables = new LinkedHashSet<AbstractVariable>();
Comment Type: Line Comment
Comment: // this.usedFieldsThroughLocalVariables = new LinkedHashSet<AbstractVariable>();
Comment Type: Line Comment
Comment: // this.definedFieldsThroughThisReference = new LinkedHashSet<PlainVariable>();
Comment Type: Line Comment
Comment: // this.usedFieldsThroughThisReference = new LinkedHashSet<PlainVariable>();
Comment Type: Line Comment
Comment: // addInvokedMethodThroughField(invoker, methodInvocationObject);
Comment Type: Line Comment
Comment: // addInvokedMethodThroughParameter(invoker, methodInvocationObject);
Comment Type: Line Comment
Comment: // addInvokedMethodThroughLocalVariable(invoker, methodInvocationObject);
Comment Type: Line Comment
Comment: // addInvokedMethodThroughThisReference(methodInvocationObject);
Comment Type: Line Comment
Comment: /*
	private void addInvokedMethodThroughField(AbstractVariable field, MethodInvocationObject methodInvocation) {
		if(invokedMethodsThroughFields.containsKey(field)) {
			LinkedHashSet<MethodInvocationObject> methodInvocations = invokedMethodsThroughFields.get(field);
			methodInvocations.add(methodInvocation);
		}
		else {
			LinkedHashSet<MethodInvocationObject> methodInvocations = new LinkedHashSet<MethodInvocationObject>();
			methodInvocations.add(methodInvocation);
			invokedMethodsThroughFields.put(field, methodInvocations);
		}
		if(parent != null) {
			parent.addInvokedMethodThroughField(field, methodInvocation);
		}
	}
*/
Comment Type: Block Comment
Comment: /*
	private void addInvokedMethodThroughParameter(AbstractVariable parameter, MethodInvocationObject methodInvocation) {
		if(invokedMethodsThroughParameters.containsKey(parameter)) {
			LinkedHashSet<MethodInvocationObject> methodInvocations = invokedMethodsThroughParameters.get(parameter);
			methodInvocations.add(methodInvocation);
		}
		else {
			LinkedHashSet<MethodInvocationObject> methodInvocations = new LinkedHashSet<MethodInvocationObject>();
			methodInvocations.add(methodInvocation);
			invokedMethodsThroughParameters.put(parameter, methodInvocations);
		}
		if(parent != null) {
			parent.addInvokedMethodThroughParameter(parameter, methodInvocation);
		}
	}
*/
Comment Type: Block Comment
Comment: /*
	private void addInvokedMethodThroughLocalVariable(AbstractVariable localVariable, MethodInvocationObject methodInvocation) {
		if(invokedMethodsThroughLocalVariables.containsKey(localVariable)) {
			LinkedHashSet<MethodInvocationObject> methodInvocations = invokedMethodsThroughLocalVariables.get(localVariable);
			methodInvocations.add(methodInvocation);
		}
		else {
			LinkedHashSet<MethodInvocationObject> methodInvocations = new LinkedHashSet<MethodInvocationObject>();
			methodInvocations.add(methodInvocation);
			invokedMethodsThroughLocalVariables.put(localVariable, methodInvocations);
		}
		if(parent != null) {
			parent.addInvokedMethodThroughLocalVariable(localVariable, methodInvocation);
		}
	}
*/
Comment Type: Block Comment
Comment: /*
	private void addInvokedMethodThroughThisReference(MethodInvocationObject methodInvocation) {
		invokedMethodsThroughThisReference.add(methodInvocation);
		if(parent != null) {
			parent.addInvokedMethodThroughThisReference(methodInvocation);
		}
	}
*/
Comment Type: Block Comment
Comment: // definedFieldsThroughThisReference.add((PlainVariable)variable);
Comment Type: Line Comment
Comment: // definedFieldsThroughFields.add(variable);
Comment Type: Line Comment
Comment: // definedFieldsThroughParameters.add(variable);
Comment Type: Line Comment
Comment: // definedFieldsThroughLocalVariables.add(variable);
Comment Type: Line Comment
Comment: // usedFieldsThroughThisReference.add((PlainVariable)variable);
Comment Type: Line Comment
Comment: // usedFieldsThroughFields.add(variable);
Comment Type: Line Comment
Comment: // usedFieldsThroughParameters.add(variable);
Comment Type: Line Comment
Comment: // usedFieldsThroughLocalVariables.add(variable);
Comment Type: Line Comment
File LOC: 982
Number of Comments: 40
Comment Percentage: 4%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\AbstractStatement.java
File LOC: 32
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\CatchClauseObject.java
File LOC: 73
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\AbstractVariable.java
Comment: // protected VariableDeclaration name;
Comment Type: Line Comment
File LOC: 53
Number of Comments: 1
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\BasicBlock.java
File LOC: 74
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\BasicBlockCFG.java
Comment: // special handling for the try statement that is first node
Comment Type: Line Comment
File LOC: 77
Number of Comments: 1
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\CFG.java
Comment: // if a try node does not have resources, it is treated as a block and is omitted
Comment Type: Line Comment
Comment: // nodes.add(tryNode);
Comment Type: Line Comment
Comment: // if a try node has resources, it is treated as a non-composite node
Comment Type: Line Comment
Comment: /*else if(parent.getStatement() instanceof DoStatement)
					action = PLACE_NEW_LIST_SECOND_FROM_TOP;*/
Comment Type: Block Comment
Comment: // previous statement is the last statement of this try block
Comment Type: Line Comment
Comment: // try block is empty and previous statement is the statement before this try block
Comment Type: Line Comment
Comment: // previous statement is the last statement of this block
Comment Type: Line Comment
Comment: // current if statement is the last statement of the composite statement
Comment Type: Line Comment
Comment: /*if(parent != null && parent.getStatement() instanceof DoStatement &&
							statements.get(0).getStatement() instanceof IfStatement)
						action = PLACE_NEW_LIST_SECOND_FROM_TOP;*/
Comment Type: Block Comment
Comment: // special handling of break, continue, return
Comment Type: Line Comment
File LOC: 640
Number of Comments: 10
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\CFGBlockNode.java
File LOC: 14
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\CFGBranchConditionalNode.java
File LOC: 44
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\CFGBranchDoLoopNode.java
Comment: // join node is always before do-loop node
Comment Type: Line Comment
File LOC: 27
Number of Comments: 1
Comment Percentage: 3%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\CFGBranchIfNode.java
File LOC: 81
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\CFGBranchLoopNode.java
File LOC: 41
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\CFGBranchNode.java
Comment: /*if(((TryStatementObject)tryStatement).hasResources())
			nestedStatements.add(tryStatement);*/
Comment Type: Block Comment
File LOC: 125
Number of Comments: 1
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\CFGBranchSwitchNode.java
File LOC: 7
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\CFGBreakNode.java
File LOC: 25
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\CFGContinueNode.java
File LOC: 25
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\CFGExitNode.java
File LOC: 21
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\CFGNode.java
File LOC: 93
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\CFGSwitchCaseNode.java
File LOC: 17
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\CFGSynchronizedNode.java
File LOC: 7
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\CFGThrowNode.java
File LOC: 7
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\CFGTryNode.java
File LOC: 31
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\CompositeVariable.java
Comment: // if composite variable is "one.two.three" then right part is "two.three"
Comment Type: Line Comment
Comment: // if composite variable is "one.two.three" then left part is "one.two"
Comment Type: Line Comment
Comment: // if composite variable is "one.two.three" then final variable is "three"
Comment Type: Line Comment
Comment: // if composite variable is "one.two.three" then initial variable is "one"
Comment Type: Line Comment
File LOC: 99
Number of Comments: 4
Comment Percentage: 4%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\Flow.java
File LOC: 39
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\Graph.java
File LOC: 23
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\GraphEdge.java
File LOC: 15
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\GraphNode.java
File LOC: 27
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\BottomUpCDTMapper.java
Comment: // best match with minimum differences
Comment Type: Line Comment
Comment: // filter leaf pairs for which a sibling leaf pair is already added in the list
Comment Type: Line Comment
Comment: // post-processing
Comment Type: Line Comment
Comment: // apply first-match approach
Comment Type: Line Comment
Comment: // one node is an if statement with a single else, and the other is a ternary operator
Comment Type: Line Comment
Comment: // apply first-match approach
Comment Type: Line Comment
File LOC: 255
Number of Comments: 6
Comment Percentage: 2%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\CloneInstanceMapper.java
Comment: // These two contain the entire nesting structure of the methods
Comment Type: Line Comment
Comment: // Get the control predicate nodes inside the ASTNode returned by Eclipse's NodeFinder
Comment Type: Line Comment
Comment: // Get the control predicate nodes inside the clone fragments
Comment Type: Line Comment
Comment: // Get all statement nodes (including control and leaf nodes) inside the ASTNode returned by Eclipse's NodeFinder
Comment Type: Line Comment
Comment: // Get all statement nodes inside the clone fragments
Comment Type: Line Comment
Comment: // Get all the control predicate nodes inside the methods containing the clone fragments
Comment Type: Line Comment
Comment: // Get the control dependence tree nodes in the clone fragments
Comment Type: Line Comment
Comment: // If one of the clone fragments contain no control predicate nodes, create a dummy CDT
Comment Type: Line Comment
Comment: // Get the ControlDependenceTreeNode corresponding to the parent nodes.
Comment Type: Line Comment
Comment: // Get the control parent (or method) containing the clone fragments
Comment Type: Line Comment
Comment: // If all the ASTNodes are nested under an "else", it returns the "else" ControlDependenceTreeNode instead of the "if"
Comment Type: Line Comment
Comment: // Get all the control dependence tree nodes under the obtained ControlDependenceTreeNode
Comment Type: Line Comment
Comment: // If the ControlDependenceTreeNodeX is a method entry node, then remove its children cdt nodes
Comment Type: Line Comment
Comment: // Create CDT subtree with containing only the filtered CDTNodes
Comment Type: Line Comment
Comment: // If we have a control structure
Comment Type: Line Comment
Comment: // Remove the CDT subtree nodes being part of an incomplete if-else-if chain
Comment Type: Line Comment
Comment: // Create CDT subtree with containing only the filtered CDTNodes
Comment Type: Line Comment
Comment: // Nodes of original CDTs in Breadth First order
Comment Type: Line Comment
Comment: // Do the bottom up mapping and get all the pairs of mapped CDT subtrees
Comment Type: Line Comment
Comment: // Get the solutions
Comment Type: Line Comment
Comment: // For each solution in the bottom-up matching, do the PDG mapping
Comment Type: Line Comment
Comment: /*
								 * Filtering the nodes inside subTreeCDTNodes1 and subTreeCDTNodes2, keep only
								 * the nodes in the clone fragments
								 */
Comment Type: Block Comment
Comment: // If all the matched pairs are completely inside one of the code fragments
Comment Type: Line Comment
Comment: // Get the nodes of the matched pairs in breadth first order
Comment Type: Line Comment
Comment: // Generate CDTs from the matched nodes
Comment Type: Line Comment
Comment: // insert unmatched CDT nodes under matched ones
Comment Type: Line Comment
Comment: // insert unmatched CDT nodes under matched ones
Comment Type: Line Comment
Comment: // check if the second parent key is the only child of the first parent key
Comment Type: Line Comment
Comment: // If the node is completely inside
Comment Type: Line Comment
File LOC: 690
Number of Comments: 29
Comment Percentage: 4%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\CloneRefactoringType.java
File LOC: 12
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\CloneStructureNode.java
Comment: // find the else node
Comment Type: Line Comment
Comment: // find the child of controlParent corresponding to the symmetricalPDGNodeMapping
Comment Type: Line Comment
Comment: // else node is not found
Comment Type: Line Comment
Comment: // check whether gapNode is an if statement
Comment Type: Line Comment
Comment: // create a new else gap and add gapNode under it
Comment Type: Line Comment
File LOC: 499
Number of Comments: 5
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\CloneType.java
File LOC: 12
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\CodeFragmentDecomposer.java
File LOC: 99
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\CompleteSubTreeMatch.java
Comment: // return this.matchPairs.containsAll(subTree.matchPairs);
Comment Type: Line Comment
File LOC: 70
Number of Comments: 1
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\ControlDependenceTreeGenerator.java
Comment: // construct CDT from method entry node
Comment Type: Line Comment
Comment: // special handling for symmetrical if statements
Comment Type: Line Comment
Comment: // a case of "if/else if" -> add as a sibling, not as a child
Comment Type: Line Comment
Comment: // check if dstNode is under an else clause and create a "fake else" node
Comment Type: Line Comment
Comment: // search if the "fake else" node is already created
Comment Type: Line Comment
Comment: // dstNode is not a control predicate
Comment Type: Line Comment
Comment: // first check if the dstNode is nested under a try block
Comment Type: Line Comment
Comment: // dstNode is not nested under a try node, but is nested under an else node
Comment Type: Line Comment
Comment: // check if tryNode is nested inside another tryNode
Comment Type: Line Comment
Comment: // return new ControlDependenceTreeNode(cdtNode, tryNode);
Comment Type: Line Comment
Comment: // check if tryNode is nested under an else clause
Comment Type: Line Comment
File LOC: 201
Number of Comments: 11
Comment Percentage: 5%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\ControlDependenceTreeNode.java
Comment: // count 1 for "this" node
Comment Type: Line Comment
Comment: // else node
Comment Type: Line Comment
Comment: // special handling if a try block follows after else clause
Comment Type: Line Comment
File LOC: 375
Number of Comments: 3
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\ControlDependenceTreeNodeMatchPair.java
File LOC: 127
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\ControlDependenceTreeNodeMatchPairComparator.java
File LOC: 24
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\DivideAndConquerMatcher.java
Comment: // if true full tree match is performed, otherwise subtree match is performed
Comment Type: Line Comment
Comment: // TODO: Introduce comparison of difference "weights" in the case of multiple maximum states with minimum differences
Comment Type: Line Comment
Comment: // special handling in level 0 for sub tree match
Comment Type: Line Comment
Comment: // int minId = allNodesInSubTreePDG1.first().getId();
Comment Type: Line Comment
Comment: /* || nodeG1.getId() < minId*/
Comment Type: Block Comment
Comment: // special handling to add the nodes inside the final else of a symmetrical if/else if
Comment Type: Line Comment
Comment: // int minId = allNodesInSubTreePDG2.first().getId();
Comment Type: Line Comment
Comment: /* || nodeG2.getId() < minId*/
Comment Type: Block Comment
Comment: // check parent-child relationship preservation (parent in the current level, children in the previously examined level)
Comment Type: Line Comment
Comment: // symmetrical if-else match
Comment Type: Line Comment
Comment: // check if there is already a difference covering the entire conditional expressions
Comment Type: Line Comment
Comment: // match nested nodes symmetrically
Comment Type: Line Comment
Comment: // handle the case where only one of the cdtNodes has mapped children
Comment Type: Line Comment
Comment: // cdtNode2 has no children
Comment Type: Line Comment
Comment: // cdtNode1 has no children
Comment Type: Line Comment
Comment: // check sibling relationship preservation (all siblings in the current level)
Comment Type: Line Comment
Comment: // set true only if cdtNode is the first node in the list of children
Comment Type: Line Comment
Comment: // remove switch nodes from the nodes to be processed
Comment Type: Line Comment
Comment: // if predicate is a do-loop place it before the nodes nested inside it
Comment Type: Line Comment
Comment: // search for symmetrical if statements
Comment Type: Line Comment
Comment: // add previous parents under the new parent
Comment Type: Line Comment
Comment: // create the root node of the clone structure
Comment Type: Line Comment
Comment: // create the root node of the clone structure
Comment Type: Line Comment
Comment: /* || symmetrical*/
Comment Type: Block Comment
Comment: /* || symmetrical*/
Comment Type: Block Comment
File LOC: 1475
Number of Comments: 25
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\ExtractStatementsVisitor.java
Comment: // check if start node is inside the AnonymousClassDeclaration
Comment Type: Line Comment
File LOC: 162
Number of Comments: 1
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\IdBasedGap.java
Comment: // if an id is equal to zero it means that this id does not exist
Comment Type: Line Comment
File LOC: 43
Number of Comments: 1
Comment Percentage: 2%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\IdBasedMapping.java
File LOC: 18
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\IdenticalStatementDecomposer.java
File LOC: 33
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\MappingState.java
Comment: // returns the sum of the differences in the node Ids of the mapped nodes
Comment Type: Line Comment
Comment: // TODO fix the case where the a statement is matched in both clones, count only once
Comment Type: Line Comment
Comment: // get destination nodes if the edge is outgoing
Comment Type: Line Comment
Comment: // get source nodes if the edge is incoming
Comment Type: Line Comment
Comment: // special case
Comment Type: Line Comment
Comment: // if(dstNodeG1.getCFGNode() instanceof CFGBranchIfNode && dstNodeG2.getCFGNode() instanceof CFGBranchIfNode) {
Comment Type: Line Comment
Comment: // }
Comment Type: Line Comment
File LOC: 594
Number of Comments: 7
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\NodeMapping.java
File LOC: 142
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\PDGEdgeMapping.java
File LOC: 77
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\PDGElseGap.java
File LOC: 55
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\PDGElseMapping.java
File LOC: 56
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\PDGMapper.java
Comment: // insert unmatched CDT nodes under matched ones
Comment Type: Line Comment
Comment: // insert unmatched CDT nodes under matched ones
Comment Type: Line Comment
File LOC: 156
Number of Comments: 2
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\PDGNodeGap.java
Comment: /*public int compareTo(PDGNodeGap other) {
		if(this.nodeG1 != null && other.nodeG1 != null)
			return Integer.compare(this.nodeG1.getId(), other.nodeG1.getId());
		if(this.nodeG2 != null && other.nodeG2 != null)
			return Integer.compare(this.nodeG2.getId(), other.nodeG2.getId());
		
		if(this.nodeG1 != null && other.nodeG2 != null) {
			int id1 = this.nodeG1.getId();
			int id2 = other.nodeG2.getId();
			if(id1 == id2)
				return -1;
			else
				return Integer.compare(id1, id2);
		}
		if(other.nodeG1 != null && this.nodeG2 != null) {
			int id2 = other.nodeG1.getId();
			int id1 = this.nodeG2.getId();
			if(id1 == id2)
				return -1;
			else
				return Integer.compare(id1, id2);
		}
		return 0;
	}*/
Comment Type: Block Comment
File LOC: 96
Number of Comments: 1
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\PDGNodeMapping.java
File LOC: 261
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\PDGRegionSubTreeMapper.java
Comment: // creates CloneStructureRoot
Comment Type: Line Comment
File LOC: 115
Number of Comments: 1
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\PDGSubTreeMapper.java
Comment: // creates CloneStructureRoot
Comment Type: Line Comment
File LOC: 98
Number of Comments: 1
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\precondition\BoldStyler.java
File LOC: 12
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\precondition\DualExpressionPreconditionViolation.java
File LOC: 81
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\precondition\DualExpressionWithCommonSuperTypePreconditionViolation.java
File LOC: 95
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\precondition\ExpressionPreconditionViolation.java
File LOC: 37
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\precondition\NormalStyler.java
File LOC: 13
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\precondition\NotAllPossibleExecutionFlowsEndInReturnPreconditionViolation.java
File LOC: 20
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\precondition\PreconditionViolation.java
File LOC: 26
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\precondition\PreconditionViolationType.java
File LOC: 57
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\precondition\ReturnedVariablePreconditionViolation.java
File LOC: 76
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\precondition\StatementPreconditionViolation.java
File LOC: 110
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\precondition\Suggestion.java
File LOC: 18
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\precondition\UncommonSuperclassPreconditionViolation.java
File LOC: 33
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\precondition\ZeroMatchedStatementsPreconditionViolation.java
File LOC: 20
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\PreconditionExaminer.java
Comment: // includes used and modified fields
Comment Type: Line Comment
Comment: // includes only modified fields
Comment Type: Line Comment
Comment: // special handling for parameters
Comment Type: Line Comment
Comment: // sort variables based on their names
Comment Type: Line Comment
Comment: // sort variables based on their types (if a variable has the same type with multiple variables, apply first match)
Comment Type: Line Comment
Comment: // there is a different number of incoming dependencies
Comment Type: Line Comment
Comment: // usedLocalFields.addAll(statement.getDefinedFieldsThroughThisReference());
Comment Type: Line Comment
Comment: // usedLocalFields.addAll(composite.getDefinedFieldsThroughThisReferenceInExpressions());
Comment Type: Line Comment
Comment: // usedLocalFields.addAll(catchClause.getBody().getDefinedFieldsThroughThisReference());
Comment Type: Line Comment
Comment: // usedLocalFields.addAll(tryStatement.getFinallyClause().getDefinedFieldsThroughThisReference());
Comment Type: Line Comment
Comment: // exclude recursive method calls
Comment Type: Line Comment
Comment: // exclude recursive method calls
Comment Type: Line Comment
Comment: // usedLocalFields.addAll(calledMethod.getDefinedFieldsThroughThisReference());
Comment Type: Line Comment
Comment: /*declaringMethod1 != null && declaringMethod1.isEqualTo(method1) &&
									declaringMethod2 != null && declaringMethod2.isEqualTo(method2) &&*/
Comment Type: Block Comment
Comment: // special handing for renamed variables that are the qualifiers of qualified names
Comment Type: Line Comment
Comment: // if the returned variables are more than one, the precondition is violated
Comment Type: Line Comment
Comment: // the invoked methods have different signatures
Comment Type: Line Comment
Comment: // skip examining the conditional return precondition, if the number of examined nodes is equal to the number of PDG nodes
Comment Type: Line Comment
Comment: // first add the directly declared methods
Comment Type: Line Comment
Comment: // first add the directly declared methods
Comment Type: Line Comment
Comment: // check if both simpleNames refer to variables
Comment Type: Line Comment
Comment: // special handling for varags
Comment Type: Line Comment
Comment: // the argument has the type of the last varargs parameter
Comment Type: Line Comment
Comment: // do nothing
Comment Type: Line Comment
Comment: // add previous if statements containing conditional return
Comment Type: Line Comment
Comment: // add previous if statements containing conditional return
Comment Type: Line Comment
Comment: /*List<Expression> infixExpressions = expressionExtractor.getInfixExpressions(conditionalExpression);
				for(Expression expression : infixExpressions) {
					InfixExpression infixExpression = (InfixExpression)expression;
					allSimpleNamesInLeftOperands.addAll(expressionExtractor.getVariableInstructions(infixExpression.getLeftOperand()));
				}
				List<Expression> instanceofExpressions = expressionExtractor.getInstanceofExpressions(conditionalExpression);
				for(Expression expression : instanceofExpressions) {
					InstanceofExpression instanceofExpression = (InstanceofExpression)expression;
					allSimpleNamesInLeftOperands.addAll(expressionExtractor.getVariableInstructions(instanceofExpression.getLeftOperand()));
				}*/
Comment Type: Block Comment
Comment: // examine if it is a self-loop edge due to a loop-carried dependence
Comment Type: Line Comment
Comment: // precondition: non-mapped statement can be moved before the first mapped statement
Comment Type: Line Comment
Comment: // examine if it is a self-loop edge due to a loop-carried dependence
Comment Type: Line Comment
Comment: // check if a mappedNode modifies the state of an object that is used by nonMappedNode
Comment Type: Line Comment
Comment: // precondition: non-mapped statement can be moved after the last mapped statement
Comment Type: Line Comment
Comment: // examine if it is a self-loop edge due to a loop-carried dependence
Comment Type: Line Comment
Comment: // precondition: differences in expressions should be parameterizable
Comment Type: Line Comment
Comment: // find mapped node containing the expression
Comment Type: Line Comment
Comment: // check if pdgExpression is using dataDependence.data
Comment Type: Line Comment
Comment: // check if pdgExpression is defining dataDependence.data
Comment Type: Line Comment
Comment: // check if pdgExpression is defining dataDependence.data
Comment Type: Line Comment
Comment: // examine if it is a self-loop edge due to a loop-carried dependence
Comment Type: Line Comment
Comment: // the expression is within the catch/finally blocks of a try statement
Comment Type: Line Comment
Comment: // not in the same type
Comment Type: Line Comment
Comment: // abstract system class
Comment Type: Line Comment
Comment: // only two subTypes corresponding to the types of the classes containing the clones
Comment Type: Line Comment
Comment: // common super type is an interface and at least one of the subclasses does not have java.lang.Object as a superclass
Comment Type: Line Comment
Comment: // common super type is a tagging interface and both subclasses have java.lang.Object as a superclass
Comment Type: Line Comment
Comment: // common super type is a class and at least one of the subclasses does not have the common super type as a direct superclass
Comment Type: Line Comment
Comment: // accessedLocalFields1.addAll(mapper.getIndirectlyAccessedLocalFieldsG1());
Comment Type: Line Comment
Comment: // accessedLocalFields2.addAll(mapper.getIndirectlyAccessedLocalFieldsG2());
Comment Type: Line Comment
Comment: // allowing non-static method calls in only one of the clone fragments
Comment Type: Line Comment
Comment: // only for direct method calls, we allow them having parameter types with subclass type differences
Comment Type: Line Comment
File LOC: 3646
Number of Comments: 50
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\StatementCollector.java
File LOC: 146
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\SubTreeMatchComparator.java
File LOC: 9
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\SwitchBodyDecomposer.java
File LOC: 34
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\TopDownCDTMapper.java
Comment: // apply first-match approach
Comment Type: Line Comment
File LOC: 151
Number of Comments: 1
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\VariableBindingKeyPair.java
File LOC: 37
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\mapping\VariableBindingPair.java
File LOC: 51
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\MethodCallAnalyzer.java
Comment: // save in cache
Comment Type: Line Comment
Comment: // getRightPart() is not correct if variable is a CompositeVariable
Comment Type: Line Comment
Comment: // getRightPart() is not correct if variable is a CompositeVariable
Comment Type: Line Comment
Comment: // analyze only if the argument does not correspond to a varargs parameter
Comment Type: Line Comment
Comment: // save in cache
Comment Type: Line Comment
Comment: // analyze only if the argument does not correspond to a varargs parameter
Comment Type: Line Comment
Comment: // save in cache
Comment Type: Line Comment
Comment: // fix for method calls with varargs
Comment Type: Line Comment
Comment: // the invoked method is an inherited method
Comment Type: Line Comment
Comment: // the commented code that follows is causing significant performance deterioration. It's time to reconsider the PDG generation strategy
Comment Type: Line Comment
Comment: /*
							MethodInvocation methodInvocation2 = methodInvocationObject.getMethodInvocation();
							if(isUnprocessedMethod(processedMethods, methodInvocation2.resolveMethodBinding()))
								processInternalMethodInvocation(classObject2, methodObject2, variableDeclaration, processedMethods);
							*/
Comment Type: Block Comment
Comment: // check if the method contains only one throw statement throwing the UnsupportedOperationException, and then analyze the overriding methods in the subclasses
Comment Type: Line Comment
Comment: // method is native
Comment Type: Line Comment
Comment: // method is native
Comment Type: Line Comment
Comment: // method is native
Comment Type: Line Comment
Comment: // method is native
Comment Type: Line Comment
Comment: // method is native
Comment Type: Line Comment
Comment: // method is native
Comment Type: Line Comment
Comment: /* || subclassType.isInterface()*/
Comment Type: Block Comment
File LOC: 1076
Number of Comments: 19
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDG.java
Comment: // key is the jump node and value is the innermost loop node
Comment Type: Line Comment
Comment: // create data dependencies from other nodes
Comment Type: Line Comment
Comment: // create def-order data dependence edge
Comment Type: Line Comment
Comment: // create def-order data dependence edge
Comment Type: Line Comment
Comment: // returns the node (branch or method entry) that directly dominates the leader of the block
Comment Type: Line Comment
File LOC: 769
Number of Comments: 5
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGAbstractDataDependence.java
File LOC: 56
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGAntiDependence.java
File LOC: 6
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGBlockNode.java
File LOC: 128
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGControlDependence.java
File LOC: 53
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGControlPredicateNode.java
File LOC: 121
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGDataDependence.java
File LOC: 6
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGDependence.java
File LOC: 17
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGDependenceType.java
File LOC: 4
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGExitNode.java
File LOC: 17
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGExpression.java
Comment: /* &&
							(expression.getDefinedFieldsThroughThisReference().contains(key) || expression.getDefinedLocalVariables().contains(key) || expression.getDeclaredLocalVariables().contains(key))*/
Comment Type: Block Comment
Comment: // classObject == null => external method call
Comment Type: Line Comment
Comment: // methodObject != null => the internal method might not exist, in the case of built-in enumeration methods, such as values() and valueOf()
Comment Type: Line Comment
Comment: // classObject == null && !methodBinding.getDeclaringClass().isAnonymous() => external constructor call that is not an anonymous class declaration
Comment Type: Line Comment
Comment: // constructorObject != null => the internal constructor might not exist, in the case the default constructor is called
Comment Type: Line Comment
File LOC: 178
Number of Comments: 5
Comment Percentage: 2%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGMethodEntryNode.java
File LOC: 40
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGNode.java
Comment: // classObject == null => external method call
Comment Type: Line Comment
Comment: // methodObject != null => the internal method might not exist, in the case of built-in enumeration methods, such as values() and valueOf()
Comment Type: Line Comment
Comment: // classObject == null && !methodBinding.getDeclaringClass().isAnonymous() => external constructor call that is not an anonymous class declaration
Comment Type: Line Comment
Comment: // constructorObject != null => the internal constructor might not exist, in the case the default constructor is called
Comment Type: Line Comment
File LOC: 553
Number of Comments: 4
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGObjectSliceUnion.java
Comment: // add any required object-state slices that may be used from the resulting slice
Comment Type: Line Comment
Comment: // the declaration of the variable criterion is in the slice
Comment Type: Line Comment
File LOC: 504
Number of Comments: 2
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGObjectSliceUnionCollection.java
File LOC: 54
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGOutputDependence.java
File LOC: 6
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGSlice.java
File LOC: 428
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGSliceUnion.java
Comment: // add any required object-state slices that may be used from the resulting slice
Comment Type: Line Comment
Comment: // the declaration of the variable criterion is in the slice
Comment Type: Line Comment
File LOC: 486
Number of Comments: 2
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGSliceUnionCollection.java
File LOC: 35
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGStatementNode.java
File LOC: 118
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGSynchronizedNode.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PDGTryNode.java
File LOC: 44
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\PlainVariable.java
File LOC: 50
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\cfg\ReachingAliasSet.java
File LOC: 115
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\CompositeStatementObject.java
Comment: /*
 * CompositeStatementObject represents the following AST Statement subclasses:
 * 1.	Block
 * 2.	DoStatement
 * 3.	EnhancedForStatement
 * 4.	ForStatement
 * 5.	IfStatement
 * 6.	LabeledStatement
 * 7.	SwitchStatement
 * 8.	SynchronizedStatement
 * 9.	TryStatement
 * 10.	WhileStatement
 */
Comment Type: Block Comment
Comment: // statement.setParent(this);
Comment Type: Line Comment
Comment: // expression.setParent(this);
Comment Type: Line Comment
File LOC: 246
Number of Comments: 3
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\ExpressionType.java
File LOC: 32
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\ASTNodeDifference.java
File LOC: 270
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\ASTNodeMatcher.java
Comment: // analyze only if the argument does not correspond to a varargs parameter
Comment Type: Line Comment
Comment: // if bindings are both null then they were recovered from SimpleName expressions representing labels
Comment Type: Line Comment
Comment: // all interface bindings are equal
Comment Type: Line Comment
Comment: // different number of implemented interfaces
Comment Type: Line Comment
Comment: // return the first leaf that is a system class, if no system class is found return the first leaf that is a system interface
Comment Type: Line Comment
Comment: // safeSubtreeListMatch(node.arguments(), o.arguments());
Comment Type: Line Comment
Comment: // find if a new TYPE_COMPATIBLE_REPLACEMENT difference was added
Comment Type: Line Comment
Comment: // check if there is a reverse difference in the previously recorded differences
Comment Type: Line Comment
Comment: /*if(!node.resolveTypeBinding().isEqualTo(o.resolveTypeBinding()) && typeMatch) {
					Difference diff = new Difference(node.resolveTypeBinding().getName(),o.resolveTypeBinding().getName(),DifferenceType.SUBCLASS_TYPE_MISMATCH);
					astNodeDifference.addDifference(diff);
					addDifference(astNodeDifference);
				}*/
Comment Type: Block Comment
Comment: // if only one of them is infix expression with a composite parent, not both
Comment Type: Line Comment
Comment: // be careful not to trigger lazy creation of extended operand lists
Comment Type: Line Comment
Comment: // if both left and right operands do not match, then the entire infix expression should be parameterized
Comment Type: Line Comment
Comment: // if only the left operand does not match, then the left operand should be parameterized
Comment Type: Line Comment
Comment: // if only the right operand does not match, then the right operand should be parameterized
Comment Type: Line Comment
Comment: // safeSubtreeListMatch(node.arguments(), o.arguments());
Comment Type: Line Comment
Comment: // safeSubtreeListMatch(node.arguments(), o.arguments());
Comment Type: Line Comment
File LOC: 2492
Number of Comments: 16
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\BindingSignature.java
File LOC: 88
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\BindingSignaturePair.java
File LOC: 62
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\BindingSignatureVisitor.java
Comment: // Append Type
Comment Type: Line Comment
Comment: // Visit Fragments
Comment Type: Line Comment
Comment: // Handle expressions and determine which "Visit" to visit
Comment Type: Line Comment
File LOC: 346
Number of Comments: 3
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\conditional\AbstractControlCase.java
File LOC: 37
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\conditional\AbstractControlStructure.java
File LOC: 33
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\conditional\AbstractControlStructureUtilities.java
Comment: // if the ifControlStructure is a basic if-else
Comment Type: Line Comment
Comment: // if both then and else bodies have one statement
Comment Type: Line Comment
Comment: // if the then statement, the else statement and the statement containing the ConditionalExpression are ExpressionStatements
Comment Type: Line Comment
Comment: // if the then statement, the else statement and the statement containing the ConditionalExpression are ReturnStatements
Comment Type: Line Comment
Comment: // AND the expression of the ternary ReturnStatement is the the ConditionalExpression we are comparing
Comment Type: Line Comment
Comment: // if all three expressions are Assignments
Comment Type: Line Comment
Comment: // if all three expressions are MethodInvocations
Comment Type: Line Comment
Comment: // if all three methods have the same method binding
Comment Type: Line Comment
Comment: // if the ConditionalExpression is in the arguments
Comment Type: Line Comment
Comment: // match the expressions
Comment Type: Line Comment
Comment: // match the arguments
Comment Type: Line Comment
Comment: // if the ConditionalExpression is the method's expression
Comment Type: Line Comment
Comment: // match the expressions
Comment Type: Line Comment
Comment: // match the arguments
Comment Type: Line Comment
File LOC: 145
Number of Comments: 14
Comment Percentage: 9%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\conditional\IfControlCase.java
File LOC: 22
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\conditional\IfControlStructure.java
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
Comment: // here the match order is done (first, second) because the this object is the IfControlStructure
Comment Type: Line Comment
File LOC: 77
Number of Comments: 2
Comment Percentage: 2%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\conditional\Pair.java
File LOC: 48
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\conditional\SwitchControlCase.java
Comment: // int, byte
Comment Type: Line Comment
Comment: // char
Comment Type: Line Comment
Comment: // String
Comment Type: Line Comment
Comment: // Enum, constant variables with different bindings but same values
Comment Type: Line Comment
Comment: // constant variable and a literal value
Comment Type: Line Comment
Comment: // literal value and a constant variable
Comment Type: Line Comment
File LOC: 97
Number of Comments: 6
Comment Percentage: 6%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\conditional\SwitchControlStructure.java
Comment: // this version of createSwitchCases makes SwitchCases with no SwitchCase Statements but with all other statements of each case
Comment Type: Line Comment
Comment: // private List<AbstractControlCase> createSwitchCases(SwitchStatement switchStatement)
Comment Type: Line Comment
Comment: // {
Comment Type: Line Comment
Comment: // List<AbstractControlCase> returnList  = new ArrayList<AbstractControlCase>();
Comment Type: Line Comment
Comment: // List<AbstractControlCase> tempList    = new ArrayList<AbstractControlCase>();
Comment Type: Line Comment
Comment: // List<Statement> switchGroupStatements = switchStatement.statements();
Comment Type: Line Comment
Comment: // for (Statement currentStatement : switchGroupStatements)
Comment Type: Line Comment
Comment: // {
Comment Type: Line Comment
Comment: // if (currentStatement instanceof SwitchCase)
Comment Type: Line Comment
Comment: // {
Comment Type: Line Comment
Comment: // Expression caseValue = ((SwitchCase)currentStatement).getExpression();
Comment Type: Line Comment
Comment: // SwitchControlCase newCase = new SwitchControlCase(this.variable, caseValue, new ArrayList<Statement>());
Comment Type: Line Comment
Comment: // tempList.add(newCase);
Comment Type: Line Comment
Comment: // }
Comment Type: Line Comment
Comment: // else if (currentStatement instanceof BreakStatement || currentStatement instanceof ReturnStatement || currentStatement instanceof ContinueStatement)
Comment Type: Line Comment
Comment: // {
Comment Type: Line Comment
Comment: // addToAll(currentStatement, tempList);
Comment Type: Line Comment
Comment: // returnList.addAll(tempList);
Comment Type: Line Comment
Comment: // tempList = new ArrayList<AbstractControlCase>();
Comment Type: Line Comment
Comment: // }
Comment Type: Line Comment
Comment: // else
Comment Type: Line Comment
Comment: // {
Comment Type: Line Comment
Comment: // addToAll(currentStatement, tempList);
Comment Type: Line Comment
Comment: // }
Comment Type: Line Comment
Comment: // }
Comment Type: Line Comment
Comment: // return returnList;
Comment Type: Line Comment
Comment: // }
Comment Type: Line Comment
Comment: // this version of createSwitchCases makes SwitchCases with only the SwitchCase Statements and case ending statement of each case
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
File LOC: 70
Number of Comments: 29
Comment Percentage: 41%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\conditional\TernaryControlStructure.java
Comment: // here the match order is done (second, first) because the this object is the TernaryControlStructure
Comment Type: Line Comment
File LOC: 79
Number of Comments: 1
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\Difference.java
File LOC: 56
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\DifferenceType.java
File LOC: 70
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\FieldAccessReplacedWithGetterInvocationDifference.java
File LOC: 36
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\FieldAssignmentReplacedWithSetterInvocationDifference.java
File LOC: 73
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\loop\AbstractControlVariable.java
Comment: // updaters must be in the same order and each pair must have the same update value
Comment Type: Line Comment
File LOC: 43
Number of Comments: 1
Comment Percentage: 2%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\loop\AbstractLoop.java
File LOC: 43
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\loop\AbstractLoopBindingInformation.java
Comment: // the start values of different "iterators" when created by these instantiation methods
Comment Type: Line Comment
Comment: // the end values of different "iterators" being checked when these methods are called
Comment Type: Line Comment
Comment: // the value by which different "iterators" are updated when these methods are called
Comment Type: Line Comment
Comment: // the end values of different methods being used in an InfixExpression to check the size of a data structure
Comment Type: Line Comment
Comment: // .size method of a collection is handled by the method isCollectionSizeInvocation(Expression) in the AbstractLoopUtilities class
Comment Type: Line Comment
Comment: // .length of an array is handled by the method isLengthFieldAccess(Expression) in the AbstractLoopUtilities class
Comment Type: Line Comment
Comment: // .iterator()<E>
Comment Type: Line Comment
Comment: // .iterator()
Comment Type: Line Comment
Comment: // .listIterator()<E>
Comment Type: Line Comment
Comment: // .listIterator(int)<E>
Comment Type: Line Comment
Comment: // .listIterator()
Comment Type: Line Comment
Comment: // .listIterator(int)
Comment Type: Line Comment
Comment: // .elements()<V>
Comment Type: Line Comment
Comment: // .elements()
Comment Type: Line Comment
Comment: // StringTokenizer(String)
Comment Type: Line Comment
Comment: // StringTokenizer(String, String)
Comment Type: Line Comment
Comment: // StringTokenizer(String, String, boolean)
Comment Type: Line Comment
Comment: // Properies.propertyNames()
Comment Type: Line Comment
Comment: // .hasNext() (from Iterator)
Comment Type: Line Comment
Comment: // .hasNext() (from ListIterator)
Comment Type: Line Comment
Comment: // .hasPrevious()
Comment Type: Line Comment
Comment: // .hasMoreElements() (from Enumeration)
Comment Type: Line Comment
Comment: // .hasMoreElements() (from StringTokenizer)
Comment Type: Line Comment
Comment: // .hasMoreTokens()
Comment Type: Line Comment
Comment: // .next() (from Iterator)
Comment Type: Line Comment
Comment: // .next() (from ListIterator)
Comment Type: Line Comment
Comment: // .previous()
Comment Type: Line Comment
Comment: // .nextElement() (from Enumeration)
Comment Type: Line Comment
Comment: // .nextElement() (from StringTokenizer)
Comment Type: Line Comment
Comment: // .nextToken()
Comment Type: Line Comment
Comment: // .length() (from String)
Comment Type: Line Comment
Comment: // .getSize() (from any class)
Comment Type: Line Comment
Comment: // .getLength() (from any class)
Comment Type: Line Comment
Comment: // .size() (from any class)
Comment Type: Line Comment
Comment: // .length() (from any class)
Comment Type: Line Comment
Comment: // .get(int) (from ArrayList)
Comment Type: Line Comment
Comment: // .get(int) (from LinkedList)
Comment Type: Line Comment
Comment: // .get(int) (from Vector)
Comment Type: Line Comment
Comment: // .get(int) (from AbstractList)
Comment Type: Line Comment
Comment: // .get(int) (from List)
Comment Type: Line Comment
Comment: // .get(int) (from AbstractSequentialList)
Comment Type: Line Comment
Comment: // .get(int) (from Stack)
Comment Type: Line Comment
Comment: // .elementAt(int) (from Vector)
Comment Type: Line Comment
Comment: // .elementAt(int) (from Stack)
Comment Type: Line Comment
Comment: // .charAt(int) (from String)
Comment Type: Line Comment
Comment: // checks if the instantiationMethodBindings field contains the ending of the specified MethodBinding key String
Comment Type: Line Comment
Comment: // checks if the conditionalMethodBindingEndValues field contains the specified MethodBinding key
Comment Type: Line Comment
Comment: // checks if the updateMethodBindingUpdateValues field contains the specified MethodBinding key
Comment Type: Line Comment
Comment: // checks if the dataStructureSizeMethods field contains the specified MethodBinding key
Comment Type: Line Comment
Comment: // checks if the dataStructureSizeMethods field contains the specified MethodBinding key
Comment Type: Line Comment
File LOC: 102
Number of Comments: 50
Comment Percentage: 49%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\loop\AbstractLoopUtilities.java
Comment: // returns a boolean indicating which side of the specified infixExpression the specified variable is on
Comment Type: Line Comment
Comment: // find the variable's initializer
Comment Type: Line Comment
Comment: // returns null if the main variable (LHS in an assignment, expression in postfix, prefix, or methodInvocation) is not being UPDATED
Comment Type: Line Comment
Comment: // returns null if specified expression is not a Prefix or PostfixExpression
Comment Type: Line Comment
Comment: // returns null if the assignment is not UPDATING the variable on the left hand side or if the updateValue cannot be evaluated to an integer
Comment Type: Line Comment
Comment: // returns null if specified expression cannot be evaluated to an Integer
Comment Type: Line Comment
Comment: // returns null if it is on neither side
Comment Type: Line Comment
Comment: // Expression rightOperand           = infixExpression.getRightOperand();
Comment Type: Line Comment
Comment: // Expression leftOperand            = infixExpression.getLeftOperand();
Comment Type: Line Comment
Comment: // this method finds the first variable to be initialized (if any) using the control variable to access the data structure it is traversing (if any)
Comment Type: Line Comment
Comment: // find the node in variableDeclarationsAndAssignmentsContainingVariable that has the smallest start position, compare new variable created to the enhancedForVariable and then return it
Comment Type: Line Comment
Comment: // if expression is an array access
Comment Type: Line Comment
Comment: // if expression is a method invocation
Comment Type: Line Comment
Comment: // if the variable is the expression of the method (ex: variable is an iterator)
Comment Type: Line Comment
Comment: // if the variable is an argument of the method OR (the first parent is a postfix expression AND an argument of the method)
Comment Type: Line Comment
Comment: // check that the expression is the variables traversed data structure
Comment Type: Line Comment
File LOC: 494
Number of Comments: 16
Comment Percentage: 3%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\loop\ConditionalLoop.java
Comment: // ********************************************************************************************************************************************************************************
Comment Type: Line Comment
Comment: // matching methods
Comment Type: Line Comment
Comment: // ********************************************************************************************************************************************************************************
Comment Type: Line Comment
Comment: // get all simpleNames in the condition
Comment Type: Line Comment
Comment: // for each simpleName, create a ControlVariable object and add it to the map if it is indeed a ControlVariable (i.e. it has variable updaters)
Comment Type: Line Comment
Comment: // returns all modifiers of the specified variable occurring before it in its containing method
Comment Type: Line Comment
Comment: // remove all variable updaters that are not modifying the specified variable or are after the position of the variable in use
Comment Type: Line Comment
Comment: // TODO add initializer fragments when VariableDeclarations are supported
Comment Type: Line Comment
Comment: /*// if the current ConditionalLoop is a for loop, remove all for the updaters found in the for declaration
		if (this.getLoopStatement() instanceof ForStatement)
		{
			ForStatement forStatement = (ForStatement) this.getLoopStatement();
			List<Expression> updaters = forStatement.updaters();
			for (Expression currentUpdater : updaters)
			{
				if (additionalFragments.contains(currentUpdater))
				{
					additionalFragments.remove(currentUpdater);
				}
			}
		}*/
Comment Type: Block Comment
Comment: // takes a matcher so that all differences in that matcher are accessible once the method terminates
Comment Type: Line Comment
Comment: // match the conditions
Comment Type: Line Comment
Comment: // check if each pair of corresponding control variables match
Comment Type: Line Comment
Comment: // conditions match, so we may have recorded differences
Comment Type: Line Comment
Comment: // currentControlVariableEquivalent is the control variable in the other loop that was matched with the control variable in this loop
Comment Type: Line Comment
Comment: // searches the differences for the equivalent of the specified expression or that of its parent (if the parent is an expression)
Comment Type: Line Comment
File LOC: 184
Number of Comments: 15
Comment Percentage: 8%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\loop\ConditionalLoopASTNodeMatcher.java
Comment: // be careful not to trigger lazy creation of extended operand lists
Comment Type: Line Comment
Comment: // if both left and right operands do not match, then the entire infix expression should be parameterized
Comment Type: Line Comment
Comment: // if only the left operand does not match, then the left operand should be parameterized
Comment Type: Line Comment
Comment: // if only the right operand does not match, then the right operand should be parameterized
Comment Type: Line Comment
File LOC: 136
Number of Comments: 4
Comment Percentage: 2%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\loop\ControlVariable.java
Comment: // ****************************************************************************************************************************************************************
Comment Type: Line Comment
Comment: // startValue methods
Comment Type: Line Comment
Comment: // ****************************************************************************************************************************************************************
Comment Type: Line Comment
Comment: // ****************************************************************************************************************************************************************
Comment Type: Line Comment
Comment: // endValue methods
Comment Type: Line Comment
Comment: // ****************************************************************************************************************************************************************
Comment Type: Line Comment
Comment: // ****************************************************************************************************************************************************************
Comment Type: Line Comment
Comment: // updater methods
Comment Type: Line Comment
Comment: // ****************************************************************************************************************************************************************
Comment Type: Line Comment
Comment: // begin as an integer so, if at any point in the modifiers, there is a variable, the whole value becomes variable
Comment Type: Line Comment
Comment: // we traverse the contributingModifiers and determine the type of value and, if possible, the cumulative value
Comment Type: Line Comment
Comment: // if the currentNode is a variable declaration or an ASSIGN Assignment
Comment Type: Line Comment
Comment: // take the rightHandSide of either
Comment Type: Line Comment
Comment: // evaluate the rightHandSide
Comment Type: Line Comment
Comment: // if the currentNode was an Assignment but not with an ASSIGN operator (the later assumed if it made it here), a Prefix or PostfixExpression, or a MethodInvocation
Comment Type: Line Comment
Comment: // create a list of all parents of the specified variable until the root method
Comment Type: Line Comment
Comment: // we traverse allVariableModifiers and build a list of nodes that will influence the final value
Comment Type: Line Comment
Comment: // if the current node is the declaration or an assignment, the list restarts the modifiers. if it is a plus, minus, times, or divide equals, then it adds to the modifiers
Comment Type: Line Comment
Comment: // if currentNode was added, move up through it's parents until the first block or conditional parent and check if it is in the variableParents list, if not, it is in a lower scope
Comment Type: Line Comment
Comment: // return constructed list if all modifiers are in same or higher scope
Comment Type: Line Comment
Comment: // returns all modifiers of the specified variable occurring before it in its containing method
Comment Type: Line Comment
Comment: // remove all variable updaters that are not modifying the specified variable or are after the position of the variable in use
Comment Type: Line Comment
Comment: // add the variable's declaration
Comment Type: Line Comment
Comment: // get the operand opposite to the variable
Comment Type: Line Comment
Comment: // evaluate the value of the opposing operand
Comment Type: Line Comment
Comment: // get the variableValue of that MethodBinding from ConditionalLoopBindingInformation
Comment Type: Line Comment
Comment: // use .getMethodDeclaration() so we get the abstract method and not the method of the specific collection
Comment Type: Line Comment
Comment: // if the currentNode is a variable declaration or an ASSIGN Assignment
Comment Type: Line Comment
Comment: // take the rightHandSide of either
Comment Type: Line Comment
Comment: // evaluate the rightHandSide
Comment Type: Line Comment
Comment: // find all updaters of the specified variable
Comment Type: Line Comment
Comment: // get all first level PrefixExpressions, PostfixExpressions, Assignments, and next() MethodInvocations from each inner statement
Comment Type: Line Comment
Comment: // only updaters in an ExpressionStatment or VariableDeclaration are first level, unless a ConditionalExpression (handled in return statement)
Comment Type: Line Comment
File LOC: 386
Number of Comments: 33
Comment Percentage: 8%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\loop\EarliestStartPositionComparator.java
File LOC: 8
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\loop\EnhancedForLoop.java
Comment: // ********************************************************************************************************************************************************************************
Comment Type: Line Comment
Comment: // matching methods
Comment Type: Line Comment
Comment: // ********************************************************************************************************************************************************************************
Comment Type: Line Comment
Comment: // if the dataStructure is an array or a mehtodInvocation returning and array (both covered by the first expression) OR
Comment Type: Line Comment
Comment: // the data structure is a collection or the data structure is a methodInvocation returning a collection (both covered by the second expression)
Comment Type: Line Comment
Comment: // initialize startValue
Comment Type: Line Comment
Comment: // initialize endValue
Comment Type: Line Comment
Comment: // These are the only cases supported by the JAVA enhanced for loop
Comment Type: Line Comment
Comment: // initialize variableUpdaters
Comment Type: Line Comment
File LOC: 53
Number of Comments: 9
Comment Percentage: 16%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\loop\VariableUpdater.java
File LOC: 23
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\loop\VariableValue.java
File LOC: 35
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\NodePair.java
File LOC: 25
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\matching\NodePairComparisonCache.java
File LOC: 60
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\MethodBodyObject.java
Comment: /*
	private void processExpression(AbstractMethodFragment parent, Expression expression) {
		if(expression instanceof MethodInvocation) {
			MethodInvocation methodInvocation = (MethodInvocation)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.METHOD_INVOCATION, parent);
			parent.addExpression(parentExpression);
			if(methodInvocation.getExpression() != null)
				processExpression(parentExpression, methodInvocation.getExpression());
			List<Expression> arguments = methodInvocation.arguments();
			for(Expression argument : arguments)
				processExpression(parentExpression, argument);
		}
		else if(expression instanceof Assignment) {
			Assignment assignment = (Assignment)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.ASSIGNMENT, parent);
			parent.addExpression(parentExpression);
			processExpression(parentExpression, assignment.getLeftHandSide());
			processExpression(parentExpression, assignment.getRightHandSide());
		}
		else if(expression instanceof CastExpression) {
			CastExpression castExpression = (CastExpression)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.CAST, parent);
			parent.addExpression(parentExpression);
			processExpression(parentExpression, castExpression.getExpression());
		}
		else if(expression instanceof ClassInstanceCreation) {
			ClassInstanceCreation classInstanceCreation = (ClassInstanceCreation)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.CLASS_INSTANCE_CREATION, parent);
			parent.addExpression(parentExpression);
			if(classInstanceCreation.getExpression() != null)
				processExpression(parentExpression, classInstanceCreation.getExpression());
			List<Expression> arguments = classInstanceCreation.arguments();
			for(Expression argument : arguments)
				processExpression(parentExpression, argument);
			AnonymousClassDeclaration anonymousClassDeclaration = classInstanceCreation.getAnonymousClassDeclaration();
			if(anonymousClassDeclaration != null) {
				processExpression(parentExpression, anonymousClassDeclaration);
			}
		}
		else if(expression instanceof ConditionalExpression) {
			ConditionalExpression conditionalExpression = (ConditionalExpression)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.CONDITIONAL, parent);
			parent.addExpression(parentExpression);
			processExpression(parentExpression, conditionalExpression.getExpression());
			processExpression(parentExpression, conditionalExpression.getThenExpression());
			processExpression(parentExpression, conditionalExpression.getElseExpression());
		}
		else if(expression instanceof FieldAccess) {
			FieldAccess fieldAccess = (FieldAccess)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.FIELD_ACCESS, parent);
			parent.addExpression(parentExpression);
			processExpression(parentExpression, fieldAccess.getExpression());
			processExpression(parentExpression, fieldAccess.getName());
		}
		else if(expression instanceof InfixExpression) {
			InfixExpression infixExpression = (InfixExpression)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.INFIX, parent);
			parent.addExpression(parentExpression);
			processExpression(parentExpression, infixExpression.getLeftOperand());
			processExpression(parentExpression, infixExpression.getRightOperand());
			List<Expression> extendedOperands = infixExpression.extendedOperands();
			for(Expression operand : extendedOperands)
				processExpression(parentExpression, operand);
		}
		else if(expression instanceof InstanceofExpression) {
			InstanceofExpression instanceofExpression = (InstanceofExpression)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.INSTANCE_OF, parent);
			parent.addExpression(parentExpression);
			processExpression(parentExpression, instanceofExpression.getLeftOperand());
		}
		else if(expression instanceof ParenthesizedExpression) {
			ParenthesizedExpression parenthesizedExpression = (ParenthesizedExpression)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.PARENTHESIZED, parent);
			parent.addExpression(parentExpression);
			processExpression(parentExpression, parenthesizedExpression.getExpression());
		}
		else if(expression instanceof PostfixExpression) {
			PostfixExpression postfixExpression = (PostfixExpression)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.POSTFIX, parent);
			parent.addExpression(parentExpression);
			processExpression(parentExpression, postfixExpression.getOperand());
		}
		else if(expression instanceof PrefixExpression) {
			PrefixExpression prefixExpression = (PrefixExpression)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.PREFIX, parent);
			parent.addExpression(parentExpression);
			processExpression(parentExpression, prefixExpression.getOperand());
		}
		else if(expression instanceof SuperMethodInvocation) {
			SuperMethodInvocation superMethodInvocation = (SuperMethodInvocation)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.SUPER_METHOD_INVOCATION, parent);
			parent.addExpression(parentExpression);
			List<Expression> arguments = superMethodInvocation.arguments();
			for(Expression argument : arguments)
				processExpression(parentExpression, argument);
		}
		else if(expression instanceof VariableDeclarationExpression) {
			VariableDeclarationExpression variableDeclarationExpression = (VariableDeclarationExpression)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.VARIABLE_DECLARATION, parent);
			parent.addExpression(parentExpression);
			List<VariableDeclarationFragment> fragments = variableDeclarationExpression.fragments();
			for(VariableDeclarationFragment fragment : fragments) {
				Expression nameExpression = fragment.getName();
				processExpression(parentExpression, nameExpression);
				Expression initializerExpression = fragment.getInitializer();
				processExpression(parentExpression, initializerExpression);
			}
		}
		else if(expression instanceof ArrayAccess) {
			ArrayAccess arrayAccess = (ArrayAccess)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.ARRAY_ACCESS, parent);
			parent.addExpression(parentExpression);
			processExpression(parentExpression, arrayAccess.getArray());
			processExpression(parentExpression, arrayAccess.getIndex());
		}
		else if(expression instanceof ArrayCreation) {
			ArrayCreation arrayCreation = (ArrayCreation)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.ARRAY_CREATION, parent);
			parent.addExpression(parentExpression);
			List<Expression> dimensions = arrayCreation.dimensions();
			for(Expression dimension : dimensions)
				processExpression(parentExpression, dimension);
				processExpression(parentExpression, arrayCreation.getInitializer());
		}
		else if(expression instanceof ArrayInitializer) {
			ArrayInitializer arrayInitializer = (ArrayInitializer)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.ARRAY_INITIALIZER, parent);
			parent.addExpression(parentExpression);
			List<Expression> expressions = arrayInitializer.expressions();
			for(Expression arrayInitializerExpression : expressions)
				processExpression(parentExpression, arrayInitializerExpression);
		}
		else if(expression instanceof SimpleName) {
			SimpleName simpleName = (SimpleName)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.SIMPLE_NAME, parent);
			parent.addExpression(parentExpression);
		}
		else if(expression instanceof QualifiedName) {
			QualifiedName qualifiedName = (QualifiedName)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.QUALIFIED_NAME, parent);
			parent.addExpression(parentExpression);
			processExpression(parentExpression, qualifiedName.getQualifier());
			processExpression(parentExpression, qualifiedName.getName());
		}
		else if(expression instanceof SuperFieldAccess) {
			SuperFieldAccess superFieldAccess = (SuperFieldAccess)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.SUPER_FIELD_ACCESS, parent);
			parent.addExpression(parentExpression);
			processExpression(parentExpression, superFieldAccess.getName());
		}
		else if(expression instanceof ThisExpression) {
			ThisExpression thisExpression = (ThisExpression)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.THIS, parent);
			parent.addExpression(parentExpression);
			if(thisExpression.getQualifier() != null)
				processExpression(parentExpression, thisExpression.getQualifier());
		}
		else if(expression instanceof TypeLiteral) {
			//TypeLiteral typeLiteral = (TypeLiteral)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.TYPE_LITERAL, parent);
			parent.addExpression(parentExpression);
		}
		else if(expression instanceof StringLiteral) {
			//StringLiteral stringLiteral = (StringLiteral)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.STRING_LITERAL, parent);
			parent.addExpression(parentExpression);
		}
		else if(expression instanceof NullLiteral) {
			//NullLiteral nullLiteral = (NullLiteral)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.NULL_LITERAL, parent);
			parent.addExpression(parentExpression);
		}
		else if(expression instanceof NumberLiteral) {
			//NumberLiteral numberLiteral = (NumberLiteral)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.NUMBER_LITERAL, parent);
			parent.addExpression(parentExpression);
		}
		else if(expression instanceof BooleanLiteral) {
			//BooleanLiteral booleanLiteral = (BooleanLiteral)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.BOOLEAN_LITERAL, parent);
			parent.addExpression(parentExpression);
		}
		else if(expression instanceof CharacterLiteral) {
			//CharacterLiteral characterLiteral = (CharacterLiteral)expression;
			AbstractExpression parentExpression = new AbstractExpression(expression, ExpressionType.CHARACTER_LITERAL, parent);
			parent.addExpression(parentExpression);
		}
	}
*/
Comment Type: Block Comment
Comment: // processExpression(child, ifStatement.getExpression());
Comment Type: Line Comment
Comment: // processExpression(child, initializer);
Comment Type: Line Comment
Comment: // processExpression(child, expression);
Comment Type: Line Comment
Comment: // processExpression(child, updater);
Comment Type: Line Comment
Comment: // processExpression(child, variableDeclaration.getName());
Comment Type: Line Comment
Comment: // processExpression(child, variableDeclaration.getInitializer());
Comment Type: Line Comment
Comment: // processExpression(child, enhancedForStatement.getExpression());
Comment Type: Line Comment
Comment: // processExpression(child, whileStatement.getExpression());
Comment Type: Line Comment
Comment: // processExpression(child, doStatement.getExpression());
Comment Type: Line Comment
Comment: // processExpression(child, expressionStatement.getExpression());
Comment Type: Line Comment
Comment: // processExpression(child, switchStatement.getExpression());
Comment Type: Line Comment
Comment: /*if(switchCase.getExpression() != null)
				processExpression(child, switchCase.getExpression());*/
Comment Type: Block Comment
Comment: /*processExpression(child, assertStatement.getExpression());
			Expression message = assertStatement.getMessage();
			if(message != null)
				processExpression(child, message);*/
Comment Type: Block Comment
Comment: /*if(labeledStatement.getLabel() != null)
				processExpression(child, labeledStatement.getLabel());*/
Comment Type: Block Comment
Comment: // processExpression(child, returnStatement.getExpression());
Comment Type: Line Comment
Comment: // processExpression(child, synchronizedStatement.getExpression());
Comment Type: Line Comment
Comment: // processExpression(child, throwStatement.getExpression());
Comment Type: Line Comment
Comment: // processExpression(child, expression);
Comment Type: Line Comment
Comment: /*List<VariableDeclarationFragment> fragments = variableDeclarationStatement.fragments();
			for(VariableDeclarationFragment fragment : fragments) {
				processExpression(child, fragment.getName());
				processExpression(child, fragment.getInitializer());
			}*/
Comment Type: Block Comment
Comment: /*List<Expression> arguments = constructorInvocation.arguments();
			for(Expression argument : arguments)
				processExpression(child, argument);*/
Comment Type: Block Comment
Comment: /*if(superConstructorInvocation.getExpression() != null)
				processExpression(child, superConstructorInvocation.getExpression());
			List<Expression> arguments = superConstructorInvocation.arguments();
			for(Expression argument : arguments)
				processExpression(child, argument);*/
Comment Type: Block Comment
Comment: /*if(breakStatement.getLabel() != null)
				processExpression(child, breakStatement.getLabel());*/
Comment Type: Block Comment
Comment: /*if(continueStatement.getLabel() != null)
				processExpression(child, continueStatement.getLabel());*/
Comment Type: Block Comment
File LOC: 515
Number of Comments: 24
Comment Percentage: 4%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\StatementObject.java
Comment: /*
 * StatementObject represents the following AST Statement subclasses:
 * 1.	ExpressionStatement
 * 2.	VariableDeclarationStatement
 * 3.	ConstructorInvocation
 * 4.	SuperConstructorInvocation
 * 5.	ReturnStatement
 * 6.	AssertStatement
 * 7.	BreakStatement
 * 8.	ContinueStatement
 * 9.	SwitchCase
 * 10.	EmptyStatement
 * 11.	ThrowStatement
 */
Comment Type: Block Comment
Comment: // processArrayAccesses(expressionExtractor.getArrayAccesses(statement));
Comment Type: Line Comment
File LOC: 36
Number of Comments: 2
Comment Percentage: 5%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\StatementType.java
File LOC: 38
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\SynchronizedStatementObject.java
File LOC: 10
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\decomposition\TryStatementObject.java
File LOC: 129
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\delegation\DelegationDetection.java
Comment: // size must be >= 2
Comment Type: Line Comment
File LOC: 36
Number of Comments: 1
Comment Percentage: 2%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\delegation\DelegationPath.java
File LOC: 28
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\delegation\DelegationTree.java
Comment: // int methodPos = systemObject.getPositionInClassList(methodObject.getClassName());
Comment Type: Line Comment
Comment: // methodPos != methodInvocationPos -> removes self-delegations
Comment Type: Line Comment
Comment: // !existsNode(node.children(),methodInvocation) -> removes duplicate delegations
Comment Type: Line Comment
Comment: // !existsNode(node.getUserObjectPath(),methodInvocation) -> avoids cyclic delegations
Comment Type: Line Comment
File LOC: 66
Number of Comments: 4
Comment Percentage: 6%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\EnumConstantDeclarationObject.java
File LOC: 67
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\FieldInstructionObject.java
Comment: // private SimpleName simpleName;
Comment Type: Line Comment
Comment: // this.simpleName = simpleName;
Comment Type: Line Comment
Comment: // return this.simpleName;
Comment Type: Line Comment
Comment: // sb.append(type).append(" ");
Comment Type: Line Comment
File LOC: 73
Number of Comments: 4
Comment Percentage: 5%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\FieldObject.java
Comment: // private VariableDeclarationFragment fragment;
Comment Type: Line Comment
Comment: // this.fragment = fragment;
Comment Type: Line Comment
Comment: // return this.fragment;
Comment Type: Line Comment
File LOC: 112
Number of Comments: 3
Comment Percentage: 2%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\IfStatementExpressionAnalyzer.java
Comment: // parent nodes are CONDITIONAL_AND (&&), CONDITIONAL_OR (||) infix operators, while leaf nodes are expressions
Comment Type: Line Comment
Comment: // contains the expressions corresponding to each candidate type variable
Comment Type: Line Comment
Comment: // contains the static fields corresponding to each candidate type variable
Comment Type: Line Comment
Comment: // contains the subclass types corresponding to each candidate type variable
Comment Type: Line Comment
Comment: // contains the expressions corresponding to each candidate type method invocation
Comment Type: Line Comment
Comment: // contains the static fields corresponding to each candidate type method invocation
Comment Type: Line Comment
Comment: // contains the subclass types corresponding to each candidate type method invocation
Comment Type: Line Comment
File LOC: 271
Number of Comments: 7
Comment Percentage: 2%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\Indexer.java
Comment: // String key and value correspond to MethodDeclaration.resolveBinding.getKey()
Comment Type: Line Comment
Comment: // String key corresponds to MethodDeclaration.resolveBinding.getKey()
Comment Type: Line Comment
Comment: // String key corresponds to MethodDeclaration.resolveBinding.getKey()
Comment Type: Line Comment
Comment: // String key and value correspond to MethodDeclaration.resolveBinding.getKey()
Comment Type: Line Comment
Comment: // String key and value correspond to MethodDeclaration.resolveBinding.getKey()
Comment Type: Line Comment
Comment: // String corresponds to MethodDeclaration.resolveBinding.getKey()
Comment Type: Line Comment
Comment: // String key corresponds to MethodDeclaration.resolveBinding.getKey()
Comment Type: Line Comment
Comment: // String key corresponds to MethodDeclaration.resolveBinding.getKey()
Comment Type: Line Comment
Comment: // String key corresponds to MethodDeclaration.resolveBinding.getKey()
Comment Type: Line Comment
Comment: // check if the invoked method is abstract or native
Comment Type: Line Comment
Comment: // check if the invoked method is abstract or native
Comment Type: Line Comment
Comment: // String originalMethodBindingKey = originalMethod.resolveBinding().getKey();
Comment Type: Line Comment
Comment: // method is native
Comment Type: Line Comment
Comment: // method is native
Comment Type: Line Comment
Comment: // check if the overriding method is abstract or native
Comment Type: Line Comment
Comment: // String methodBindingKey = method.resolveBinding().getKey();
Comment Type: Line Comment
Comment: // method is native
Comment Type: Line Comment
Comment: // method is native
Comment Type: Line Comment
Comment: // method is native
Comment Type: Line Comment
Comment: // method is native
Comment Type: Line Comment
Comment: // method is native
Comment Type: Line Comment
Comment: // method is native
Comment Type: Line Comment
Comment: // method is native
Comment Type: Line Comment
Comment: // method is native
Comment Type: Line Comment
Comment: // String methodBindingKey = mo.resolveBinding().getKey();
Comment Type: Line Comment
Comment: // String methodBindingKey = mo.resolveBinding().getKey();
Comment Type: Line Comment
Comment: // String methodBindingKey = mo.resolveBinding().getKey();
Comment Type: Line Comment
File LOC: 480
Number of Comments: 27
Comment Percentage: 5%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\inheritance\CompleteInheritanceDetection.java
File LOC: 83
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\inheritance\InheritanceDetection.java
Comment: // returns the first tree that contains the node with name nodeName
Comment Type: Line Comment
File LOC: 50
Number of Comments: 1
Comment Percentage: 2%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\inheritance\InheritanceTree.java
File LOC: 97
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\inheritance\TypeBindingInheritanceDetection.java
Comment: // returns the first tree that contains the node with name nodeName
Comment Type: Line Comment
File LOC: 77
Number of Comments: 1
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\LibraryClassStorage.java
File LOC: 58
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\LiteralObject.java
File LOC: 99
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\LiteralType.java
File LOC: 9
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\LocalVariableDeclarationObject.java
Comment: // private VariableDeclaration variableDeclaration;
Comment Type: Line Comment
Comment: // return variableDeclaration;
Comment Type: Line Comment
Comment: // this.variableDeclaration = variableDeclaration;
Comment Type: Line Comment
File LOC: 61
Number of Comments: 3
Comment Percentage: 4%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\LocalVariableInstructionObject.java
Comment: // private SimpleName simpleName;
Comment Type: Line Comment
Comment: // this.simpleName = simpleName;
Comment Type: Line Comment
Comment: // return this.simpleName;
Comment Type: Line Comment
File LOC: 68
Number of Comments: 3
Comment Percentage: 4%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\MethodInvocationObject.java
Comment: // this.methodInvocation = methodInvocation;
Comment Type: Line Comment
Comment: // return this.methodInvocation;
Comment Type: Line Comment
File LOC: 17
Number of Comments: 2
Comment Percentage: 11%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\MethodObject.java
Comment: // check for field access like SegmentedTimeline.this.segmentsIncluded
Comment Type: Line Comment
Comment: /*this.constructorObject.getParameterTypeList().equals(mio.getParameterTypeList());*/
Comment Type: Block Comment
Comment: /*this.constructorObject.getParameterTypeList().equals(smio.getParameterTypeList());*/
Comment Type: Block Comment
Comment: // array dimension comparison is skipped if at least one of the class types is a type parameter name, such as E, K, N, T, V, S, U
Comment Type: Line Comment
Comment: /*if(constructorObject.methodBody != null)
        	sb.append("\n").append(constructorObject.methodBody.toString());*/
Comment Type: Block Comment
File LOC: 657
Number of Comments: 5
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\metrics\ConnectivityMetric.java
Comment: // methods access the same field of the class that they belong to
Comment Type: Line Comment
Comment: // methodI invokes methodJ
Comment Type: Line Comment
Comment: // methodI invokes an accessor method
Comment Type: Line Comment
Comment: // methods invoke the same accessor method
Comment Type: Line Comment
Comment: // methodJ accesses the field of the accessor that methodI invokes
Comment Type: Line Comment
Comment: // methodJ invokes methodI
Comment Type: Line Comment
Comment: // methodJ invokes an accessor method
Comment Type: Line Comment
Comment: // methods invoke the same accessor method
Comment Type: Line Comment
Comment: // methodI accesses the field of the accessor that methodJ invokes
Comment Type: Line Comment
File LOC: 131
Number of Comments: 9
Comment Percentage: 6%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\metrics\LCOM.java
File LOC: 144
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\metrics\MMImportCoupling.java
File LOC: 76
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\ParameterObject.java
Comment: // private SingleVariableDeclaration singleVariableDeclaration;
Comment Type: Line Comment
Comment: // this.singleVariableDeclaration = singleVariableDeclaration;
Comment Type: Line Comment
Comment: // return this.singleVariableDeclaration;
Comment Type: Line Comment
File LOC: 61
Number of Comments: 3
Comment Percentage: 4%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\Standalone.java
File LOC: 232
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\SuperFieldInstructionObject.java
Comment: // private SimpleName simpleName;
Comment Type: Line Comment
Comment: // this.simpleName = simpleName;
Comment Type: Line Comment
Comment: // return this.simpleName;
Comment Type: Line Comment
Comment: // sb.append(type).append(" ");
Comment Type: Line Comment
File LOC: 63
Number of Comments: 4
Comment Percentage: 6%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\SuperMethodInvocationObject.java
Comment: // this.superMethodInvocation = superMethodInvocation;
Comment Type: Line Comment
Comment: // return this.superMethodInvocation;
Comment Type: Line Comment
File LOC: 17
Number of Comments: 2
Comment Percentage: 11%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\SystemObject.java
Comment: // Map that has as key the classname and as value
Comment Type: Line Comment
Comment: // the position of className in the classNameList
Comment Type: Line Comment
Comment: // check if declaringType is an anonymous class declaration
Comment Type: Line Comment
File LOC: 796
Number of Comments: 3
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\TypeCheckCodeFragmentAnalyzer.java
Comment: // typeCheckElimination.addSubclassType(typeCheckExpression, instanceofExpression.getRightOperand());
Comment Type: Line Comment
Comment: // checking for methods of the Source class invoked inside the type-checking branches
Comment Type: Line Comment
Comment: // checking for Source class fields or parameters of the type-checking method accessed inside the type-checking branches
Comment Type: Line Comment
Comment: // PostfixExpression postfixExpression = (PostfixExpression)parentExpression.getParent();
Comment Type: Line Comment
Comment: // PostfixExpression postfixExpression = (PostfixExpression)parentExpression.getParent();
Comment Type: Line Comment
Comment: // PostfixExpression postfixExpression = (PostfixExpression)simpleName.getParent();
Comment Type: Line Comment
Comment: // checking for local variables accessed inside the type-checking code branches, but declared outside them
Comment Type: Line Comment
Comment: // PostfixExpression postfixExpression = (PostfixExpression)simpleName.getParent();
Comment Type: Line Comment
Comment: // PostfixExpression postfixExpression = (PostfixExpression)simpleName.getParent();
Comment Type: Line Comment
Comment: // checking for methods of the Source class invoked inside the type-checking branches
Comment Type: Line Comment
Comment: // checking for Source class fields or parameters of the type-checking method accessed inside the type-checking branches
Comment Type: Line Comment
Comment: // PostfixExpression postfixExpression = (PostfixExpression)parentExpression.getParent();
Comment Type: Line Comment
Comment: // PostfixExpression postfixExpression = (PostfixExpression)parentExpression.getParent();
Comment Type: Line Comment
Comment: // PostfixExpression postfixExpression = (PostfixExpression)simpleName.getParent();
Comment Type: Line Comment
Comment: // checking for local variables accessed inside the type-checking code branches, but declared outside them
Comment Type: Line Comment
Comment: // PostfixExpression postfixExpression = (PostfixExpression)simpleName.getParent();
Comment Type: Line Comment
Comment: // PostfixExpression postfixExpression = (PostfixExpression)simpleName.getParent();
Comment Type: Line Comment
File LOC: 1104
Number of Comments: 17
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\TypeObject.java
Comment: // this case covers type parameter names, such as E, K, N, T, V, S, U
Comment Type: Line Comment
Comment: // remove < > , and whitespace
Comment Type: Line Comment
File LOC: 116
Number of Comments: 2
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\TypeSearchRequestor.java
File LOC: 21
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\ExpressionExtractor.java
Comment: // returns a List of SimpleName objects
Comment Type: Line Comment
Comment: // returns a List of SimpleName objects
Comment Type: Line Comment
Comment: // returns a List of MethodInvocation and SuperMethodInvocation objects
Comment Type: Line Comment
Comment: // returns a List of SuperMethodInvocation objects
Comment Type: Line Comment
Comment: // returns a List of MethodInvocation and SuperMethodInvocation objects
Comment Type: Line Comment
Comment: // returns a List of SuperMethodInvocation objects
Comment Type: Line Comment
Comment: // returns a List of FieldAccess objects
Comment Type: Line Comment
Comment: // returns a List of SuperFieldAccess objects
Comment Type: Line Comment
Comment: // returns a List of FieldAccess objects
Comment Type: Line Comment
Comment: // returns a List of SuperFieldAccess objects
Comment Type: Line Comment
Comment: // returns a List of ClassInstanceCreation objects
Comment Type: Line Comment
Comment: // returns a List of ClassInstanceCreation objects
Comment Type: Line Comment
Comment: // returns a List of ArrayCreation objects
Comment Type: Line Comment
Comment: // returns a List of ArrayCreation objects
Comment Type: Line Comment
Comment: // returns a List of ArrayAccess objects
Comment Type: Line Comment
Comment: // returns a List of ArrayAccess objects
Comment Type: Line Comment
Comment: // returns a List of ThisExpression objects
Comment Type: Line Comment
Comment: // returns a List of ThisExpression objects
Comment Type: Line Comment
Comment: // returns a List of TypeLiteral objects
Comment Type: Line Comment
Comment: // returns a List of Type, String, Boolean, Character, Number, and Null Literal objects
Comment Type: Line Comment
Comment: // returns a List of Type, String, Boolean, Character, Number, and Null Literal objects
Comment Type: Line Comment
Comment: // returns a List of CastExpression objects
Comment Type: Line Comment
Comment: // returns a List of InfixExpression objects
Comment Type: Line Comment
Comment: // returns a List of InfixExpression objects
Comment Type: Line Comment
Comment: // returns a List of InstanceofExpression objects
Comment Type: Line Comment
Comment: // returns a List of InstanceofExpression objects
Comment Type: Line Comment
Comment: // returns a List of Assignment objects
Comment Type: Line Comment
Comment: // returns a List of Assignment objects
Comment Type: Line Comment
Comment: // returns a List of PostfixExpression objects
Comment Type: Line Comment
Comment: // returns a List of PostfixExpression objects
Comment Type: Line Comment
Comment: // returns a List of PrefixExpression objects
Comment Type: Line Comment
Comment: // returns a List of PrefixExpression objects
Comment Type: Line Comment
Comment: // returns a List of VariableDeclarationExpression objects
Comment Type: Line Comment
Comment: // returns a List of VariableDeclarationExpression objects
Comment Type: Line Comment
Comment: // returns a List of ConditionalExpression objects
Comment Type: Line Comment
Comment: // returns a List of VariableDeclarationExpression objects
Comment Type: Line Comment
Comment: // returns a List of variable updaters (i.e. Assignment, PrefixExpression, or PostfixExpression objects)
Comment Type: Line Comment
Comment: // returns a List of variable updaters (i.e. Assignment, PrefixExpression, or PostfixExpression objects)
Comment Type: Line Comment
File LOC: 525
Number of Comments: 38
Comment Percentage: 7%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\ExpressionInstanceChecker.java
File LOC: 5
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfArrayAccess.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfArrayCreation.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfAssignment.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfBranchingStatement.java
File LOC: 13
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfBreakStatement.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfCastExpression.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfClassInstanceCreation.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfConditionalExpression.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfConstructorInvocation.java
File LOC: 12
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfContinueStatement.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfDoStatement.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfEnhancedForStatement.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfExpression.java
File LOC: 7
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfFieldAccess.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfForStatement.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfIfStatement.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfInfixExpression.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfInstanceofExpression.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfLiteral.java
File LOC: 16
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfMethodInvocation.java
File LOC: 12
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfPostfixExpression.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfPrefixExpression.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfReturnStatement.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfSimpleName.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfSuperFieldAccess.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfSuperMethodInvocation.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfSwitchStatement.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfThisExpression.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfTryStatement.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfTypeDeclarationStatement.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfTypeLiteral.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfVariableDeclarationExpression.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfVariableDeclarationStatement.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfVariableModifier.java
File LOC: 14
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\InstanceOfWhileStatement.java
File LOC: 11
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\math\AdjacencyList.java
File LOC: 52
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\math\Cluster.java
File LOC: 47
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\math\Clustering.java
File LOC: 17
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\math\DoubleArray.java
Comment: /**
 * A class for dealing with double arrays and matrices.
 * Copyright : BSD License
 *
 * @author Yann RICHET
 */
Comment Type: Java Doc Comment
Comment: /**
 *  Insert any number of arrays between 2 columns of a matrix. Size of the arrays must
 *  equal number of rows in the matrix.
 *  Example:<br>
 *  <code>
 *  double[][] a = {{0,1,2,3,4},{1,7,8,9,10},{2,13,14,15,16},{3,19,20,21,22},{4,23,24,25,26}};<br>
 *  double[] b = {00,11,22,33,44}, c = {55,66,77,88,99};<br>
 *  double[][] z = insertColumns(a, 2, b, c);<br>
 *  input matrix is:<br>
 *   0   1   2   3   4<br>
 *   1   7   8   9  10<br>
 *   2  13  14  15  16<br>
 *   3  19  20  21  22<br>
 *   4  23  24  25  26<br>
 *  result is:<br>
 *   0   1   0  55   2   3   4<br>
 *   1   7  11  66   8   9  10<br>
 *   2  13  22  77  14  15  16<br>
 *   3  19  33  88  20  21  22<br>
 *   4  23  44  99  24  25  26<br>
 *  </code>
 *  @param x Input m x n matrix.
 *  @param J Index of column before which the new columns will be inserted.
 *  @param y The arrays to be inserted
 *  @return New matrix with added columns.
 */
Comment Type: Java Doc Comment
Comment: /**
 *  Insert any number of arrays between 2 rows of a matrix. Size of the arrays must
 *  equal number of columns in the matrix.
 *  Example:<br>
 *  <code>
 *  double[][] a = {{0,1,2,3,4},{1,7,8,9,10},{2,13,14,15,16},{3,19,20,21,22}};<br>
 *  double[] b = {0,11,22,33,44}, c = {55,66,77,88,99};<br>
 *  double[][] z = insertRows(a, 1, b, c);<br>
 *  result is:<br>
 *    0   1   2   3   4<br>
 *    0  11  22  33  44<br>
 *   55  66  77  88  99<br>
 *    1   7   8   9  10<br>
 *    2  13  14  15  16<br>
 *    3  19  20  21  22<br>
 *  </code>
 *  @param x Input m x n matrix.
 *  @param I Index of row before which the new rows will be inserted.
 *  @param y The arrays to be inserted
 *  @return New matrix with added rows.
 */
Comment Type: Java Doc Comment
Comment: /**
 *  Insert any number of values, or a single array, between 2 elements of an array.
 *  Example:<br>
 *  <code>
 *  double[] b = {00,11,22,33,44}, c = {55,66,77,88,99};<br>
 *  double[] z = insert(b, 2, 333, 444);<br>
 *  result is:<br>
 *  0  11 333 444  22  33  44
 *  double[] z = insert(b, 2, c);<br>
 *  result is:<br>
 *  0  11  55  66  77  88  99  22  33  44<br>
 *  </code>
 *  @param x Input array.
 *  @param I Index of element before which the values will be inserted.
 *  @param y Values to be inserted. Can also be a single array.
 *  @return Expanded array.
 */
Comment Type: Java Doc Comment
Comment: /**
 *  Deletes a range of columns from a matrix.
 *  Example:<br>
 *  <code>
 *  double[][] a = {{0,1,2,3,4},{1,7,8,9,10},{2,13,14,15,16},{3,19,20,21,22},{4,23,24,25,26}};<br>
 *  double[][] z = deleteColumnsRange(a, 1, 3);<br>
 *  result is:<br>
 *   0   4<br>
 *   1  10<br>
 *   2  16<br>
 *   3  22<br>
 *   4  26<br>
 *  </code>
 *  @param x The input matrix
 *  @param J1 The Index of the first column to delete.
 *  @param J2 The index of the last column to delete.
 *  @return The reduced matrix.
 */
Comment Type: Java Doc Comment
Comment: // if (J2<x.length-1)
Comment Type: Line Comment
Comment: /**
 *  Deletes a list of columns from a matrix.
 *  Example:<br>
 *  <code>
 *  double[][] a = {{0,1,2,3,4},{1,7,8,9,10},{2,13,14,15,16},{3,19,20,21,22},{4,23,24,25,26}};<br>
 *  double[][] z = deleteColumns(a, 1, 3);<br>
 *  result is:<br>
 *   0  2   4<br>
 *   1  8  10<br>
 *   2  14 16<br>
 *   3  20 22<br>
 *   4  24 26<br>
 *  </code>
 *  @param x The input matrix
 *  @param J The indices of the columns to be deleted. There must be no more indices listed
 *  than there are columns in the input matrix.
 *  @return The reduced matrix.
 */
Comment Type: Java Doc Comment
Comment: // TODO improve efficiency here
Comment Type: Line Comment
Comment: /**
 *  Deletes a range of rows from a matrix.
 *  Example:<br>
 *  <code>
 *  double[][] a = {{0,1,2,3,4},{1,7,8,9,10},{2,13,14,15,16},{3,19,20,21,22},{4,23,24,25,26}};<br>
 *  double[][] z = deleteRowsRange(a, 1, 3);<br>
 *  result is:<br>
 *    0   1   2   3   4<br>
 *    4  23  24  25  26<br>
 *  </code>
 *  @param x The input matrix
 *  @param I1 The Index of the first row to delete.
 *  @param I2 The index of the last row to delete.
 *  @return The reduced matrix.
 */
Comment Type: Java Doc Comment
Comment: /**
 *  Deletes a list of rows from a matrix.
 *  Example:<br>
 *  <code>
 *  double[][] a = {{0,1,2,3,4},{1,7,8,9,10},{2,13,14,15,16},{3,19,20,21,22},{4,23,24,25,26}};<br>
 *  double[][] z = deleteRows(a, 1, 3);<br>
 *  result is:<br>
 *    0   1   2   3   4<br>
 *    2  13  14  15  16<br>
 *    4  23  24  25  26<br>
 *  </code>
 *  @param x The input matrix
 *  @param I The indices of the rows to delete.
 *  @return The reduced matrix.
 */
Comment Type: Java Doc Comment
Comment: /**
 *  Determines if a value is within an array
 *  @param i Value to be searched for.
 *  @param I array to be searched
 *  @return true if found. fales if not.
 */
Comment Type: Java Doc Comment
Comment: /**
 *  Transposes an mxn matrix into an nxm matrix. Each row of the input matrix becomes a column in the
 *  output matrix.
 *  @param M Input matrix.
 *  @return Transposed version of M.
 */
Comment Type: Java Doc Comment
File LOC: 60
Number of Comments: 12
Comment Percentage: 20%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\math\Edge.java
File LOC: 41
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\math\Hierarchical.java
File LOC: 121
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\math\HumaniseCamelCase.java
Comment: // ----------------------------------------------------------------------- Static Properties and Constants
Comment Type: Line Comment
Comment: // ----------------------------------------------------------------------- Instance Properties
Comment Type: Line Comment
Comment: // ----------------------------------------------------------------------- Instance Methods
Comment Type: Line Comment
Comment: /**
 * Converts a camelCase to a more human form, with spaces. E.g. 'Camel case'
 *
 * @param camelCaseString
 * @return a humanised version of a camelCaseString if it is indeed camel-case. Returns the
 * original string if it is'nt camel-case
 */
Comment Type: Java Doc Comment
File LOC: 48
Number of Comments: 4
Comment Percentage: 8%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\math\LevenshteinDistance.java
File LOC: 13
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\math\Node.java
Comment: // used for Kosaraju's algorithm and Edmonds's algorithm
Comment Type: Line Comment
Comment: // used for Tarjan's algorithm
Comment Type: Line Comment
Comment: // used for Tarjan's algorithm
Comment Type: Line Comment
File LOC: 37
Number of Comments: 3
Comment Percentage: 8%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\math\Stemmer.java
Comment: /*

   Porter stemmer in Java. The original paper is in

       Porter, 1980, An algorithm for suffix stripping, Program, Vol. 14,
       no. 3, pp 130-137,

   See also http://www.tartarus.org/~martin/PorterStemmer

   History:

   Release 1

   Bug 1 (reported by Gonzalo Parra 16/10/99) fixed as marked below.
   The words 'aed', 'eed', 'oed' leave k at 'a' for step 3, and b[k-1]
   is then out outside the bounds of b.

   Release 2

   Similarly,

   Bug 2 (reported by Steve Dyrdahl 22/2/00) fixed as marked below.
   'ion' by itself leaves j = -1 in the test for 'ion' in step 5, and
   b[j] is then outside the bounds of b.

   Release 3

   Considerably revised 4/9/00 in the light of many helpful suggestions
   from Brian Goetz of Quiotix Corporation (brian@quiotix.com).

   Release 4

*/
Comment Type: Block Comment
Comment: /**
 * Stemmer, implementing the Porter Stemming Algorithm
 *
 * The Stemmer class transforms a word into its root form.  The input
 * word can be provided a character at time (by calling add()), or at once
 * by calling one of the various stem(something) methods.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Add a character to the word being stemmed.  When you are finished
 * adding characters, you can call stem(void) to stem the word.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Adds wLen characters to the word being stemmed contained in a portion
 * of a char[] array. This is like repeated calls of add(char ch), but
 * faster.
 */
Comment Type: Java Doc Comment
Comment: /* cons(i) is true <=> b[i] is a consonant. */
Comment Type: Block Comment
Comment: /* m() measures the number of consonant sequences between 0 and j. if c is
      a consonant sequence and v a vowel sequence, and <..> indicates arbitrary
      presence,

         <c><v>       gives 0
         <c>vc<v>     gives 1
         <c>vcvc<v>   gives 2
         <c>vcvcvc<v> gives 3
         ....
   */
Comment Type: Block Comment
Comment: /* vowelinstem() is true <=> 0,...j contains a vowel */
Comment Type: Block Comment
Comment: /* doublec(j) is true <=> j,(j-1) contain a double consonant. */
Comment Type: Block Comment
Comment: /* cvc(i) is true <=> i-2,i-1,i has the form consonant - vowel - consonant
      and also if the second c is not w,x or y. this is used when trying to
      restore an e at the end of a short word. e.g.

         cav(e), lov(e), hop(e), crim(e), but
         snow, box, tray.

   */
Comment Type: Block Comment
Comment: /* setto(s) sets (j+1),...k to the characters in the string s, readjusting
      k. */
Comment Type: Block Comment
Comment: /* r(s) is used further down. */
Comment Type: Block Comment
Comment: /* step1() gets rid of plurals and -ed or -ing. e.g.

          caresses  ->  caress
          ponies    ->  poni
          ties      ->  ti
          caress    ->  caress
          cats      ->  cat

          feed      ->  feed
          agreed    ->  agree
          disabled  ->  disable

          matting   ->  mat
          mating    ->  mate
          meeting   ->  meet
          milling   ->  mill
          messing   ->  mess

          meetings  ->  meet

   */
Comment Type: Block Comment
Comment: /* step2() turns terminal y to i when there is another vowel in the stem. */
Comment Type: Block Comment
Comment: /* step3() maps double suffices to single ones. so -ization ( = -ize plus
      -ation) maps to -ize etc. note that the string before the suffix must give
      m() > 0. */
Comment Type: Block Comment
Comment: /* step4() deals with -ic-, -full, -ness etc. similar strategy to step3. */
Comment Type: Block Comment
Comment: /* step5() takes off -ant, -ence etc., in context <c>vcvc<v>. */
Comment Type: Block Comment
Comment: /* step6() removes a final -e if m() > 1. */
Comment Type: Block Comment
Comment: /**
 * @uml.property  name="b" multiplicity="(0 -1)" dimension="1"
 */
Comment Type: Java Doc Comment
Comment: /**
 * @uml.property  name="i"
 */
Comment Type: Java Doc Comment
Comment: /**
 * @uml.property  name="i_end"
 */
Comment Type: Java Doc Comment
Comment: /**
 * @uml.property  name="j"
 */
Comment Type: Java Doc Comment
Comment: /**
 * @uml.property  name="k"
 */
Comment Type: Java Doc Comment
Comment: /* unit of size whereby b is increased */
Comment Type: Block Comment
Comment: /**
 * After a word has been stemmed, it can be retrieved by toString(),
 * or a reference to the internal buffer can be retrieved by getResultBuffer
 * and getResultLength (which is generally more efficient.)
 */
Comment Type: Java Doc Comment
Comment: /**
 * Returns the length of the word resulting from the stemming process.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Returns a reference to a character buffer containing the results of
 * the stemming process.  You also need to consult getResultLength()
 * to determine the length of the result.
 */
Comment Type: Java Doc Comment
Comment: /* For Bug 1 */
Comment Type: Block Comment
Comment: /* for Bug 1 */
Comment Type: Block Comment
Comment: /* element etc. not stripped before the m */
Comment Type: Block Comment
Comment: /* j >= 0 fixes Bug 2 */
Comment Type: Block Comment
Comment: /* takes care of -ous */
Comment Type: Block Comment
Comment: /**
 * Stem the word placed into the Stemmer buffer through calls to add().
 * Returns true if the stemming process resulted in a word different
 * from the input.  You can retrieve the result with
 * getResultLength()/getResultBuffer() or toString().
 */
Comment Type: Java Doc Comment
Comment: /**
 * Test program for demonstrating the Stemmer.  It reads text from a
 * a list of files, stems each word, and writes the result to standard
 * output. Note that the word stemmed is expected to be in lower case:
 * forcing lower case must be done outside the Stemmer class.
 * Usage: Stemmer file-name file-name ...
 */
Comment Type: Java Doc Comment
Comment: /* or, to test add(char[] w, int j) */
Comment Type: Block Comment
Comment: /* s.add(w, j); */
Comment Type: Block Comment
Comment: /* to test add(char ch) */
Comment Type: Block Comment
Comment: /* to test getResultBuffer(), getResultLength() : */
Comment Type: Block Comment
Comment: /* u = new String(s.getResultBuffer(), 0, s.getResultLength()); */
Comment Type: Block Comment
Comment: /* and now, to test toString() : */
Comment Type: Block Comment
File LOC: 444
Number of Comments: 39
Comment Percentage: 8%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\math\TarjanAlgorithm.java
File LOC: 47
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\MethodDeclarationUtility.java
File LOC: 238
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\StatementExtractor.java
File LOC: 259
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\StatementInstanceChecker.java
File LOC: 5
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\SuperMethodInvocationVisitor.java
File LOC: 15
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\ThrownExceptionVisitor.java
File LOC: 43
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\TopicFinder.java
Comment: // split based on underscores
Comment Type: Line Comment
Comment: // split based on camel case
Comment Type: Line Comment
Comment: // remove stop words
Comment Type: Line Comment
Comment: // stem the word
Comment Type: Line Comment
Comment: // count the frequencies of the words
Comment Type: Line Comment
File LOC: 74
Number of Comments: 5
Comment Percentage: 6%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\util\TypeVisitor.java
File LOC: 36
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\VariableDeclarationObject.java
File LOC: 10
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\ClassFigure.java
File LOC: 70
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\ClassFigureMover.java
Comment: /**
 * A Draw2D mouse listener for dragging figures around the diagram. Listeners such as this
 * are useful for manipulating Draw2D diagrams, but are superseded by higher level GEF
 * functionality if the GEF framework is used.
 */
Comment Type: Java Doc Comment
Comment: /**
 *  Construct a new instance for dragging the specified figure around the diagram.
 *
 *  @param figure the figure to be dragged.
 */
Comment Type: Java Doc Comment
Comment: /**
 *  Cache the mouse down location and mark the event as consumed so that the Draw2D
 *  event dispatcher will send all mouse events to the figure associated with this
 *  listener until the mouse button is released.
 */
Comment Type: Java Doc Comment
Comment: /**
 *  Process mouse drag events by moving the associated figure and updating the
 *  appropriate figure in the diagram.
 */
Comment Type: Java Doc Comment
Comment: // Copy the rectangle using getCopy() to prevent undesired side-effects
Comment Type: Line Comment
Comment: /**
 *  Clear the last cached mouse location signaling the end of the drag figure
 *  operation.
 */
Comment Type: Java Doc Comment
File LOC: 52
Number of Comments: 6
Comment Percentage: 11%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\CompartmentFigure.java
Comment: // setFont( Display.getCurrent().getSystemFont() );
Comment Type: Line Comment
Comment: // adds EntityFigure with different color and border
Comment Type: Line Comment
File LOC: 18
Number of Comments: 2
Comment Percentage: 11%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\CompartmentFigureBorder.java
File LOC: 13
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\ConnectionType.java
File LOC: 9
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\DecorationConstants.java
File LOC: 20
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\EntityFigure.java
Comment: /*public JConnection addMethodToMethodConnection(ConnectionType type,EntityFigure label, Integer occurences, int classWidth, int bendHeight){
		JConnection connection = addRightRightConnection(type,label, occurences, classWidth, bendHeight);

		connection.setReadStyle();
		connection.setForegroundColor(ColorConstants.cyan);

		return connection;
	}*/
Comment Type: Block Comment
Comment: // new EntityFigureListener(this);
Comment Type: Line Comment
Comment: // connection.setSourceBendRouter(bendHeight, classWidth);
Comment Type: Line Comment
Comment: // connection.setSourceBendRouter(-bendHeight, -classWidth);
Comment Type: Line Comment
File LOC: 174
Number of Comments: 4
Comment Percentage: 2%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\EntityFigureListener.java
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
Comment: // String fontStyle = "Arial";
Comment Type: Line Comment
Comment: // l.setFont(new Font(null, fontStyle, 14 , SWT.BOLD));
Comment Type: Line Comment
Comment: // l.setFont(new Font(null, "Arial", 10, SWT.BOLD));
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
File LOC: 60
Number of Comments: 6
Comment Percentage: 10%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\FeatureEnviedMethodInformationControl.java
Comment: // only put tooltip when the classFigure is selected and it contains methods affected by feature envy
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
File LOC: 117
Number of Comments: 7
Comment Percentage: 5%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\FeatureEnviedMethodInformationControlCreator.java
Comment: // return new InformationControl(parent, true);
Comment Type: Line Comment
File LOC: 13
Number of Comments: 1
Comment Percentage: 7%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\FeatureEnvyDiagram.java
Comment: // Create a root figure and simple layout to contain all other figures
Comment Type: Line Comment
Comment: // Create source class
Comment Type: Line Comment
Comment: // Create target class
Comment Type: Line Comment
Comment: // Create Extract Method figure that goes in the middle
Comment Type: Line Comment
Comment: // Create Extract Method figure that goes in Source Class
Comment Type: Line Comment
Comment: // Determines interval of weight, ONLY needed when extract method is in Source class
Comment Type: Line Comment
Comment: // Creates Connections for SOURCE methods
Comment Type: Line Comment
Comment: // EntityFigure methodFigure = new EntityFigure(method.toString(),EntityFigure.METHOD);
Comment Type: Line Comment
Comment: // Creates Connections for TARGET methods
Comment Type: Line Comment
Comment: // EntityFigure methodFigure = new EntityFigure(method.toString(), EntityFigure.METHOD);
Comment Type: Line Comment
Comment: // Creates Connections for SOURCE Read fields
Comment Type: Line Comment
Comment: // EntityFigure fieldFigure = new EntityFigure(field.toString(),EntityFigure.FIELD);
Comment Type: Line Comment
Comment: // Creates Connections for SOURCE Write methods
Comment Type: Line Comment
Comment: // EntityFigure fieldFigure = new EntityFigure(field.toString(), EntityFigure.FIELD);
Comment Type: Line Comment
Comment: // JConnection connection = extractMethod.addToSourceWeakWriteConnection(ConnectionType.WRITE_FIELD_SOURCE,entity, occurences);
Comment Type: Line Comment
Comment: // EntityFigure fieldFigure = new EntityFigure(field.toString(), EntityFigure.FIELD);
Comment Type: Line Comment
Comment: // EntityFigure fieldFigure = new EntityFigure(field.toString(), EntityFigure.FIELD);
Comment Type: Line Comment
File LOC: 148
Number of Comments: 17
Comment Percentage: 11%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\FeatureEnvyVisualizationData.java
Comment: // include delegate method in the analysis
Comment Type: Line Comment
Comment: // the used field in inherited from a superclass which is the target
Comment Type: Line Comment
Comment: // the defined field in inherited from a superclass which is the target
Comment Type: Line Comment
File LOC: 329
Number of Comments: 3
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\GodClassDiagram.java
Comment: // connections.setConnectionRouter( new ShortestPathConnectionRouter(primary));
Comment Type: Line Comment
Comment: // Adds Connections from Methods to other Methods in Source Class
Comment Type: Line Comment
Comment: // Create a root figure and simple layout to contain all other figures
Comment Type: Line Comment
Comment: // Creates Source Class
Comment Type: Line Comment
Comment: // Creates Extracted Class
Comment Type: Line Comment
Comment: // Adds Connections from Methods to other Methods in Extracted Class
Comment Type: Line Comment
Comment: // Adds Read Connections from Methods to Fields in Extracted Class
Comment Type: Line Comment
Comment: // Adds Write Connections from Methods to Fields in Extracted Class
Comment Type: Line Comment
Comment: // Adds Read Connections from Methods to Fields in Source Class
Comment Type: Line Comment
Comment: // Adds Write Connections from Methods to Fields in Source Class
Comment Type: Line Comment
File LOC: 206
Number of Comments: 10
Comment Percentage: 4%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\GodClassDiagram2.java
Comment: // Adds Connections from Methods to other Methods in Source Class
Comment Type: Line Comment
Comment: // this.canvas= new FigureCanvas(parent, SWT.DOUBLE_BUFFERED);
Comment Type: Line Comment
Comment: // Create a root figure and simple layout to contain all other figures
Comment Type: Line Comment
Comment: // if(totalExtractedMethods == union.size()|| union.size()== 0)
Comment Type: Line Comment
Comment: // Creates Source Class
Comment Type: Line Comment
Comment: // Creates Extracted Class
Comment Type: Line Comment
Comment: // extractedClass.getMethodSectionCompartment().addAllSections();
Comment Type: Line Comment
Comment: // Adds Read Connections from Methods to Fields in Source Class
Comment Type: Line Comment
Comment: // source.getFieldsCompartment().add(fieldFigure);
Comment Type: Line Comment
Comment: // Adds Write Connections from Methods to Fields in Source Class
Comment Type: Line Comment
Comment: // JConnection connection = connectionSource.addToSourceWeakWriteConnection(ConnectionType.WRITE_FIELD_SOURCE, entity, occurences);
Comment Type: Line Comment
Comment: // source.getFieldsCompartment().add(fieldFigure);
Comment Type: Line Comment
Comment: // source.getFieldsCompartment().add(methodFigure);
Comment Type: Line Comment
Comment: // Adds Write Connections from Methods to Fields in Extracted Class
Comment Type: Line Comment
Comment: // Adds Read Connections from Methods to Fields in Extracted Class
Comment Type: Line Comment
Comment: // Adds Connections from Methods to other Methods in Extracted Class
Comment Type: Line Comment
Comment: // check if method is in Left Section already
Comment Type: Line Comment
Comment: // Check if method is in Right Section already
Comment Type: Line Comment
Comment: // If its not already there, add it so that the two sides are even
Comment Type: Line Comment
Comment: // checks if Target Connection Method is in Left Section
Comment Type: Line Comment
Comment: // connectionTarget = entity;
Comment Type: Line Comment
Comment: // checks if Target Connection Method is in Right Section
Comment Type: Line Comment
Comment: // connectionTarget = entity;
Comment Type: Line Comment
Comment: // targetinRightSection = true;
Comment Type: Line Comment
Comment: // If its not already there, add it to Right Section
Comment Type: Line Comment
Comment: // Adds Methods that were not already added
Comment Type: Line Comment
Comment: // checks if Method is in Left Section
Comment Type: Line Comment
Comment: // connectionTarget = entity;
Comment Type: Line Comment
Comment: // checks if Method is in Right Section
Comment Type: Line Comment
Comment: // If its not already there, add it so it evens out the sections
Comment Type: Line Comment
File LOC: 428
Number of Comments: 30
Comment Percentage: 7%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\GodClassInformationControl.java
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
File LOC: 88
Number of Comments: 3
Comment Percentage: 3%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\GodClassInformationControlCreator.java
File LOC: 13
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\GodClassVisualizationData.java
Comment: // the MethodObject keys correspond to the methods suggested to be extracted in a new class
Comment Type: Line Comment
Comment: // exclude accesses to static fields
Comment Type: Line Comment
Comment: // exclude accesses to static fields
Comment Type: Line Comment
Comment: // replace getter method calls in Source class with field accesses in Extracted class
Comment Type: Line Comment
Comment: // remove getter method calls in source class
Comment Type: Line Comment
Comment: // add field reads in extracted class
Comment Type: Line Comment
Comment: // remove setter method calls in source class
Comment Type: Line Comment
Comment: // add field writes in extracted class
Comment Type: Line Comment
File LOC: 265
Number of Comments: 8
Comment Percentage: 3%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\ICustomInformationControlCreator.java
Comment: /**
 * {@link IInformationControlCreator} for custom information inputs.
 */
Comment Type: Java Doc Comment
Comment: /**
 *  Returns whether the given information input is supported by this control creator or not.
 *  @param info the information input
 *  @return <code>true</code> if the given information input is supported, <code>false</code> otherwise
 */
Comment Type: Java Doc Comment
File LOC: 5
Number of Comments: 2
Comment Percentage: 40%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\IInformationProvider.java
Comment: /**
 * Information provider interface to get information about elements under the mouse cursor.
 * This interface is analog to {@link org.eclipse.jface.text.information.IInformationProvider} in
 * {@link org.eclipse.jface.text.information.InformationPresenter}.
 */
Comment Type: Java Doc Comment
Comment: /**
 *  Returns information about the element at the specified location.
 *  The information returned is used to display an appropriate tooltip.
 *  @param location the location of the element (the coordinate is in the receiver's coordinate system)
 *  @return information about the element, or <code>null</code> if none is available
 */
Comment Type: Java Doc Comment
Comment: /**
 *  Returns the area of the element at the specified location.
 *  The area returned is used to place an appropriate tooltip.
 *  @param location the location of the element (the coordinate is in the receiver's coordinate system)
 *  @return the area of the element, or <code>null</code> if none is available
 */
Comment Type: Java Doc Comment
File LOC: 7
Number of Comments: 3
Comment Percentage: 42%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\InformationControlManager.java
Comment: /**
 * Information control manager.
 * Refactored from {@link org.eclipse.jface.text.information.InformationPresenter}
 * for general usage instead of {@link ITextViewer}.
 */
Comment Type: Java Doc Comment
Comment: /**
 *  Internal information control closer. Listens to several events issued by its subject control
 *  and closes the information control when necessary.
 */
Comment Type: Java Doc Comment
Comment: /**
 * The subject control.
 */
Comment Type: Java Doc Comment
Comment: /**
 * The information control.
 */
Comment Type: Java Doc Comment
Comment: /**
 * Indicates whether this closer is active.
 */
Comment Type: Java Doc Comment
Comment: // nothing to do
Comment Type: Line Comment
Comment: // nothing to do
Comment Type: Line Comment
Comment: // Without the asyncExec, mouse clicks to the workbench window are swallowed.
Comment Type: Line Comment
Comment: // nothing to do
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
Comment: /**
 *  Creates a new information control manager that uses the given information provider and control creators.
 *  The manager is not installed on any control yet. By default, an information
 *  control closer is set that closes the information control in the event of key strokes,
 *  resizing, moves, focus changes, mouse clicks, and disposal - all of those applied to
 *  the information control's parent control. Optionally, the setup ensures that the information
 *  control when made visible will request the focus.
 *
 *  @param informationProvider the information provider to be used
 *  @param customControlCreators the control creators to be used
 *  @param takeFocusWhenVisible set to <code>true</code> if the information control should take focus when made visible
 */
Comment Type: Java Doc Comment
Comment: // Convert to String for default TextLabelInformationControl
Comment Type: Line Comment
Comment: // (Fallback, if no custom control creator has been found)
Comment Type: Line Comment
Comment: // if (info != null && customControlCreator == null) {
Comment Type: Line Comment
Comment: // info = info.toString();
Comment Type: Line Comment
Comment: // }
Comment Type: Line Comment
Comment: // Compute information input
Comment Type: Line Comment
Comment: // Find an information control creator for the computed information input
Comment Type: Line Comment
Comment: // Trigger the presentation of the computed information
Comment Type: Line Comment
File LOC: 129
Number of Comments: 19
Comment Percentage: 14%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\JConnection.java
Comment: // changed Label to EntityFigure
Comment Type: Line Comment
Comment: // LeftAnchor sourceAnchor = new LeftAnchor(source);
Comment Type: Line Comment
Comment: // LeftAnchor targetAnchor = new LeftAnchor(target);
Comment Type: Line Comment
Comment: // LeftAnchor sourceAnchor = new LeftAnchor(source);
Comment Type: Line Comment
Comment: // RightAnchor targetAnchor = new RightAnchor(target);
Comment Type: Line Comment
Comment: // RightAnchor sourceAnchor = new RightAnchor(source);
Comment Type: Line Comment
Comment: // RightAnchor targetAnchor = new RightAnchor(target);
Comment Type: Line Comment
Comment: // locator.setGap(5);
Comment Type: Line Comment
Comment: /*int gap =10;
		if(classWidth<0)
			gap = -gap-25;
		 */
Comment Type: Block Comment
Comment: // bp1.setWeight(weight);
Comment Type: Line Comment
Comment: /*RelativeBendpoint bp5 = new RelativeBendpoint(this);
		bp5.setRelativeDimensions(new Dimension(0,0), new Dimension(-((classWidth/2)+gap),0));
		bp5.setWeight(1);*/
Comment Type: Block Comment
File LOC: 176
Number of Comments: 11
Comment Percentage: 6%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\LeftAnchor.java
File LOC: 14
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\Legend.java
Comment: // MethodSectionCompartment.setBorder(new CompartmentFigureBorder());
Comment Type: Line Comment
Comment: // checkBoxSection.setBorder(new LineBorder(1));
Comment Type: Line Comment
Comment: // this.addMethodSectionCompartment(2);
Comment Type: Line Comment
Comment: // MethodSectionCompartment.setBorder(new LineBorder(2));
Comment Type: Line Comment
Comment: // this.getMethodSectionCompartment().getLeftSection().setBorder(new MarginBorder(5,5,5,5));
Comment Type: Line Comment
File LOC: 151
Number of Comments: 5
Comment Percentage: 3%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\MethodClassSection.java
Comment: // setFont( Display.getCurrent().getSystemFont() );
Comment Type: Line Comment
File LOC: 25
Number of Comments: 1
Comment Percentage: 4%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\MyContentProposalProvider.java
Comment: // if (proposals[i].length() >= contents.length()	&& proposals[i].substring(0, contents.length()).equalsIgnoreCase(contents) ) {
Comment Type: Line Comment
File LOC: 21
Number of Comments: 1
Comment Percentage: 4%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\PackageFigure.java
File LOC: 73
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\PackageMapDiagram.java
Comment: // root.setFont(Display.getDefault().getSystemFont());
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
Comment: // get all Candidates for Refactoring
Comment Type: Line Comment
Comment: // parses JavaProject
Comment Type: Line Comment
Comment: // if package name already exists then merge packages
Comment Type: Line Comment
Comment: // creates a new package figure
Comment Type: Line Comment
Comment: // we need bindings later on
Comment Type: Line Comment
Comment: // searches through all the classes of the packages
Comment Type: Line Comment
Comment: // creates new class figure
Comment Type: Line Comment
Comment: // For classes that contain Feature Envy methods
Comment Type: Line Comment
Comment: // For inner classes
Comment Type: Line Comment
Comment: // Places the subPackages in the appropriate packages
Comment Type: Line Comment
Comment: // boolean isSubPackage=false;
Comment Type: Line Comment
Comment: // adds the remaining packages to the system
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
Comment: // classFigure.setToolTip(null);
Comment Type: Line Comment
File LOC: 308
Number of Comments: 19
Comment Percentage: 6%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\PackageMapDiagramInformationProvider.java
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
File LOC: 33
Number of Comments: 1
Comment Percentage: 3%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\PackageMapFigure.java
File LOC: 6
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\PMClassFigure.java
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
File LOC: 131
Number of Comments: 1
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\ProportionalFlowLayout.java
Comment: // The preferred dimension that is to be calculated and returned
Comment Type: Line Comment
Comment: // width needs to be increased
Comment Type: Line Comment
Comment: // in need of a new Row
Comment Type: Line Comment
Comment: // makes a new row, height is increased
Comment Type: Line Comment
Comment: // increases height if new figure added in new row is taller then previous
Comment Type: Line Comment
Comment: // updates the current RowWidth
Comment Type: Line Comment
File LOC: 71
Number of Comments: 6
Comment Percentage: 8%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\RightAnchor.java
File LOC: 14
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\SearchDialog.java
Comment: // We need to save the values of the Text fields into Strings because the UI
Comment Type: Line Comment
Comment: // gets disposed
Comment Type: Line Comment
Comment: // new AutoCompleteField(inputText, new TextContentAdapter(),classNames);
Comment Type: Line Comment
Comment: // and the Text fields are not accessible any more.
Comment Type: Line Comment
File LOC: 72
Number of Comments: 4
Comment Percentage: 5%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\SearchInputAction.java
Comment: // if(figure.getName().toLowerCase().contains(value.toLowerCase())){
Comment Type: Line Comment
Comment: // TODO Auto-generated method stub
Comment Type: Line Comment
File LOC: 29
Number of Comments: 2
Comment Percentage: 6%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\SectionCompartment.java
Comment: // setFont( Display.getCurrent().getSystemFont() );
Comment Type: Line Comment
File LOC: 30
Number of Comments: 1
Comment Percentage: 3%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\SmellyClassMouseListener.java
Comment: // clearing previous decoration
Comment Type: Line Comment
Comment: // finding and decorating target classes
Comment Type: Line Comment
File LOC: 57
Number of Comments: 2
Comment Percentage: 3%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\VisualizationData.java
File LOC: 5
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\ZoomAction.java
File LOC: 50
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\ast\visualization\ZoomInputAction.java
File LOC: 43
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\CandidateRefactoring.java
File LOC: 49
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\ClusterSizeComparator.java
File LOC: 13
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\DistanceCalculator.java
File LOC: 22
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\DistanceMatrix.java
Comment: // holds the entity set of each entity
Comment Type: Line Comment
Comment: // holds the entity set of each class
Comment Type: Line Comment
Comment: // ArrayList<String> contains the target classes from which key number of entities are accessed
Comment Type: Line Comment
Comment: // ArrayList<String> contains the accessed entities per target class (key)
Comment Type: Line Comment
Comment: // Clustering End
Comment Type: Line Comment
File LOC: 344
Number of Comments: 5
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\Entity.java
File LOC: 7
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\ExtractClassCandidateGroup.java
File LOC: 80
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\ExtractClassCandidateRefactoring.java
Comment: // System.out.println(this.toString() + "\toverrides method of superclass");
Comment Type: Line Comment
Comment: // System.out.println(this.toString() + "\tcontains super method invocation");
Comment Type: Line Comment
Comment: // System.out.println(this.toString() + "\tis synchronized");
Comment Type: Line Comment
File LOC: 306
Number of Comments: 3
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\ExtractedConcept.java
File LOC: 54
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\MoveMethodCandidateRefactoring.java
Comment: // contains source class methods that do not access any field or method and are accessed only by sourceMethod
Comment Type: Line Comment
Comment: // System.out.println(this.toString() + "\tTarget class is an interface");
Comment Type: Line Comment
Comment: // System.out.println(this.toString() + "\tTarget class is an enum");
Comment Type: Line Comment
Comment: // System.out.println(this.toString() + "\tdoes not contain a valid target object");
Comment Type: Line Comment
Comment: // System.out.println(this.toString() + "\thas one-to-many relationship with target class");
Comment Type: Line Comment
Comment: // System.out.println(this.toString() + "\toverrides method of superclass");
Comment Type: Line Comment
Comment: // System.out.println(this.toString() + "\tcontains field assignment");
Comment Type: Line Comment
Comment: // System.out.println(this.toString() + "\tcontains super method invocation");
Comment Type: Line Comment
Comment: // System.out.println(this.toString() + "\tis synchronized");
Comment Type: Line Comment
File LOC: 274
Number of Comments: 9
Comment Percentage: 3%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\MyAbstractExpression.java
File LOC: 146
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\MyAbstractStatement.java
File LOC: 190
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\MyAttribute.java
File LOC: 112
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\MyAttributeInstruction.java
File LOC: 48
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\MyClass.java
File LOC: 110
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\MyCompositeStatement.java
File LOC: 191
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\MyMethod.java
File LOC: 187
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\MyMethodBody.java
File LOC: 83
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\MyMethodInvocation.java
File LOC: 57
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\MyStatement.java
File LOC: 10
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\distance\MySystem.java
File LOC: 174
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\history\Evolution.java
File LOC: 8
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\history\FeatureEnvyEvolution.java
File LOC: 195
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\history\MethodEvolution.java
File LOC: 151
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\history\ProjectEvolution.java
File LOC: 50
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\history\ProjectVersion.java
File LOC: 80
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\history\ProjectVersionPair.java
File LOC: 18
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\history\TypeCheckingEvolution.java
Comment: // we need bindings later on
Comment Type: Line Comment
File LOC: 274
Number of Comments: 1
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\preferences\PreferenceConstants.java
Comment: /**
 * Constant definitions for plug-in preferences
 */
Comment Type: Java Doc Comment
File LOC: 16
Number of Comments: 1
Comment Percentage: 6%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\preferences\PreferenceInitializer.java
Comment: /**
 * Class used to initialize default preference values.
 */
Comment Type: Java Doc Comment
Comment: /*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
	 */
Comment Type: Block Comment
File LOC: 22
Number of Comments: 2
Comment Percentage: 9%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\preferences\PropertyManagerPreferencePage.java
Comment: /**
 * This class represents a preference page that
 * is contributed to the Preferences dialog. By
 * subclassing <samp>FieldEditorPreferencePage</samp>, we
 * can use the field support built into JFace that allows
 * us to create a page that is small and knows how to
 * save, restore and apply itself.
 * <p>
 * This page is used to modify preferences only. They
 * are stored in the preference store that belongs to
 * the main plug-in class. That way, preferences can
 * be accessed directly via the preference store.
 */
Comment Type: Java Doc Comment
Comment: /**
 *  Creates the field editors. Field editors are abstractions of
 *  the common GUI blocks needed to manipulate various types
 *  of preferences. Each field editor knows how to save and
 *  restore itself.
 */
Comment Type: Java Doc Comment
Comment: /* (non-Javadoc)
	 * @see org.eclipse.ui.IWorkbenchPreferencePage#init(org.eclipse.ui.IWorkbench)
	 */
Comment Type: Block Comment
File LOC: 249
Number of Comments: 3
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\actions\BadSmellsMenu.java
Comment: /**
 * Our sample action implements workbench action delegate.
 * The action proxy will be created by the workbench and
 * shown in the UI. When the user tries to use the action,
 * this delegate will be created and execution will be
 * delegated to it.
 * @see IWorkbenchWindowActionDelegate
 */
Comment Type: Java Doc Comment
Comment: /**
 *  The constructor.
 */
Comment Type: Java Doc Comment
Comment: /**
 *  The action has been activated. The argument of the
 *  method represents the 'real' action sitting
 *  in the workbench UI.
 *  @see IWorkbenchWindowActionDelegate#run
 */
Comment Type: Java Doc Comment
Comment: /**
 *  Selection in the workbench has been changed. We
 *  can change the state of the 'real' action here
 *  if we want, but this can only happen after
 *  the delegate has been created.
 *  @see IWorkbenchWindowActionDelegate#selectionChanged
 */
Comment Type: Java Doc Comment
Comment: /**
 *  We can use this method to dispose of any system
 *  resources we previously allocated.
 *  @see IWorkbenchWindowActionDelegate#dispose
 */
Comment Type: Java Doc Comment
Comment: /**
 *  We will cache window object in order to
 *  be able to provide parent shell for the message dialog.
 *  @see IWorkbenchWindowActionDelegate#init
 */
Comment Type: Java Doc Comment
File LOC: 37
Number of Comments: 6
Comment Percentage: 16%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\Activator.java
Comment: /**
 * The activator class controls the plug-in life cycle
 */
Comment Type: Java Doc Comment
Comment: // The plug-in ID
Comment Type: Line Comment
Comment: // The shared instance
Comment Type: Line Comment
Comment: /**
 *  The constructor
 */
Comment Type: Java Doc Comment
Comment: /*
	 * (non-Javadoc)
	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)
	 */
Comment Type: Block Comment
Comment: /*
	 * (non-Javadoc)
	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)
	 */
Comment Type: Block Comment
Comment: /**
 *  Returns the shared instance
 *
 *  @return the shared instance
 */
Comment Type: Java Doc Comment
Comment: /**
 *  Returns an image descriptor for the image file at the given
 *  plug-in relative path
 *
 *  @param path the path
 *  @return the image descriptor
 */
Comment Type: Java Doc Comment
File LOC: 25
Number of Comments: 8
Comment Percentage: 32%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\ASTSlice.java
File LOC: 396
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\ASTSliceGroup.java
Comment: // same duplication ratio
Comment Type: Line Comment
File LOC: 83
Number of Comments: 1
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\ExtractClassRefactoring.java
Comment: // this map holds for each constructor the assignment statements that initialize final extracted fields
Comment Type: Line Comment
Comment: // this map hold the parameters that should be passed in each constructor of the extracted class
Comment Type: Line Comment
Comment: // Eclipse bug workaround: Overlapping TextEdits Exception when the x last methods of a type declaration are being removed
Comment Type: Line Comment
Comment: /*try {
								TextEdit sourceEdit = sourceRewriter.rewriteAST();
								ICompilationUnit sourceICompilationUnit = (ICompilationUnit)sourceCompilationUnit.getJavaElement();
								CompilationUnitChange change = compilationUnitChanges.get(sourceICompilationUnit);
								change.getEdit().addChild(sourceEdit);
								change.addTextEditGroup(new TextEditGroup("Change invocation of extracted method", new TextEdit[] {sourceEdit}));
							}
							catch(JavaModelException javaModelException) {
								javaModelException.printStackTrace();
							}*/
Comment Type: Block Comment
Comment: // create adjacency list
Comment Type: Line Comment
Comment: // exclude recursive invocations
Comment Type: Line Comment
Comment: // exclude recursive invocations
Comment Type: Line Comment
Comment: // invocation without expression
Comment Type: Line Comment
Comment: // non-recursive
Comment Type: Line Comment
Comment: // adding "this" prefix to avoid collisions with other parameter names
Comment Type: Line Comment
Comment: // invocation with expression
Comment Type: Line Comment
Comment: // handle recursive extracted method invocations
Comment Type: Line Comment
Comment: // invocation without expression
Comment Type: Line Comment
Comment: // recursive invocation
Comment Type: Line Comment
Comment: // adding "this" prefix to avoid collisions with other parameter names
Comment Type: Line Comment
Comment: // check if source class contains clone method
Comment Type: Line Comment
Comment: // check if there is a parameter type collision
Comment Type: Line Comment
Comment: // if an assigned field is not found in left hand side, then replace all accessed fields in left hand side
Comment Type: Line Comment
Comment: // if an assigned field is not found in operand, then replace all accessed fields in operand
Comment Type: Line Comment
Comment: // if an assigned field is not found in operand, then replace all accessed fields in operand
Comment Type: Line Comment
Comment: // targetRewriter.replace(newMethodInvocation, ast.newSimpleName(fieldName.getIdentifier()), null);
Comment Type: Line Comment
Comment: // check if it is a statically imported method
Comment Type: Line Comment
Comment: // A single-static-import declaration imports all accessible static members with a given simple name from a type.
Comment Type: Line Comment
Comment: // binding.isEqualTo(methodBinding) will not work when the static import actually imports multiple overloaded methods
Comment Type: Line Comment
Comment: // replaceThisExpressionWithSourceClassParameterInMethodInvocationArguments
Comment Type: Line Comment
Comment: // replaceThisExpressionWithSourceClassParameterInClassInstanceCreationArguments
Comment Type: Line Comment
Comment: // replaceThisExpressionWithSourceClassParameterInVariableDeclarationInitializers
Comment Type: Line Comment
Comment: // replaceThisExpressionWithSourceClassParameterInReturnStatementExpressions
Comment Type: Line Comment
Comment: // adding "this" prefix to avoid collisions with other parameter names
Comment Type: Line Comment
Comment: // adding "this" prefix to avoid collisions with other parameter names
Comment Type: Line Comment
Comment: /*try {
								TextEdit sourceEdit = sourceRewriter.rewriteAST();
								ICompilationUnit sourceICompilationUnit = (ICompilationUnit)sourceCompilationUnit.getJavaElement();
								CompilationUnitChange change = compilationUnitChanges.get(sourceICompilationUnit);
								change.getEdit().addChild(sourceEdit);
								change.addTextEditGroup(new TextEditGroup("Replace field assignment with invocation of setter method", new TextEdit[] {sourceEdit}));
							} catch (JavaModelException e) {
								e.printStackTrace();
							}*/
Comment Type: Block Comment
Comment: /*try {
								TextEdit sourceEdit = sourceRewriter.rewriteAST();
								ICompilationUnit sourceICompilationUnit = (ICompilationUnit)sourceCompilationUnit.getJavaElement();
								CompilationUnitChange change = compilationUnitChanges.get(sourceICompilationUnit);
								change.getEdit().addChild(sourceEdit);
								change.addTextEditGroup(new TextEditGroup("Replace field access with invocation of getter method", new TextEdit[] {sourceEdit}));
							} catch (JavaModelException e) {
								e.printStackTrace();
							}*/
Comment Type: Block Comment
Comment: /*for(MethodDeclaration methodDeclaration : methodDeclarationList) {
			contextMethods.addAll(getMethodDeclarationsWithinAnonymousClassDeclarations(methodDeclaration));
		}*/
Comment Type: Block Comment
Comment: // get methods of inner classes
Comment Type: Line Comment
Comment: /*for(MethodDeclaration methodDeclaration : innerMethodDeclarationList) {
				contextMethods.addAll(getMethodDeclarationsWithinAnonymousClassDeclarations(methodDeclaration));
			}*/
Comment Type: Block Comment
File LOC: 3475
Number of Comments: 35
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\ExtractClassRefactoringDescriptor.java
File LOC: 38
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\ExtractCloneRefactoring.java
Comment: /*private boolean variableIsUsedByExtractedStatement(CloneStructureNode node, PlainVariable variable) {
		PDGNodeMapping nodeMapping = (PDGNodeMapping) node.getMapping();
		List<ASTNodeDifference> differences = nodeMapping.getNodeDifferences();
		PDGNode node1 = nodeMapping.getNodeG1();
		if(!nodesToBePreservedInTheOriginalMethod.get(0).contains(node1)) {
			if(node1.usesLocalVariable(variable)) {
				boolean variableFoundInDifferences = false;
				for(ASTNodeDifference difference : differences) {
					BindingSignaturePair pair = difference.getBindingSignaturePair();
					BindingSignature signature = pair.getSignature1();
					if(signature.containsBinding(variable.getVariableBindingKey())) {
						variableFoundInDifferences = true;
					}
				}
				if(!variableFoundInDifferences) {
					return true;
				}
			}
		}
		for(CloneStructureNode child : node.getChildren()) {
			if(child.getMapping() instanceof PDGNodeMapping) {
				boolean variableIsUsedByChild = variableIsUsedByExtractedStatement(child, variable);
				if(variableIsUsedByChild) {
					return true;
				}
			}
		}
		return false;
	}

	private Map<VariableBindingKeyPair, ArrayList<VariableDeclaration>> getDeclaredLocalVariables(
			LinkedHashMap<VariableBindingKeyPair, ArrayList<PlainVariable>> declaredLocalVariables) {
		Map<VariableBindingKeyPair, ArrayList<VariableDeclaration>> declaredVariables = new LinkedHashMap<VariableBindingKeyPair, ArrayList<VariableDeclaration>>();
		Set<VariableDeclaration> variableDeclarationsAndAccessedFieldsInMethod1 = mapper.getPDG1().getVariableDeclarationsAndAccessedFieldsInMethod();
		Set<VariableDeclaration> variableDeclarationsAndAccessedFieldsInMethod2 = mapper.getPDG2().getVariableDeclarationsAndAccessedFieldsInMethod();
		for(VariableBindingKeyPair key : declaredLocalVariables.keySet()) {
			ArrayList<PlainVariable> value = declaredLocalVariables.get(key);
			PlainVariable variableDeclaration1 = value.get(0);
			PlainVariable variableDeclaration2 = value.get(1);
			ArrayList<VariableDeclaration> variableDeclarations = new ArrayList<VariableDeclaration>();
			for(VariableDeclaration variableDeclaration : variableDeclarationsAndAccessedFieldsInMethod1) {
				if(variableDeclaration.resolveBinding().getKey().equals(variableDeclaration1.getVariableBindingKey())) {
					variableDeclarations.add(variableDeclaration);
					break;
				}
			}
			for(VariableDeclaration variableDeclaration : variableDeclarationsAndAccessedFieldsInMethod2) {
				if(variableDeclaration.resolveBinding().getKey().equals(variableDeclaration2.getVariableBindingKey())) {
					variableDeclarations.add(variableDeclaration);
					break;
				}
			}
			declaredVariables.put(key, variableDeclarations);
		}
		return declaredVariables;
	}*/
Comment Type: Block Comment
Comment: /*private void processTryStatement(TryStatement tryStatement) {
		List<Statement> nestedStatements = getStatements(tryStatement);
		List<Statement> cloneStatements = new ArrayList<Statement>();
		for(PDGNodeMapping pdgNodeMapping : sortedNodeMappings) {
			PDGNode pdgNode = pdgNodeMapping.getNodeG1();
			cloneStatements.add(pdgNode.getASTStatement());
		}
		boolean allNestedStatementsAreRemovable = true;
		boolean sliceStatementThrowsException = false;
		for(Statement nestedStatement : nestedStatements) {
			if(!cloneStatements.contains(nestedStatement)) {
				allNestedStatementsAreRemovable = false;
			}
			if(cloneStatements.contains(nestedStatement)) {
				Set<ITypeBinding> thrownExceptionTypes = getThrownExceptionTypes(nestedStatement);
				if(thrownExceptionTypes.size() > 0)
					sliceStatementThrowsException = true;
			}
		}
		if(cloneStatements.contains(tryStatement)) {
			if(allNestedStatementsAreRemovable)
				tryStatementsToBeRemoved.add(tryStatement);
			else if(sliceStatementThrowsException)
				tryStatementsToBeCopied.add(tryStatement);
		}
	}*/
Comment Type: Block Comment
Comment: // this.nodesToBePreservedInTheOriginalMethod = new ArrayList<TreeSet<PDGNode>>();
Comment Type: Line Comment
Comment: // nodesToBePreservedInTheOriginalMethod.add(new TreeSet<PDGNode>());
Comment Type: Line Comment
Comment: /*StatementExtractor statementExtractor = new StatementExtractor();
		//examining the body of the first method declaration for try blocks
		List<Statement> tryStatements = statementExtractor.getTryStatements(methodDeclaration1.getBody());
		for(Statement tryStatement : tryStatements) {
			processTryStatement((TryStatement)tryStatement);
		}*/
Comment Type: Block Comment
Comment: // check if they have a common superclass
Comment Type: Line Comment
Comment: // special handling for the case the common superclass is an inner class
Comment Type: Line Comment
Comment: // we need bindings later on
Comment Type: Line Comment
Comment: // create an intermediate superclass or a utility class
Comment Type: Line Comment
Comment: // we need bindings later on
Comment Type: Line Comment
Comment: // add the implemented interfaces being common in both subclasses
Comment Type: Line Comment
Comment: // copy the constructors declared in the subclasses that contain a super-constructor call
Comment Type: Line Comment
Comment: // handle constructors existing only in the second subclass
Comment Type: Line Comment
Comment: // only for direct method calls, we allow them having parameter types with subclass type differences
Comment Type: Line Comment
Comment: /*typeBindings.add(returnType.resolveBinding());
								List<SingleVariableDeclaration> parameters = methodDeclaration1.parameters();
								for(SingleVariableDeclaration parameter : parameters) {
									typeBindings.add(parameter.getType().resolveBinding());
								}
								List<Name> thrownExceptions = methodDeclaration1.thrownExceptions();
								for(Name thrownException : thrownExceptions) {
									typeBindings.add(thrownException.resolveTypeBinding());
								}*/
Comment Type: Block Comment
Comment: // check if the pulled up method is using fields that should be also pulled up, remove fields that have been already pulled up
Comment Type: Line Comment
Comment: // static methods with the same signature, but different bodies are called. A parameter should be introduced in the extracted method
Comment Type: Line Comment
Comment: // change modifiers to protected in the subclasses
Comment Type: Line Comment
Comment: // create a default return statement
Comment Type: Line Comment
Comment: // extractedMethodName = sourceMethodDeclaration.getName().getIdentifier();
Comment Type: Line Comment
Comment: // do nothing
Comment Type: Line Comment
Comment: // do nothing
Comment Type: Line Comment
Comment: // add remaining thrown exception types that have not been found in the signatures of the method declarations
Comment Type: Line Comment
Comment: // create a default return statement at the end of the method
Comment Type: Line Comment
Comment: // add parameters for the differences between the clones
Comment Type: Line Comment
Comment: // add parameters for the fields that should be parameterized instead of being pulled up
Comment Type: Line Comment
Comment: // both methods are abstract
Comment Type: Line Comment
Comment: /*localFieldG1.getRoot().equals(sourceCompilationUnits.get(0)) && localFieldG2.getRoot().equals(sourceCompilationUnits.get(1)) &&*/
Comment Type: Block Comment
Comment: // ITypeBinding commonSuperType = commonSuperType(originalFieldDeclarationG1.getType().resolveBinding(), originalFieldDeclarationG2.getType().resolveBinding());
Comment Type: Line Comment
Comment: /*String innerTypeName = null;
						if(!originalFieldDeclarationG1.getType().resolveBinding().isEqualTo(originalFieldDeclarationG2.getType().resolveBinding())) {
							//check if the types of the fields are inner types
							TypeDeclaration innerType1 = null;
							TypeDeclaration innerType2 = null;
							for(TypeDeclaration innerType : sourceTypeDeclarations.get(0).getTypes()) {
								if(innerType.resolveBinding().isEqualTo(originalFieldDeclarationG1.getType().resolveBinding())) {
									innerType1 = innerType;
									break;
								}
							}
							for(TypeDeclaration innerType : sourceTypeDeclarations.get(1).getTypes()) {
								if(innerType.resolveBinding().isEqualTo(originalFieldDeclarationG2.getType().resolveBinding())) {
									innerType2 = innerType;
									break;
								}
							}
							if(innerType1 != null && innerType2 != null) {
								MethodDeclaration[] methodDeclarations1 = innerType1.getMethods();
								MethodDeclaration[] methodDeclarations2 = innerType2.getMethods();
								List<MethodDeclaration> methods1 = new ArrayList<MethodDeclaration>();
								for(MethodDeclaration methodDeclaration1 : methodDeclarations1) {
									if(!methodDeclaration1.isConstructor()) {
										methods1.add(methodDeclaration1);
									}
								}
								List<MethodDeclaration> methods2 = new ArrayList<MethodDeclaration>();
								for(MethodDeclaration methodDeclaration2 : methodDeclarations2) {
									if(!methodDeclaration2.isConstructor()) {
										methods2.add(methodDeclaration2);
									}
								}
								int numberOfMethods1 = methods1.size();
								int numberOfMethods2 = methods2.size();
								int equalSignatureCount = 0;
								for(MethodDeclaration method1 : methods1) {
									for(MethodDeclaration method2 : methods2) {
										if(MethodCallAnalyzer.equalSignature(method1.resolveBinding(), method2.resolveBinding())) {
											equalSignatureCount++;
											break;
										}
									}
								}
								if(numberOfMethods1 == equalSignatureCount && numberOfMethods2 == equalSignatureCount) {
									TypeDeclaration innerTypeDeclaration = ast.newTypeDeclaration();
									innerTypeName = "Intermediate" + innerType1.getName().getIdentifier();
									sourceRewriter.set(innerTypeDeclaration, TypeDeclaration.NAME_PROPERTY, ast.newSimpleName(innerTypeName), null);
									ListRewrite innerTypeModifiersRewrite = sourceRewriter.getListRewrite(innerTypeDeclaration, TypeDeclaration.MODIFIERS2_PROPERTY);
									innerTypeModifiersRewrite.insertLast(ast.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD), null);
									innerTypeModifiersRewrite.insertLast(ast.newModifier(Modifier.ModifierKeyword.ABSTRACT_KEYWORD), null);
									sourceRewriter.set(innerTypeDeclaration, TypeDeclaration.SUPERCLASS_TYPE_PROPERTY, innerType1.getSuperclassType(), null);
									Set<ITypeBinding> typeBindings = new LinkedHashSet<ITypeBinding>();
									typeBindings.add(innerType1.getSuperclassType().resolveBinding());
									RefactoringUtility.getSimpleTypeBindings(typeBindings, requiredImportTypeBindings);
									
									ListRewrite innerTypeBodyRewrite = sourceRewriter.getListRewrite(innerTypeDeclaration, TypeDeclaration.BODY_DECLARATIONS_PROPERTY);
									for(MethodDeclaration method1 : methods1) {
										MethodDeclaration innerTypeMethodDeclaration = ast.newMethodDeclaration();
										sourceRewriter.set(innerTypeMethodDeclaration, MethodDeclaration.NAME_PROPERTY, method1.getName(), null);
										sourceRewriter.set(innerTypeMethodDeclaration, MethodDeclaration.RETURN_TYPE2_PROPERTY, method1.getReturnType2(), null);
										
										List<SingleVariableDeclaration> parameters = method1.parameters();
										ListRewrite parametersRewrite = sourceRewriter.getListRewrite(innerTypeMethodDeclaration, MethodDeclaration.PARAMETERS_PROPERTY);
										for(SingleVariableDeclaration parameter : parameters) {
											parametersRewrite.insertLast(parameter, null);
										}
										List<IExtendedModifier> modifiers = method1.modifiers();
										ListRewrite modifiersRewrite = sourceRewriter.getListRewrite(innerTypeMethodDeclaration, MethodDeclaration.MODIFIERS2_PROPERTY);
										for(IExtendedModifier modifier : modifiers) {
											if(modifier instanceof Modifier)
												modifiersRewrite.insertLast((Modifier)modifier, null);
										}
										modifiersRewrite.insertLast(ast.newModifier(ModifierKeyword.ABSTRACT_KEYWORD), null);
										innerTypeBodyRewrite.insertLast(innerTypeMethodDeclaration, null);
									}
									
									ListRewrite bodyRewrite = sourceRewriter.getListRewrite(sourceTypeDeclaration, TypeDeclaration.BODY_DECLARATIONS_PROPERTY);
									bodyRewrite.insertLast(innerTypeDeclaration, null);
									
									//change the superclass of the original inner types to the new inner type
									String qualifiedInnerType = intermediateClassName != null ?
											intermediateClassName + "." + innerTypeName :
											commonSuperTypeOfSourceTypeDeclarations.getName() + "." + innerTypeName;
									modifySuperclassType(sourceCompilationUnits.get(0), innerType1, qualifiedInnerType);
									modifySuperclassType(sourceCompilationUnits.get(1), innerType2, qualifiedInnerType);
								}
							}
						}*/
Comment Type: Block Comment
Comment: // check if the common superclass is one of the source classes
Comment Type: Line Comment
Comment: /*if(originalFieldDeclarationG1.getType().resolveBinding().isEqualTo(originalFieldDeclarationG2.getType().resolveBinding())) {
									sourceRewriter.set(newFieldDeclaration, FieldDeclaration.TYPE_PROPERTY, originalFieldDeclarationG1.getType(), null);
								}
								else if(innerTypeName != null) {
									Name typeName = ast.newName(innerTypeName);
									sourceRewriter.set(newFieldDeclaration, FieldDeclaration.TYPE_PROPERTY, ast.newSimpleType(typeName), null);
								}
								else {
									Name typeName = ast.newName(commonSuperType.getQualifiedName());
									sourceRewriter.set(newFieldDeclaration, FieldDeclaration.TYPE_PROPERTY, ast.newSimpleType(typeName), null);
								}*/
Comment Type: Block Comment
Comment: // if the fields are both modified and used, then they should be replaced with getter calls, instead of being parameterized
Comment Type: Line Comment
Comment: // create abstract getter methods in the common superclass for the accessed fields that need to be serialized
Comment Type: Line Comment
Comment: // check if the common superclass is one of the source classes
Comment Type: Line Comment
Comment: // create abstract setter methods in the common superclass for the modified fields that need to be serialized
Comment Type: Line Comment
Comment: /*TreeSet<PDGNode> nodesToBePreservedInTheOriginalMethod1 = nodesToBePreservedInTheOriginalMethod.get(0);
		ArrayList<PDGNode> nodesToBePreservedInTheOriginalMethod2 = new ArrayList<PDGNode>(nodesToBePreservedInTheOriginalMethod.get(1));
		LinkedHashMap<VariableBindingKeyPair, ArrayList<PlainVariable>> declaredLocalVariables =
				new LinkedHashMap<VariableBindingKeyPair, ArrayList<PlainVariable>>();
		int counter = 0;
		for(PDGNode nodeG1 : nodesToBePreservedInTheOriginalMethod1) {
			PDGNode nodeG2 = nodesToBePreservedInTheOriginalMethod2.get(counter);
			List<AbstractVariable> nonAnonymousDeclaredVariablesG1 = new ArrayList<AbstractVariable>();
			Iterator<AbstractVariable> declaredVariableIteratorG1 = nodeG1.getDeclaredVariableIterator();
			while(declaredVariableIteratorG1.hasNext()) {
				AbstractVariable declaredVariableG1 = declaredVariableIteratorG1.next();
				String key1 = declaredVariableG1.getVariableBindingKey();
				String declaringType1 = key1.substring(0, key1.indexOf(";"));
				if(!declaringType1.contains("$")) {
					nonAnonymousDeclaredVariablesG1.add(declaredVariableG1);
				}
			}
			List<AbstractVariable> nonAnonymousDeclaredVariablesG2 = new ArrayList<AbstractVariable>();
			Iterator<AbstractVariable> declaredVariableIteratorG2 = nodeG2.getDeclaredVariableIterator();
			while(declaredVariableIteratorG2.hasNext()) {
				AbstractVariable declaredVariableG2 = declaredVariableIteratorG2.next();
				String key2 = declaredVariableG2.getVariableBindingKey();
				String declaringType2 = key2.substring(0, key2.indexOf(";"));
				if(!declaringType2.contains("$")) {
					nonAnonymousDeclaredVariablesG2.add(declaredVariableG2);
				}
			}
			int min = Math.min(nonAnonymousDeclaredVariablesG1.size(), nonAnonymousDeclaredVariablesG2.size());
			for(int i=0; i<min; i++) {
				AbstractVariable declaredVariableG1 = nonAnonymousDeclaredVariablesG1.get(i);
				AbstractVariable declaredVariableG2 = nonAnonymousDeclaredVariablesG2.get(i);
				if(declaredVariableG1 instanceof PlainVariable && declaredVariableG2 instanceof PlainVariable) {
					ArrayList<PlainVariable> declaredVariables = new ArrayList<PlainVariable>();
					declaredVariables.add((PlainVariable)declaredVariableG1);
					declaredVariables.add((PlainVariable)declaredVariableG2);
					VariableBindingKeyPair keyPair = new VariableBindingKeyPair(declaredVariableG1.getVariableBindingKey(),
							declaredVariableG2.getVariableBindingKey());
					declaredLocalVariables.put(keyPair, declaredVariables);
				}
			}
			counter++;
			Statement statement = nodeG1.getASTStatement();
			cloneInfo.methodBodyRewrite.remove(statement, null);
		}
		Set<VariableBindingKeyPair> variableBindingKeyPairsToBePassedAsParameters = new LinkedHashSet<VariableBindingKeyPair>();
		for(VariableBindingKeyPair key : declaredLocalVariables.keySet()) {
			ArrayList<PlainVariable> variables = declaredLocalVariables.get(key);
			PlainVariable plainVariable = variables.get(0);
			CloneStructureNode root = mapper.getCloneStructureRoot();
			for(CloneStructureNode child : root.getChildren()) {
				if(child.getMapping() instanceof PDGNodeMapping) {
					boolean variableIsUsedByChild = variableIsUsedByExtractedStatement(child, plainVariable);
					if(variableIsUsedByChild) {
						variableBindingKeyPairsToBePassedAsParameters.add(key);
					}
				}
			}
		}
		Map<VariableBindingKeyPair, ArrayList<VariableDeclaration>> localVariables = getDeclaredLocalVariables(declaredLocalVariables);
		for(VariableBindingKeyPair key : variableBindingKeyPairsToBePassedAsParameters) {
			ArrayList<VariableDeclaration> variables = localVariables.get(key);
			VariableDeclaration variableDeclaration1 = variables.get(0);
			VariableDeclaration variableDeclaration2 = variables.get(1);
			SimpleName variableName = variableDeclaration1.getName();
			ITypeBinding typeBinding = variableName.resolveTypeBinding();
			Type variableType = generateTypeFromTypeBinding(typeBinding, cloneInfo.ast, cloneInfo.sourceRewriter);
			SingleVariableDeclaration parameter = cloneInfo.ast.newSingleVariableDeclaration();
			cloneInfo.sourceRewriter.set(parameter, SingleVariableDeclaration.NAME_PROPERTY, variableName, null);
			cloneInfo.sourceRewriter.set(parameter, SingleVariableDeclaration.TYPE_PROPERTY, variableType, null);
			cloneInfo.parameterRewrite.insertLast(parameter, null);
			//modify the arguments of the method calls to the extracted method
			cloneInfo.argumentRewriteList.get(0).insertLast(variableDeclaration1.getName(), null);
			cloneInfo.argumentRewriteList.get(1).insertLast(variableDeclaration2.getName(), null);
		}*/
Comment Type: Block Comment
Comment: // create initializer for passed parameter
Comment Type: Line Comment
Comment: // special handling for an if/else matched with a ternary operator
Comment Type: Line Comment
Comment: // special handling for an if/else matched with a ternary operator
Comment Type: Line Comment
Comment: // do nothing
Comment Type: Line Comment
Comment: // do nothing
Comment Type: Line Comment
Comment: // the invokers are the same
Comment Type: Line Comment
Comment: // the arguments are the same
Comment Type: Line Comment
Comment: // do nothing
Comment Type: Line Comment
Comment: // do nothing
Comment Type: Line Comment
Comment: // the invokers are the same
Comment Type: Line Comment
Comment: // check if there is already a constructor declared with the same signature as the super constructor call
Comment Type: Line Comment
Comment: /*TreeSet<PDGNode> nodesToBeRemoved = new TreeSet<PDGNode>();
		for(PDGNode pdgNode : removableNodes) {
			boolean declaresParameterizedVariable = false;
			Iterator<AbstractVariable> declaredVariableIterator = pdgNode.getDeclaredVariableIterator();
			while(declaredVariableIterator.hasNext()) {
				AbstractVariable variable = declaredVariableIterator.next();
				if(variable instanceof PlainVariable) {
					PlainVariable plainVariable = (PlainVariable)variable;
					for(BindingSignaturePair bindingSignaturePair : parameterizedDifferenceMap.keySet()) {
						BindingSignature bindingSignature = null;
						if(index == 0) {
							bindingSignature = bindingSignaturePair.getSignature1();
						}
						else if(index == 1) {
							bindingSignature = bindingSignaturePair.getSignature2();
						}
						if(bindingSignature != null && bindingSignature.containsOnlyBinding(plainVariable.getVariableBindingKey())) {
							declaresParameterizedVariable = true;
							break;
						}
					}
				}
			}
			if(!declaresParameterizedVariable) {
				nodesToBeRemoved.add(pdgNode);
			}
			else {
				nodesToBePreservedInTheOriginalMethod.get(index).add(pdgNode);
			}
		}*/
Comment Type: Block Comment
Comment: // create initializer for passed parameter
Comment Type: Line Comment
Comment: // check if the field is private and declared in another class
Comment Type: Line Comment
Comment: // place the code in the parent block of the first removable node
Comment Type: Line Comment
Comment: /*nodesToBeRemoved*/
Comment Type: Block Comment
Comment: // first statement is directly nested under an else or an if clause
Comment Type: Line Comment
Comment: // create an assignment statement
Comment Type: Line Comment
Comment: // create a variable declaration statement
Comment Type: Line Comment
Comment: /*if(nodesToBePreservedInTheOriginalMethod.get(index).isEmpty()) {
				blockRewrite.insertBefore(methodInvocationStatement, firstStatement, null);
			}
			else {
				Statement lastPreservedStatement = nodesToBePreservedInTheOriginalMethod.get(index).last().getASTStatement();
				blockRewrite.insertAfter(methodInvocationStatement, lastPreservedStatement, null);
			}*/
Comment Type: Block Comment
Comment: /*if(nodesToBePreservedInTheOriginalMethod.get(index).isEmpty()) {
				blockRewrite.insertBefore(methodInvocationStatement, firstStatement, null);
			}
			else {
				Statement lastPreservedStatement = nodesToBePreservedInTheOriginalMethod.get(index).last().getASTStatement();
				blockRewrite.insertAfter(methodInvocationStatement, lastPreservedStatement, null);
			}*/
Comment Type: Block Comment
Comment: /*nodesToBeRemoved*/
Comment Type: Block Comment
File LOC: 4183
Number of Comments: 59
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\ExtractCloneRefactoringDescriptor.java
File LOC: 22
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\ExtractMethodFragmentRefactoring.java
Comment: // handling of LabeledStatement
Comment Type: Line Comment
Comment: // handling of SynchronizedStatement
Comment Type: Line Comment
Comment: /*List<CatchClause> catchClauses = tryStatement.catchClauses();
			for(CatchClause catchClause : catchClauses) {
				statementList.addAll(getStatements(catchClause.getBody()));
			}
			Block finallyBlock = tryStatement.getFinally();
			if(finallyBlock != null)
				statementList.addAll(getStatements(finallyBlock));*/
Comment Type: Block Comment
File LOC: 548
Number of Comments: 3
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\ExtractMethodRefactoring.java
Comment: // variable criterion is field, parameter, or local variable whose declaration does not belong to slice nodes
Comment Type: Line Comment
File LOC: 393
Number of Comments: 1
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\ExtractMethodRefactoringDescriptor.java
File LOC: 23
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\MoveMethodRefactoring.java
Comment: // removes also additional methods used only by the moved method
Comment Type: Line Comment
File LOC: 1702
Number of Comments: 1
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\MoveMethodRefactoringDescriptor.java
File LOC: 39
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\PolymorphismRefactoring.java
File LOC: 988
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\RefactoringUtility.java
Comment: // fragment was not found in typeDeclaration
Comment Type: Line Comment
Comment: // fragment was not found in typeDeclaration
Comment Type: Line Comment
Comment: // fragment was not found in typeDeclaration
Comment Type: Line Comment
Comment: // method was not found in typeDeclaration
Comment Type: Line Comment
File LOC: 402
Number of Comments: 4
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\ReplaceConditionalWithPolymorphism.java
Comment: // we need bindings later on
Comment Type: Line Comment
Comment: // we need bindings later on
Comment Type: Line Comment
Comment: // we need bindings later on
Comment Type: Line Comment
Comment: // we need bindings later on
Comment Type: Line Comment
Comment: // special handling if the inner classes are nested within the superclass
Comment Type: Line Comment
File LOC: 991
Number of Comments: 5
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\ReplaceConditionalWithPolymorphismDescriptor.java
File LOC: 29
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\ReplaceTypeCodeWithStateStrategy.java
Comment: // we need bindings later on
Comment Type: Line Comment
Comment: // we need bindings later on
Comment Type: Line Comment
Comment: // we need bindings later on
Comment Type: Line Comment
Comment: // we need bindings later on
Comment Type: Line Comment
Comment: /*for(MethodDeclaration methodDeclaration : methodDeclarationList) {
			contextMethods.addAll(getMethodDeclarationsWithinAnonymousClassDeclarations(methodDeclaration));
		}*/
Comment Type: Block Comment
Comment: // get methods of inner classes
Comment Type: Line Comment
Comment: /*for(MethodDeclaration methodDeclaration : innerMethodDeclarationList) {
				contextMethods.addAll(getMethodDeclarationsWithinAnonymousClassDeclarations(methodDeclaration));
			}*/
Comment Type: Block Comment
File LOC: 2910
Number of Comments: 7
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\ReplaceTypeCodeWithStateStrategyDescriptor.java
File LOC: 29
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\TypeCheckElimination.java
Comment: // check if the type-check code fragment contains return statements having an expression
Comment Type: Line Comment
Comment: // get all return statements having an expression within method body
Comment Type: Line Comment
File LOC: 1125
Number of Comments: 2
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\manipulators\TypeCheckEliminationGroup.java
File LOC: 106
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\CloneDiffContentProvider.java
File LOC: 24
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\CloneDiffSide.java
File LOC: 4
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\CloneDiffStyledLabelProvider.java
Comment: // Constructor specifies which mapping position this provider will be working with and generated Regex based on the keywords
Comment Type: Line Comment
Comment: // Primary Method for all Styling
Comment Type: Line Comment
Comment: // Get Node
Comment Type: Line Comment
Comment: /*
		Image image = new Image(null, "C:\\Users\\ra_stein\\Pictures\\xicon3.png");
		cell.setImage(image);
		*/
Comment Type: Block Comment
Comment: // This creates a blank Label containing only spaces, to match the length of the corresponding Gap statement.
Comment Type: Line Comment
Comment: // This creates a blank Label containing only spaces, to match the length of the corresponding Gap statement.
Comment Type: Line Comment
Comment: // This creates a blank Label containing only spaces, to match the length of the corresponding Gap statement.
Comment Type: Line Comment
Comment: // This creates a blank Label containing only spaces, to match the length of the corresponding Gap statement.
Comment Type: Line Comment
Comment: // Tooltip
Comment Type: Line Comment
Comment: // element.toString();
Comment Type: Line Comment
File LOC: 150
Number of Comments: 10
Comment Percentage: 6%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\CloneDiffTooltip.java
Comment: // Prepare Formatted Header Text
Comment Type: Line Comment
Comment: // Construct list of Precondition Violation
Comment Type: Line Comment
Comment: // First Statement
Comment Type: Line Comment
Comment: // Second Statement
Comment Type: Line Comment
Comment: // Include Statement IDs and put StyledStrings into StyledText labels
Comment Type: Line Comment
Comment: // Differences Label and Table
Comment Type: Line Comment
Comment: // tableData.heightHint = 50;
Comment Type: Line Comment
Comment: // Eliminates extra column at the end
Comment Type: Line Comment
Comment: // Precondition Violations
Comment Type: Line Comment
Comment: // Resize last column in Table viewer so that it fills the client area completely if extra space.
Comment Type: Line Comment
Comment: // Subtract the scrollbar width from the total column width
Comment Type: Line Comment
Comment: // if a vertical scrollbar will be required
Comment Type: Line Comment
Comment: // last column is packed, so that is the minimum. If more space is available, add it.
Comment Type: Line Comment
File LOC: 217
Number of Comments: 13
Comment Percentage: 5%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\CloneDiffWizardPage.java
Comment: // Special Boolean for selection synchronization listeners
Comment Type: Line Comment
Comment: // gridLayout.numColumns = 6;
Comment Type: Line Comment
Comment: // gridLayout.horizontalSpacing = 15;
Comment Type: Line Comment
Comment: // gridLayout.marginLeft = 15;
Comment Type: Line Comment
Comment: // Information Footer
Comment Type: Line Comment
Comment: // gridLayout.marginRight = 15;
Comment Type: Line Comment
Comment: // GridData
Comment Type: Line Comment
Comment: // treeLeftGridData.verticalSpan = 2;
Comment Type: Line Comment
Comment: // GridData
Comment Type: Line Comment
Comment: // treeRightGridData.verticalSpan = 2;
Comment Type: Line Comment
Comment: // Legend
Comment Type: Line Comment
Comment: // Unmapped Statements Label
Comment Type: Line Comment
Comment: // Unmapped Statements Label
Comment Type: Line Comment
Comment: // Selection Listeners - Synchronize Selections
Comment Type: Line Comment
Comment: // Synchronize Expands and Collapses
Comment Type: Line Comment
Comment: // Synchronize Vertical ScrollBars
Comment Type: Line Comment
Comment: // setTopItem(treeViewerLeft.getTree().getTopItem());
Comment Type: Line Comment
Comment: // Synchronize Horizontal ScrollBars
Comment Type: Line Comment
File LOC: 335
Number of Comments: 18
Comment Percentage: 5%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\CloneRefactoringAction.java
Comment: // CompilationUnitCache.getInstance().releaseLock();
Comment Type: Line Comment
Comment: // $NON-NLS-1$
Comment Type: Line Comment
File LOC: 188
Number of Comments: 2
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\CodeSmellPackageExplorer.java
Comment: // preinitializing DecorationConstants
Comment Type: Line Comment
Comment: // figureCanvas.setViewport(new FreeformViewport());
Comment Type: Line Comment
Comment: // addActionToMenu(menu, newZoomAction(0));
Comment Type: Line Comment
Comment: // DisposeListener to uninstall the information control manager
Comment Type: Line Comment
Comment: // Install tooltips
Comment Type: Line Comment
Comment: // Tooltips.install(diagram.getControl(), informationProvider, informationControlCreators, false);
Comment Type: Line Comment
Comment: // Create an information provider for our table viewer
Comment Type: Line Comment
Comment: // MouseListener to show the information when the user hovers a table item
Comment Type: Line Comment
File LOC: 226
Number of Comments: 8
Comment Percentage: 3%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\CodeSmellVisualization.java
Comment: // Custom Action for the View's Menu
Comment Type: Line Comment
File LOC: 150
Number of Comments: 1
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\CodeSmellVisualizationDataSingleton.java
File LOC: 19
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\DuplicatedCode.java
Comment: // 
Comment Type: Line Comment
Comment: // layoutData.heightHint = 18;
Comment Type: Line Comment
Comment: // $NON-NLS-1$
Comment Type: Line Comment
File LOC: 809
Number of Comments: 3
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\ElementChangedListener.java
File LOC: 45
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\EvolutionDialog.java
File LOC: 132
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\EvolutionRow.java
File LOC: 16
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\ExtractClassInputPage.java
File LOC: 142
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\ExtractMethodInputPage.java
File LOC: 95
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\FeatureEnvy.java
Comment: /**
 * This sample class demonstrates how to plug-in a new
 * workbench view. The view shows data obtained from the
 * model. The sample creates a dummy model on the fly,
 * but a real implementation would connect to the model
 * available either in this or another plug-in (e.g. the workspace).
 * The view is connected to the model using a content provider.
 * <p>
 * The view uses a label provider to define how model
 * objects should be presented in the view. Each
 * view can present the same model objects using
 * different labels and icons, if needed. Alternatively,
 * a single label provider can be shared between views
 * in order to ensure that objects of the same type are
 * presented in the same way everywhere.
 * <p>
 */
Comment Type: Java Doc Comment
Comment: // private FeatureEnvyEvolution featureEnvyEvolution;
Comment Type: Line Comment
Comment: /*
	 * The content provider class is responsible for
	 * providing objects to the view. It can wrap
	 * existing objects in adapters or simply return
	 * objects as-is. These objects may be sensitive
	 * to the current input of the view, or ignore
	 * it and always show the same content 
	 * (like Task List, for example).
	 */
Comment Type: Block Comment
Comment: // private Action evolutionAnalysisAction;
Comment Type: Line Comment
Comment: /*if(candidateRefactoringTable != null)
						tableViewer.remove(candidateRefactoringTable);*/
Comment Type: Block Comment
Comment: /**
 *  This is a callback that will allow us
 *  to create the viewer and initialize it.
 */
Comment Type: Java Doc Comment
Comment: // evolutionAnalysisAction.setEnabled(false);
Comment Type: Line Comment
Comment: // manager.add(evolutionAnalysisAction);
Comment Type: Line Comment
Comment: /*evolutionAnalysisAction = new Action() {
			public void run() {
				featureEnvyEvolution = null;
				IStructuredSelection selection = (IStructuredSelection)tableViewer.getSelection();
				CandidateRefactoring entry = (CandidateRefactoring)selection.getFirstElement();
				if(entry instanceof MoveMethodCandidateRefactoring) {
					final MoveMethodCandidateRefactoring moveMethodRefactoring = (MoveMethodCandidateRefactoring)entry;
					try {
						IWorkbench wb = PlatformUI.getWorkbench();
						IProgressService ps = wb.getProgressService();
						ps.busyCursorWhile(new IRunnableWithProgress() {
							public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
								ProjectEvolution projectEvolution = new ProjectEvolution(selectedProject);
								if(projectEvolution.getProjectEntries().size() > 1) {
									featureEnvyEvolution = new FeatureEnvyEvolution(projectEvolution, moveMethodRefactoring, monitor);
								}
							}
						});
						if(featureEnvyEvolution != null) {
							EvolutionDialog dialog = new EvolutionDialog(getSite().getWorkbenchWindow(), featureEnvyEvolution, "Feature Envy Evolution", false);
							dialog.open();
						}
						else
							MessageDialog.openInformation(getSite().getShell(), "Feature Envy Evolution",
									"Feature Envy evolution analysis cannot be performed, since only a single version of the examined project is loaded in the workspace.");
					} catch (InvocationTargetException e) {
						e.printStackTrace();
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		};
		evolutionAnalysisAction.setToolTipText("Evolution Analysis");
		evolutionAnalysisAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().
				getImageDescriptor(ISharedImages.IMG_OBJ_ELEMENT));
		evolutionAnalysisAction.setEnabled(false);*/
Comment Type: Block Comment
Comment: // close the Code Smell Package Explorer, if it is already open
Comment Type: Line Comment
Comment: // evolutionAnalysisAction.setEnabled(true);
Comment Type: Line Comment
Comment: // open the Code Smell Package Explorer only if it is closed
Comment Type: Line Comment
Comment: /* || !CodeSmellPackageExplorer.CODE_SMELL_TYPE.equals(CodeSmellType.FEATURE_ENVY)*/
Comment Type: Block Comment
Comment: // $NON-NLS-1$
Comment Type: Line Comment
Comment: /**
 *  Passing the focus request to the viewer's control.
 */
Comment Type: Java Doc Comment
Comment: /* && candidateRefactoring.getTarget().equals(candidate.getTarget())*/
Comment Type: Block Comment
Comment: // public static final String HEADER_BG_COLOR = Policy.JFACE + ".TOOLTIP_HEAD_BG_COLOR";
Comment Type: Line Comment
Comment: // public static final String HEADER_FG_COLOR = Policy.JFACE + ".TOOLTIP_HEAD_FG_COLOR";
Comment Type: Line Comment
Comment: // label.setForeground(JFaceResources.getColorRegistry().get(HEADER_FG_COLOR));
Comment Type: Line Comment
File LOC: 779
Number of Comments: 19
Comment Percentage: 2%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\GodClass.java
Comment: /**
 * This sample class demonstrates how to plug-in a new
 * workbench view. The view shows data obtained from the
 * model. The sample creates a dummy model on the fly,
 * but a real implementation would connect to the model
 * available either in this or another plug-in (e.g. the workspace).
 * The view is connected to the model using a content provider.
 * <p>
 * The view uses a label provider to define how model
 * objects should be presented in the view. Each
 * view can present the same model objects using
 * different labels and icons, if needed. Alternatively,
 * a single label provider can be shared between views
 * in order to ensure that objects of the same type are
 * presented in the same way everywhere.
 * <p>
 */
Comment Type: Java Doc Comment
Comment: /*if(candidateRefactoringTable != null)
						tableViewer.remove(candidateRefactoringTable);*/
Comment Type: Block Comment
Comment: /**
 *  The constructor.
 */
Comment Type: Java Doc Comment
Comment: /**
 *  This is a callback that will allow us
 *  to create the viewer and initialize it.
 */
Comment Type: Java Doc Comment
Comment: // open the Code Smell Package Explorer only if it is closed
Comment Type: Line Comment
Comment: /* || !CodeSmellPackageExplorer.CODE_SMELL_TYPE.equals(CodeSmellType.GOD_CLASS)*/
Comment Type: Block Comment
Comment: // $NON-NLS-1$
Comment Type: Line Comment
Comment: /**
 *  Passing the focus request to the viewer's control.
 */
Comment Type: Java Doc Comment
Comment: /*TreeColumn[] columns = tree.getColumns();
				for(int i=0; i<columns.length; i++) {
					if(i == columns.length-1)
						out.write(columns[i].getText());
					else
						out.write(columns[i].getText() + "\t");
				}
				out.newLine();*/
Comment Type: Block Comment
File LOC: 814
Number of Comments: 9
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\ImportClonesWizard.java
File LOC: 111
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\ImportClonesWizardPage.java
Comment: // secondary directory input - only for CCFinder
Comment Type: Line Comment
File LOC: 170
Number of Comments: 1
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\LabelControlContribution.java
File LOC: 31
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\LongMethod.java
Comment: // private MethodEvolution methodEvolution;
Comment Type: Line Comment
Comment: // private Action evolutionAnalysisAction;
Comment Type: Line Comment
Comment: /*case 1:
					String declaringClass = entry.getSourceTypeDeclaration().resolveBinding().getQualifiedName();
					String methodName = entry.getSourceMethodDeclaration().resolveBinding().toString();
					return declaringClass + "::" + methodName;
				case 2:
					return entry.getLocalVariableCriterion().getName().getIdentifier();*/
Comment Type: Block Comment
Comment: // slices belong to the same group
Comment Type: Line Comment
Comment: /*if(sliceTable != null)
						tableViewer.remove(sliceTable);*/
Comment Type: Block Comment
Comment: // evolutionAnalysisAction.setEnabled(false);
Comment Type: Line Comment
Comment: // manager.add(evolutionAnalysisAction);
Comment Type: Line Comment
Comment: /*evolutionAnalysisAction = new Action() {
			public void run() {
				methodEvolution = null;
				IStructuredSelection selection = (IStructuredSelection)treeViewer.getSelection();
				if(selection.getFirstElement() instanceof ASTSlice) {
					final ASTSlice slice = (ASTSlice)selection.getFirstElement();
					try {
						IWorkbench wb = PlatformUI.getWorkbench();
						IProgressService ps = wb.getProgressService();
						ps.busyCursorWhile(new IRunnableWithProgress() {
							public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
								ProjectEvolution projectEvolution = new ProjectEvolution(selectedProject);
								if(projectEvolution.getProjectEntries().size() > 1) {
									methodEvolution = new MethodEvolution(projectEvolution, (IMethod)slice.getSourceMethodDeclaration().resolveBinding().getJavaElement(), monitor);
								}
							}
						});
						if(methodEvolution != null) {
							EvolutionDialog dialog = new EvolutionDialog(getSite().getWorkbenchWindow(), methodEvolution, "Method Evolution", false);
							dialog.open();
						}
						else
							MessageDialog.openInformation(getSite().getShell(), "Method Evolution",
							"Method evolution analysis cannot be performed, since only a single version of the examined project is loaded in the workspace.");
					} catch (InvocationTargetException e) {
						e.printStackTrace();
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		};
		evolutionAnalysisAction.setToolTipText("Evolution Analysis");
		evolutionAnalysisAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().
			getImageDescriptor(ISharedImages.IMG_OBJ_ELEMENT));
		evolutionAnalysisAction.setEnabled(false);*/
Comment Type: Block Comment
Comment: // evolutionAnalysisAction.setEnabled(true);
Comment Type: Line Comment
Comment: // $NON-NLS-1$
Comment Type: Line Comment
Comment: /*TreeColumn[] columns = tree.getColumns();
        		for(int i=0; i<columns.length; i++) {
        			if(i == columns.length-1)
        				out.write(columns[i].getText());
        			else
        				out.write(columns[i].getText() + "\t");
        		}
        		out.newLine();*/
Comment Type: Block Comment
File LOC: 789
Number of Comments: 11
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\MethodEvolutionAction.java
File LOC: 59
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\MethodNameValidator.java
File LOC: 13
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\MoveMethodInputPage.java
File LOC: 88
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\MultilineButton.java
File LOC: 27
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\MyComboBoxCellEditor.java
File LOC: 21
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\MyRefactoringWizard.java
File LOC: 70
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\ReplaceTypeCodeWithStateStrategyInputPage.java
File LOC: 171
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\SliceAnnotation.java
File LOC: 9
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\SliceProfileAction.java
Comment: // if(method.isConstructor())
Comment Type: Line Comment
Comment: // MessageDialog.openInformation(part.getSite().getShell(), MESSAGE_DIALOG_TITLE, "The selected method corresponds to a constructor.");
Comment Type: Line Comment
File LOC: 110
Number of Comments: 2
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\SliceProfileDialog.java
File LOC: 334
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\SliceProfileRow.java
File LOC: 31
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\StringCompareEditorInput.java
File LOC: 46
Number of Comments: 0
Comment Percentage: 0%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\StyledStringStyler.java
Comment: /*
 * This class provides the ability to append Stylers on top of one another
 * and also is used as the Styler class for StyledStringVisitor as it appends
 * text to its StyledString object.
 * 
 */
Comment Type: Block Comment
Comment: /*
	 * When appending TextStyles, the TextStyle which changes the font should always be appended last. This is because the new font always 
	 * overrides the old font - unless the new font is null. However, for other attributes, the new attribute only overrides the old attribute
	 * if the old attribute is set to "null" or its default setting ("0" or "false").
	 */
Comment Type: Block Comment
Comment: /*
		Field[] textStyleFields = TextStyle.class.getFields();
		for (Field field : textStyleFields){
			Object currentField;
			try {
				//CurrentField is the value of the attribute textStyleAttributeStyle for the given field. If it is null, we will allow it to be overridden by the value
				//of the corresponding field of the parameter. 
				currentField = field.get(textStyleAttributeStyle);
				//Check either if the field is null, a boolean that is false, or a primitive that is zero - all of which would mean we override.
				if ((currentField == null || (field.getType() == boolean.class && ((Boolean.FALSE.equals(field.get(currentField))))) || (field.getType().isPrimitive() && ((Number) currentField).doubleValue() == 0))){
					try {
						field.set(textStyleAttributeStyle, field.get(textStyle));
					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					}
				}
			} catch (IllegalArgumentException e1) {
				e1.printStackTrace();
			} catch (IllegalAccessException e1) {
				e1.printStackTrace();
			}
		}
		*/
Comment Type: Block Comment
Comment: // If new font is not null, always replace the old one with it
Comment Type: Line Comment
File LOC: 76
Number of Comments: 4
Comment Percentage: 5%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\StyledStringVisitor.java
Comment: // The main field, to which all the text is appended.
Comment Type: Line Comment
Comment: // TextStyle Experiment
Comment Type: Line Comment
Comment: // TextStyle Experiment
Comment Type: Line Comment
Comment: // Use the List of ASTNodeDifferences to recover actual ASTNodes and place them into a new list
Comment Type: Line Comment
Comment: // Visit Methods
Comment Type: Line Comment
Comment: /*
		 * Expression [ Expression ]
		 */
Comment Type: Block Comment
Comment: /*
		 	new PrimitiveType [ Expression ] { [ Expression ] } { [ ] }
    		new TypeName [ < Type { , Type } > ] [ Expression ] { [ Expression ] } { [ ] }
    		new PrimitiveType [ ] { [ ] } ArrayInitializer
    		new TypeName [ < Type { , Type } > ] [ ] { [ ] } ArrayInitializer
		 */
Comment Type: Block Comment
Comment: /*
		 * ArrayInitializer: { [ Expression { , Expression} [ , ]] }
		 */
Comment Type: Block Comment
Comment: /*
		 * ArrayType: Type [ ]
		 */
Comment Type: Block Comment
Comment: /*
		 * assert Expression [ : Expression ] ;
		 */
Comment Type: Block Comment
Comment: /*
		 * Assignment: Expression AssignmentOperator Expression
		 */
Comment Type: Block Comment
Comment: /*
		 * { { Statement } }
		 */
Comment Type: Block Comment
Comment: /*
		 * BooleanLiteral: true
                           false
		 */
Comment Type: Block Comment
Comment: /*
		 * break [ Identifier ] ;
		 */
Comment Type: Block Comment
Comment: /*
		 * CastExpression: ( Type ) Expression
		 */
Comment Type: Block Comment
Comment: /*
		 * Character literal nodes
		 */
Comment Type: Block Comment
Comment: /*
		 * 
		 * [ Expression . ] new [ < Type { , Type } > ] Type ( [ Expression { ,
		 * Expression } ] ) [ AnonymousClassDeclaration ]
		 */
Comment Type: Block Comment
Comment: /*
		 * ConditionalExpression: Expression ? Expression : Expression
		 */
Comment Type: Block Comment
Comment: /*
		 *  [ < Type { , Type } > ]
                      this ( [ Expression { , Expression } ] ) ;
		 */
Comment Type: Block Comment
Comment: /*
		 * continue [ Identifier ] ;
		 */
Comment Type: Block Comment
Comment: /*
		 * do Statement while ( Expression ) ;
		 */
Comment Type: Block Comment
Comment: /*
		 * EmptyStatement: ;
		 */
Comment Type: Block Comment
Comment: /*
		 *  for ( FormalParameter : Expression )
                        Statement
		 */
Comment Type: Block Comment
Comment: /*
		 * ExpressionStatement: StatementExpression ;
		 */
Comment Type: Block Comment
Comment: /*
		 * for (
                        [ ForInit ];
                        [ Expression ] ;
                        [ ForUpdate ] )
                        Statement
		 */
Comment Type: Block Comment
Comment: // Handle Initializers
Comment Type: Line Comment
Comment: // Handle Updaters
Comment Type: Line Comment
Comment: /*
		 * FieldAccess: Expression . Identifier
		 */
Comment Type: Block Comment
Comment: /*
		 * if ( Expression ) Statement [ else Statement]
		 */
Comment Type: Block Comment
Comment: /*
		 * InfixExpression: Expression InfixOperator Expression { InfixOperator Expression }
		 */
Comment Type: Block Comment
Comment: /*
		 * InstanceofExpression: Expression instanceof Type
		 */
Comment Type: Block Comment
Comment: /*
		 * Identifier : Statement
		 */
Comment Type: Block Comment
Comment: /*
		 * MarkerAnnotation: @ TypeName
		 */
Comment Type: Block Comment
Comment: /*
		 * MemberValuePair: SimpleName = Expression
		 */
Comment Type: Block Comment
Comment: /*
		 * MethodInvocation: [ Expression . ]
		                     [ < Type { , Type } > ]
		                     Identifier ( [ Expression { , Expression } ] )
		 */
Comment Type: Block Comment
Comment: /*
		 * public protected private static abstract final native synchronized transient volatile strictfp
		 */
Comment Type: Block Comment
Comment: /*
		 * NormalAnnotation: @ TypeName ( [ MemberValuePair { , MemberValuePair } ] )
		 */
Comment Type: Block Comment
Comment: /*
		 * null
		 */
Comment Type: Block Comment
Comment: /*
		 * Number literal nodes.
		 */
Comment Type: Block Comment
Comment: /*
		 * ParameterizedType: Type < Type { , Type } >
		 */
Comment Type: Block Comment
Comment: /*
		 * ParenthesizedExpression: ( Expression )
		 */
Comment Type: Block Comment
Comment: /*
		 * PostfixExpression: Expression PostfixOperator
		 */
Comment Type: Block Comment
Comment: /*
		 * PrefixExpression: PrefixOperator Expression
		 */
Comment Type: Block Comment
Comment: /*
		 * PrimitiveType: 
		    byte
		    short
		    char
		    int
		    long
		    float
		    double
		    boolean
		    void
		 */
Comment Type: Block Comment
Comment: /*
		 * Name . SimpleName
		 */
Comment Type: Block Comment
Comment: /*
		 * QualifiedType: Type . SimpleName
		 */
Comment Type: Block Comment
Comment: /*
		 * ReturnStatement: return [ Expression ] ;
		 */
Comment Type: Block Comment
Comment: /*
		 * Identifier
		 */
Comment Type: Block Comment
Comment: /*
		 * This kind of node is used to convert a name (Name) into a type (Type) by wrapping it. 
		 */
Comment Type: Block Comment
Comment: /*
		 * SingleMemberAnnotation: @ TypeName ( Expression  )
		 */
Comment Type: Block Comment
Comment: /*
		 * String literal nodes.
		 */
Comment Type: Block Comment
Comment: /*
		 * [ Expression . ]
         [ < Type { , Type } > ]
         super ( [ Expression { , Expression } ] ) ;
		 */
Comment Type: Block Comment
Comment: /*
		 * SuperFieldAccess: [ ClassName . ] super . Identifier
		 */
Comment Type: Block Comment
Comment: /*
		  SuperMethodInvocation: [ ClassName . ] super . [ < Type { , Type } >
		 	] Identifier ( [ Expression { , Expression } ] )
		 */
Comment Type: Block Comment
Comment: /*
		 * case Expression  :
                default :
		 */
Comment Type: Block Comment
Comment: /*
		 * switch ( Expression )
                        { { SwitchCase | Statement } } }
		 */
Comment Type: Block Comment
Comment: /*
		 * synchronized ( Expression ) Block
		 */
Comment Type: Block Comment
Comment: /*
		 * ThisExpression: [ ClassName . ] this
		 */
Comment Type: Block Comment
Comment: /*
		 * ThrowStatement: throw Expression ;
		 */
Comment Type: Block Comment
Comment: /*
		 * JLS 4:
		 * 	try [ ( Resources ) ]
		        Block
         	    [ { CatchClause } ]
         	    [ finally Block ]
		 */
Comment Type: Block Comment
Comment: /*
		 * TypeDeclaration
    		or EnumDeclaration
		 */
Comment Type: Block Comment
Comment: /*
		 * ( Type | void ) . class
		 */
Comment Type: Block Comment
Comment: /*
		 *  Type | Type { | Type }
		 */
Comment Type: Block Comment
Comment: /*
		  VariableDeclarationExpression:
    		{ ExtendedModifier } Type VariableDeclarationFragment
         	{ , VariableDeclarationFragment }
		 */
Comment Type: Block Comment
Comment: // Append modifiers
Comment Type: Line Comment
Comment: // Append Type
Comment Type: Line Comment
Comment: // Visit Fragments
Comment Type: Line Comment
Comment: // No semicolon needed as this is an expression
Comment Type: Line Comment
Comment: /*
		 * Identifier { [] } [ = Expression ]
		 */
Comment Type: Block Comment
Comment: /*
		  { ExtendedModifier } Type VariableDeclarationFragment
        		{ , VariableDeclarationFragment } ;
		 */
Comment Type: Block Comment
Comment: // Append modifiers if applicable
Comment Type: Line Comment
Comment: // Append Type
Comment Type: Line Comment
Comment: // Visit Fragments
Comment Type: Line Comment
Comment: /*
		 * while ( Expression ) Statement
		 */
Comment Type: Block Comment
Comment: /*
		 * WildcardType: ? [ ( extends | super) Type ]
		 */
Comment Type: Block Comment
Comment: // Handle expressions and determine which "Visit" to visit
Comment Type: Line Comment
Comment: // Helper Methods
Comment Type: Line Comment
Comment: // There are two ways difference formatting can be applied: either, this node itself is a difference, or there is a non-null currentCompositeDiffNode acting as a "super difference" across multiple nodes.
Comment Type: Line Comment
Comment: /*
	 * Turns on the currentCompositeDiffNode attribute, which essentially tells future visits that there is a "super difference" in effect.
	 */
Comment Type: Block Comment
Comment: // Change the currentCompositeDiffNode is this node is a difference and no previous node is the super difference.
Comment Type: Line Comment
Comment: /*
	 * This method turns off the style if the node passed as parameter is the same node that turned it on.
	 */
Comment Type: Block Comment
Comment: /*
	//TextStyle Experiment
	 */
Comment Type: Block Comment
Comment: // ordinaryStyle.foreground = new Color(null, new RGB(0, 0, 0));
Comment Type: Line Comment
Comment: // Difference style is appended to styles with an already existing font. A null font prevents the old font from being overwritten.
Comment Type: Line Comment
Comment: // TODO Choose the font based on the user's Eclipse preferences
Comment Type: Line Comment
Comment: // TODO Choose the font based on the user's Eclipse preferences
Comment Type: Line Comment
Comment: // TODO Choose the font based on the user's Eclipse preferences
Comment Type: Line Comment
File LOC: 1090
Number of Comments: 87
Comment Percentage: 7%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\TypeChecking.java
Comment: /**
 * This sample class demonstrates how to plug-in a new
 * workbench view. The view shows data obtained from the
 * model. The sample creates a dummy model on the fly,
 * but a real implementation would connect to the model
 * available either in this or another plug-in (e.g. the workspace).
 * The view is connected to the model using a content provider.
 * <p>
 * The view uses a label provider to define how model
 * objects should be presented in the view. Each
 * view can present the same model objects using
 * different labels and icons, if needed. Alternatively,
 * a single label provider can be shared between views
 * in order to ensure that objects of the same type are
 * presented in the same way everywhere.
 * <p>
 */
Comment Type: Java Doc Comment
Comment: // private TypeCheckingEvolution typeCheckingEvolution;
Comment Type: Line Comment
Comment: /*
	 * The content provider class is responsible for
	 * providing objects to the view. It can wrap
	 * existing objects in adapters or simply return
	 * objects as-is. These objects may be sensitive
	 * to the current input of the view, or ignore
	 * it and always show the same content 
	 * (like Task List, for example).
	 */
Comment Type: Block Comment
Comment: // private Action evolutionAnalysisAction;
Comment Type: Line Comment
Comment: /*case 3:
					return Integer.toString(typeCheckElimination.getGroupSizeAtSystemLevel());*/
Comment Type: Block Comment
Comment: /**
 *  This is a callback that will allow us
 *  to create the viewer and initialize it.
 */
Comment Type: Java Doc Comment
Comment: // evolutionAnalysisAction.setEnabled(false);
Comment Type: Line Comment
Comment: // manager.add(evolutionAnalysisAction);
Comment Type: Line Comment
Comment: /*evolutionAnalysisAction = new Action() {
			public void run() {
				typeCheckingEvolution = null;
				IStructuredSelection selection = (IStructuredSelection)treeViewer.getSelection();
				if(selection.getFirstElement() instanceof TypeCheckElimination) {
					final TypeCheckElimination typeCheckElimination = (TypeCheckElimination)selection.getFirstElement();
					try {
						IWorkbench wb = PlatformUI.getWorkbench();
						IProgressService ps = wb.getProgressService();
						ps.busyCursorWhile(new IRunnableWithProgress() {
							public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
								ProjectEvolution projectEvolution = new ProjectEvolution(selectedProject);
								if(projectEvolution.getProjectEntries().size() > 1) {
									typeCheckingEvolution = new TypeCheckingEvolution(projectEvolution, typeCheckElimination, monitor);
								}
							}
						});
						if(typeCheckingEvolution != null) {
							EvolutionDialog dialog = new EvolutionDialog(getSite().getWorkbenchWindow(), typeCheckingEvolution, "Type Checking Evolution", false);
							dialog.open();
						}
						else
							MessageDialog.openInformation(getSite().getShell(), "Type Checking Evolution",
									"Type Checking evolution analysis cannot be performed, since only a single version of the examined project is loaded in the workspace.");
					} catch (InvocationTargetException e) {
						e.printStackTrace();
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		};
		evolutionAnalysisAction.setToolTipText("Evolution Analysis");
		evolutionAnalysisAction.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().
			getImageDescriptor(ISharedImages.IMG_OBJ_ELEMENT));
		evolutionAnalysisAction.setEnabled(false);*/
Comment Type: Block Comment
Comment: // evolutionAnalysisAction.setEnabled(true);
Comment Type: Line Comment
Comment: // $NON-NLS-1$
Comment Type: Line Comment
Comment: /**
 *  Passing the focus request to the viewer's control.
 */
Comment Type: Java Doc Comment
Comment: /*TableColumn[] columns = table.getColumns();
        		for(int i=0; i<columns.length; i++) {
        			if(i == columns.length-1)
        				out.write(columns[i].getText());
        			else
        				out.write(columns[i].getText() + "\t");
        		}
        		out.newLine();*/
Comment Type: Block Comment
File LOC: 663
Number of Comments: 13
Comment Percentage: 1%

File Name: G:\MetricsToolGIT\JDeodorant-master\src\gr\uom\java\jdeodorant\refactoring\views\ZoomValueValidator.java
File LOC: 15
Number of Comments: 0
Comment Percentage: 0%



------------------------------------------------------------





Cyclomatic Complexity


Class name: CCFinderOutputParser
Method Name : getStartOffset-> Complexity: 1
Method Name : getEndOffst-> Complexity: 1
Method Name : toString-> Complexity: 1
Method Name : getCloneGroupID-> Complexity: 1
Method Name : getPath-> Complexity: 1
Method Name : getStart-> Complexity: 1
Method Name : getEnd-> Complexity: 1
Method Name : toString-> Complexity: 1
Method Name : hashCode-> Complexity: 1
Method Name : equals-> Complexity: 10
Method Name : compare-> Complexity: 1
Method Name : readInputFile-> Complexity: 5
Method Name : readCloneSetData-> Complexity: 16
Method Name : readUtf8StringUntil-> Complexity: 5
Method Name : getPreproprossedFile-> Complexity: 4
Method Name : readInt-> Complexity: 1
	 WMC: 16
Total Complexity: 51


Class name: CloneDetectorOutputParseException
	 WMC: 0
Total Complexity: 0


Class name: CloneDetectorOutputParser
Method Name : getToolOutputFilePath-> Complexity: 1
Method Name : getIJavaProject-> Complexity: 1
Method Name : getCloneGroupCount-> Complexity: 1
Method Name : setCloneGroupCount-> Complexity: 1
Method Name : readFileContents-> Complexity: 2
Method Name : getResultsFileContents-> Complexity: 1
Method Name : progress-> Complexity: 2
Method Name : addParserProgressObserver-> Complexity: 1
Method Name : getIMethod-> Complexity: 6
Method Name : getMethodJavaSignature-> Complexity: 2
Method Name : cancelOperation-> Complexity: 1
Method Name : isOperationCanceled-> Complexity: 1
Method Name : addExceptionHappenedDuringParsing-> Complexity: 1
Method Name : getWarningExceptions-> Complexity: 1
Method Name : getCloneInstance-> Complexity: 1
Method Name : getCloneInstance-> Complexity: 1
Method Name : getCloneInstance-> Complexity: 3
Method Name : formatPath-> Complexity: 2
	 WMC: 18
Total Complexity: 29


Class name: CloneDetectorOutputParserFactory
Method Name : getCloneToolParser-> Complexity: 7
	 WMC: 1
Total Complexity: 7


Class name: CloneDetectorOutputParserProgressObserver
Method Name : notify-> Complexity: 0
	 WMC: 2
Total Complexity: 0


Class name: CloneDROutputParser
Method Name : readInputFile-> Complexity: 7
Method Name : compare-> Complexity: 1
Method Name : getAllCloneGroups-> Complexity: 3
Method Name : getCommonPathPrefix-> Complexity: 2
	 WMC: 4
Total Complexity: 13


Class name: CloneGroup
Method Name : getCloneGroupID-> Complexity: 1
Method Name : setCloneGroupID-> Complexity: 1
Method Name : addClone-> Complexity: 2
Method Name : getCloneInstances-> Complexity: 2
Method Name : equals-> Complexity: 4
Method Name : hashCode-> Complexity: 1
Method Name : getCloneGroupSize-> Complexity: 1
Method Name : toString-> Complexity: 1
Method Name : containsClassLevelClone-> Complexity: 3
Method Name : getSubcloneOf-> Complexity: 1
Method Name : setSubCloneOf-> Complexity: 1
Method Name : isSubClone-> Complexity: 1
Method Name : isSubCloneOf-> Complexity: 5
Method Name : removeClonesExistingInFile-> Complexity: 1
Method Name : updateClonesExistingInFile-> Complexity: 3
Method Name : isUpdated-> Complexity: 3
Method Name : getClonesRelativeLocation-> Complexity: 4
	 WMC: 17
Total Complexity: 35


Class name: CloneGroupList
Method Name : getJavaProject-> Complexity: 1
Method Name : add-> Complexity: 5
Method Name : iterator-> Complexity: 1
Method Name : getCloneGroups-> Complexity: 1
Method Name : getCloneGroupsCount-> Complexity: 1
Method Name : containsCloneGroup-> Complexity: 1
Method Name : removeClonesExistingInFile-> Complexity: 2
Method Name : updateClonesExistingInFile-> Complexity: 2
	 WMC: 8
Total Complexity: 14


Class name: CloneInstance
Method Name : getActualCodeFragment-> Complexity: 1
Method Name : getBelongingCloneGroup-> Complexity: 1
Method Name : setBelongingCloneGroup-> Complexity: 1
Method Name : getLocationInfo-> Complexity: 1
Method Name : updateOffsets-> Complexity: 1
Method Name : getStatus-> Complexity: 1
Method Name : getOriginalCodeFragment-> Complexity: 1
Method Name : getCloneID-> Complexity: 1
Method Name : setCloneID-> Complexity: 1
Method Name : getSourceFolder-> Complexity: 1
Method Name : setSourceFolder-> Complexity: 1
Method Name : getPackageName-> Complexity: 1
Method Name : setPackageName-> Complexity: 1
Method Name : getClassName-> Complexity: 1
Method Name : setClassName-> Complexity: 1
Method Name : getMethodName-> Complexity: 1
Method Name : setMethodName-> Complexity: 1
Method Name : getMethodSignature-> Complexity: 1
Method Name : setMethodSignature-> Complexity: 1
Method Name : getIMethodSignature-> Complexity: 1
Method Name : setIMethodSignature-> Complexity: 1
Method Name : isSubcloneOf-> Complexity: 3
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 1
Method Name : toString-> Complexity: 1
Method Name : isClassLevelClone-> Complexity: 1
Method Name : validateIntegrity-> Complexity: 2
Method Name : setContainingClassFullyQualifiedName-> Complexity: 1
Method Name : getContainingClassFullyQualifiedName-> Complexity: 1
	 WMC: 29
Total Complexity: 34


Class name: CloneInstanceLocationInfo
Method Name : isWhiteSpaceCharacter-> Complexity: 1
Method Name : readFileContents-> Complexity: 2
Method Name : getLines-> Complexity: 3
Method Name : getNumberOfCharsForLines-> Complexity: 3
Method Name : getContainingFilePath-> Complexity: 1
Method Name : getStartOffset-> Complexity: 1
Method Name : getEndOffset-> Complexity: 1
Method Name : getLength-> Complexity: 1
Method Name : getStartLine-> Complexity: 1
Method Name : getStartColumn-> Complexity: 1
Method Name : getEndLine-> Complexity: 1
Method Name : getEndColumn-> Complexity: 1
Method Name : getContainingFileContents-> Complexity: 1
Method Name : updateOffsets-> Complexity: 2
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 1
Method Name : toString-> Complexity: 1
Method Name : getCloneLocationStatus-> Complexity: 3
Method Name : getUpdatedStartOffset-> Complexity: 1
Method Name : getUpdatedEndOffset-> Complexity: 1
	 WMC: 20
Total Complexity: 30


Class name: ConQATOutputParser
Method Name : readInputFile-> Complexity: 7
Method Name : getFilesIdToPathMap-> Complexity: 2
	 WMC: 2
Total Complexity: 9


Class name: DeckardOutputParser
Method Name : readInputFile-> Complexity: 8
	 WMC: 1
Total Complexity: 8


Class name: InvalidInputFileException
	 WMC: 0
Total Complexity: 0


Class name: JavaModelUtility
Method Name : compare-> Complexity: 3
Method Name : getAllSourceDirectories-> Complexity: 7
Method Name : getIDocument-> Complexity: 1
	 WMC: 3
Total Complexity: 11


Class name: NiCadOutputParser
Method Name : readInputFile-> Complexity: 8
	 WMC: 1
Total Complexity: 8


Class name: ResourceInfo
Method Name : getCompilationUnitFromICompilationUnit-> Complexity: 1
Method Name : getSourceFolder-> Complexity: 1
Method Name : getICompilationUnit-> Complexity: 1
Method Name : getCompilationUnit-> Complexity: 1
Method Name : getPackageName-> Complexity: 1
Method Name : getClassName-> Complexity: 1
Method Name : getResourceInfo-> Complexity: 8
Method Name : getFullPath-> Complexity: 2
	 WMC: 8
Total Complexity: 16


Class name: TextDiff
Method Name : diff_main-> Complexity: 1
Method Name : diff_main-> Complexity: 2
Method Name : diff_main-> Complexity: 6
Method Name : diff_compute-> Complexity: 7
Method Name : diff_lineMode-> Complexity: 8
Method Name : diff_bisect-> Complexity: 20
Method Name : diff_bisectSplit-> Complexity: 1
Method Name : diff_linesToChars-> Complexity: 1
Method Name : diff_linesToCharsMunge-> Complexity: 4
Method Name : diff_charsToLines-> Complexity: 3
Method Name : diff_commonPrefix-> Complexity: 3
Method Name : diff_commonSuffix-> Complexity: 3
Method Name : diff_commonOverlap-> Complexity: 8
Method Name : diff_halfMatch-> Complexity: 7
Method Name : diff_halfMatchI-> Complexity: 4
Method Name : diff_cleanupSemantic-> Complexity: 19
Method Name : diff_cleanupSemanticLossless-> Complexity: 9
Method Name : diff_cleanupSemanticScore-> Complexity: 7
Method Name : diff_cleanupEfficiency-> Complexity: 13
Method Name : diff_cleanupMerge-> Complexity: 21
Method Name : diff_xIndex-> Complexity: 6
Method Name : diff_prettyHtml-> Complexity: 5
Method Name : diff_text1-> Complexity: 3
Method Name : diff_text2-> Complexity: 3
Method Name : diff_levenshtein-> Complexity: 5
Method Name : diff_toDelta-> Complexity: 6
Method Name : diff_fromDelta-> Complexity: 10
Method Name : match_main-> Complexity: 5
Method Name : match_bitap-> Complexity: 13
Method Name : match_bitapScore-> Complexity: 2
Method Name : match_alphabet-> Complexity: 3
Method Name : patch_addContext-> Complexity: 5
Method Name : patch_make-> Complexity: 3
Method Name : patch_make-> Complexity: 2
Method Name : patch_make-> Complexity: 1
Method Name : patch_make-> Complexity: 14
Method Name : patch_deepCopy-> Complexity: 3
Method Name : patch_apply-> Complexity: 15
Method Name : patch_addPadding-> Complexity: 7
Method Name : patch_splitMax-> Complexity: 14
Method Name : patch_toText-> Complexity: 2
Method Name : patch_fromText-> Complexity: 13
Method Name : toString-> Complexity: 1
Method Name : hashCode-> Complexity: 1
Method Name : equals-> Complexity: 8
Method Name : toString-> Complexity: 9
Method Name : unescapeForEncodeUriCompatability-> Complexity: 1
	 WMC: 47
Total Complexity: 307


Class name: AbstractMethodDeclaration
Method Name : getName-> Complexity: 0
Method Name : getAccess-> Complexity: 0
Method Name : getMethodDeclaration-> Complexity: 0
Method Name : getMethodBody-> Complexity: 0
Method Name : getClassName-> Complexity: 0
Method Name : getCommentListIterator-> Complexity: 0
Method Name : getParameterListIterator-> Complexity: 0
Method Name : getParameter-> Complexity: 0
Method Name : getMethodInvocations-> Complexity: 0
Method Name : getSuperMethodInvocations-> Complexity: 0
Method Name : getConstructorInvocations-> Complexity: 0
Method Name : getFieldInstructions-> Complexity: 0
Method Name : getSuperFieldInstructions-> Complexity: 0
Method Name : getLocalVariableDeclarations-> Complexity: 0
Method Name : getLocalVariableInstructions-> Complexity: 0
Method Name : getCreations-> Complexity: 0
Method Name : getLiterals-> Complexity: 0
Method Name : getAnonymousClassDeclarations-> Complexity: 0
Method Name : getExceptionsInThrowStatements-> Complexity: 0
Method Name : getExceptionsInJavaDocThrows-> Complexity: 0
Method Name : containsMethodInvocation-> Complexity: 0
Method Name : containsFieldInstruction-> Complexity: 0
Method Name : containsSuperMethodInvocation-> Complexity: 0
Method Name : getInvokedMethodsThroughFields-> Complexity: 0
Method Name : getNonDistinctInvokedMethodsThroughFields-> Complexity: 0
Method Name : getInvokedMethodsThroughParameters-> Complexity: 0
Method Name : getNonDistinctInvokedMethodsThroughParameters-> Complexity: 0
Method Name : getInvokedMethodsThroughLocalVariables-> Complexity: 0
Method Name : getInvokedMethodsThroughThisReference-> Complexity: 0
Method Name : getNonDistinctInvokedMethodsThroughThisReference-> Complexity: 0
Method Name : getInvokedStaticMethods-> Complexity: 0
Method Name : getDefinedFieldsThroughFields-> Complexity: 0
Method Name : getUsedFieldsThroughFields-> Complexity: 0
Method Name : getNonDistinctDefinedFieldsThroughFields-> Complexity: 0
Method Name : getNonDistinctUsedFieldsThroughFields-> Complexity: 0
Method Name : getDefinedFieldsThroughParameters-> Complexity: 0
Method Name : getUsedFieldsThroughParameters-> Complexity: 0
Method Name : getNonDistinctDefinedFieldsThroughParameters-> Complexity: 0
Method Name : getNonDistinctUsedFieldsThroughParameters-> Complexity: 0
Method Name : getDefinedFieldsThroughLocalVariables-> Complexity: 0
Method Name : getUsedFieldsThroughLocalVariables-> Complexity: 0
Method Name : getDefinedFieldsThroughThisReference-> Complexity: 0
Method Name : getNonDistinctDefinedFieldsThroughThisReference-> Complexity: 0
Method Name : getUsedFieldsThroughThisReference-> Complexity: 0
Method Name : getNonDistinctUsedFieldsThroughThisReference-> Complexity: 0
Method Name : getDeclaredLocalVariables-> Complexity: 0
Method Name : getDefinedLocalVariables-> Complexity: 0
Method Name : getUsedLocalVariables-> Complexity: 0
Method Name : getParametersPassedAsArgumentsInMethodInvocations-> Complexity: 0
Method Name : getParametersPassedAsArgumentsInSuperMethodInvocations-> Complexity: 0
Method Name : getParametersPassedAsArgumentsInConstructorInvocations-> Complexity: 0
Method Name : containsSuperMethodInvocation-> Complexity: 0
Method Name : containsSuperFieldAccess-> Complexity: 0
Method Name : getParameterTypeList-> Complexity: 0
Method Name : getParameterList-> Complexity: 0
Method Name : getSignature-> Complexity: 0
Method Name : isAbstract-> Complexity: 0
	 WMC: 114
Total Complexity: 0


Class name: AbstractMethodInvocationObject
Method Name : addParameter-> Complexity: 1
Method Name : getParameterListIterator-> Complexity: 1
Method Name : getParameterTypeList-> Complexity: 1
Method Name : getReturnType-> Complexity: 1
Method Name : getOriginClassType-> Complexity: 1
Method Name : getOriginClassName-> Complexity: 1
Method Name : getMethodName-> Complexity: 1
Method Name : getParameterList-> Complexity: 2
Method Name : isStatic-> Complexity: 1
Method Name : setStatic-> Complexity: 1
Method Name : addThrownException-> Complexity: 1
Method Name : getThrownExceptions-> Complexity: 1
Method Name : getType-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 3
Method Name : toString-> Complexity: 3
Method Name : getSignature-> Complexity: 3
	 WMC: 17
Total Complexity: 26


Class name: AnonymousClassDeclarationObject
Method Name : setAnonymousClassDeclaration-> Complexity: 1
Method Name : getAnonymousClassDeclaration-> Complexity: 1
Method Name : getClassObject-> Complexity: 1
Method Name : setClassObject-> Complexity: 1
Method Name : getITypeRoot-> Complexity: 1
Method Name : getIFile-> Complexity: 2
Method Name : getSuperclass-> Complexity: 1
Method Name : accessedFieldFromThisClass-> Complexity: 5
Method Name : toString-> Complexity: 3
	 WMC: 9
Total Complexity: 16


Class name: ArrayAccessObject
Method Name : getType-> Complexity: 1
Method Name : getArrayAccess-> Complexity: 1
Method Name : setArrayAccess-> Complexity: 1
	 WMC: 3
Total Complexity: 3


Class name: ArrayCreationObject
Method Name : getArrayCreation-> Complexity: 1
Method Name : setArrayCreation-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: Association
Method Name : getFieldObject-> Complexity: 1
Method Name : getTo-> Complexity: 1
Method Name : getFrom-> Complexity: 1
Method Name : isContainer-> Complexity: 1
Method Name : setContainer-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : toString-> Complexity: 2
	 WMC: 7
Total Complexity: 10


Class name: AssociationDetection
Method Name : containsFieldObject-> Complexity: 3
Method Name : getAssociationsOfClass-> Complexity: 3
Method Name : generateAssociations-> Complexity: 12
Method Name : checkCollectionAttribute-> Complexity: 4
Method Name : checkForContainerAssociation-> Complexity: 4
Method Name : checkFullPathForContainerAssociation-> Complexity: 4
Method Name : checkPathForContainerAssociation-> Complexity: 3
Method Name : recurse-> Complexity: 5
Method Name : getAssociationsEndingTo-> Complexity: 3
Method Name : getAssociation-> Complexity: 3
	 WMC: 10
Total Complexity: 44


Class name: ASTInformation
Method Name : recoverASTNode-> Complexity: 1
Method Name : getITypeRoot-> Complexity: 1
Method Name : getStartPosition-> Complexity: 1
Method Name : getLength-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
	 WMC: 6
Total Complexity: 9


Class name: ASTInformationGenerator
Method Name : setCurrentITypeRoot-> Complexity: 1
Method Name : generateASTInformation-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: ASTReader
Method Name : buildProject-> Complexity: 3
Method Name : getNumberOfCompilationUnits-> Complexity: 4
Method Name : getRecursivelyInnerTypes-> Complexity: 8
Method Name : parseAST-> Complexity: 1
Method Name : parseAST-> Complexity: 7
Method Name : processComments-> Complexity: 7
Method Name : processTypeDeclaration-> Complexity: 12
Method Name : processEnumDeclaration-> Complexity: 12
Method Name : processFieldDeclaration-> Complexity: 8
Method Name : processMethodDeclaration-> Complexity: 30
Method Name : getSystemObject-> Complexity: 1
Method Name : getExaminedProject-> Complexity: 1
Method Name : getAST-> Complexity: 2
	 WMC: 13
Total Complexity: 96


Class name: ClassDeclarationObject
Method Name : addMethod-> Complexity: 1
Method Name : addField-> Complexity: 1
Method Name : addComment-> Complexity: 1
Method Name : addComments-> Complexity: 1
Method Name : getMethodList-> Complexity: 1
Method Name : getMethodIterator-> Complexity: 1
Method Name : getFieldIterator-> Complexity: 1
Method Name : getCommentIterator-> Complexity: 1
Method Name : getNumberOfMethods-> Complexity: 1
Method Name : setName-> Complexity: 1
Method Name : getName-> Complexity: 1
Method Name : isGeneratedByParserGenenator-> Complexity: 3
Method Name : containsMethodWithTestAnnotation-> Complexity: 3
Method Name : extendsTestCase-> Complexity: 4
Method Name : getMethod-> Complexity: 3
Method Name : getMethod-> Complexity: 3
Method Name : containsMethodInvocation-> Complexity: 3
Method Name : containsFieldInstruction-> Complexity: 3
Method Name : containsMethodInvocation-> Complexity: 3
Method Name : containsSuperMethodInvocation-> Complexity: 3
Method Name : hasFieldType-> Complexity: 3
Method Name : getFieldsAccessedInsideMethod-> Complexity: 11
Method Name : getField-> Complexity: 3
Method Name : findField-> Complexity: 4
	 WMC: 24
Total Complexity: 60


Class name: ClassInstanceCreationObject
Method Name : getClassInstanceCreation-> Complexity: 1
Method Name : setClassInstanceCreation-> Complexity: 1
Method Name : addParameter-> Complexity: 1
Method Name : getParameterListIterator-> Complexity: 1
Method Name : getParameterTypeList-> Complexity: 1
Method Name : getParameterList-> Complexity: 2
Method Name : addThrownException-> Complexity: 1
Method Name : getThrownExceptions-> Complexity: 1
Method Name : toString-> Complexity: 3
	 WMC: 9
Total Complexity: 12


Class name: ClassObject
Method Name : setAbstractTypeDeclaration-> Complexity: 1
Method Name : getAbstractTypeDeclaration-> Complexity: 2
Method Name : getClassObject-> Complexity: 1
Method Name : getITypeRoot-> Complexity: 1
Method Name : getIFile-> Complexity: 1
Method Name : setIFile-> Complexity: 1
Method Name : isFriend-> Complexity: 20
Method Name : checkFriendship-> Complexity: 3
Method Name : generateTypeCheckEliminations-> Complexity: 7
Method Name : setAccess-> Complexity: 1
Method Name : getAccess-> Complexity: 1
Method Name : setSuperclass-> Complexity: 1
Method Name : addInterface-> Complexity: 1
Method Name : addConstructor-> Complexity: 1
Method Name : addEnumConstantDeclaration-> Complexity: 1
Method Name : getConstructorIterator-> Complexity: 1
Method Name : getInterfaceIterator-> Complexity: 1
Method Name : getSuperclassIterator-> Complexity: 1
Method Name : getEnumConstantDeclarationIterator-> Complexity: 1
Method Name : getSuperclass-> Complexity: 1
Method Name : setAbstract-> Complexity: 1
Method Name : isAbstract-> Complexity: 1
Method Name : setInterface-> Complexity: 1
Method Name : isInterface-> Complexity: 1
Method Name : isStatic-> Complexity: 1
Method Name : setStatic-> Complexity: 1
Method Name : isEnum-> Complexity: 1
Method Name : setEnum-> Complexity: 1
Method Name : getConstructor-> Complexity: 3
Method Name : getConstructor-> Complexity: 3
Method Name : toString-> Complexity: 10
	 WMC: 31
Total Complexity: 72


Class name: CommentObject
Method Name : setComment-> Complexity: 1
Method Name : getComment-> Complexity: 1
Method Name : getText-> Complexity: 1
Method Name : getType-> Complexity: 1
Method Name : getStartLine-> Complexity: 1
Method Name : getEndLine-> Complexity: 1
Method Name : getITypeRoot-> Complexity: 1
Method Name : getStartPosition-> Complexity: 1
Method Name : getLength-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
	 WMC: 12
Total Complexity: 15


Class name: CompilationErrorDetectedException
Method Name : getMarkers-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: CompilationUnitCache
Method Name : addUsedFieldForMethodExpression-> Complexity: 2
Method Name : setEmptyUsedFieldsForMethodExpression-> Complexity: 1
Method Name : addDefinedFieldForMethodExpression-> Complexity: 2
Method Name : setEmptyDefinedFieldsForMethodExpression-> Complexity: 1
Method Name : setThrownExceptionTypesForMethodExpression-> Complexity: 1
Method Name : containsMethodExpression-> Complexity: 3
Method Name : getUsedFieldsForMethodExpression-> Complexity: 1
Method Name : getDefinedFieldsForMethodExpression-> Complexity: 1
Method Name : getThrownExceptionTypesForMethodExpression-> Complexity: 1
Method Name : getInstance-> Complexity: 2
Method Name : getCompilationUnit-> Complexity: 7
Method Name : compilationUnitChanged-> Complexity: 2
Method Name : compilationUnitAdded-> Complexity: 2
Method Name : compilationUnitRemoved-> Complexity: 2
Method Name : getChangedCompilationUnits-> Complexity: 1
Method Name : getAddedCompilationUnits-> Complexity: 1
Method Name : getRemovedCompilationUnits-> Complexity: 1
Method Name : lock-> Complexity: 2
Method Name : releaseLock-> Complexity: 1
Method Name : clearAffectedCompilationUnits-> Complexity: 1
Method Name : getAffectedProjects-> Complexity: 4
Method Name : clearCache-> Complexity: 1
	 WMC: 22
Total Complexity: 40


Class name: ConstructorInvocationObject
Method Name : setConstructorInvocation-> Complexity: 1
Method Name : getConstructorInvocation-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: ConstructorObject
Method Name : setMethodDeclaration-> Complexity: 1
Method Name : getMethodDeclaration-> Complexity: 1
Method Name : setMethodBody-> Complexity: 1
Method Name : getMethodBody-> Complexity: 1
Method Name : addExceptionInJavaDocThrows-> Complexity: 1
Method Name : getExceptionsInJavaDocThrows-> Complexity: 1
Method Name : setAccess-> Complexity: 1
Method Name : getAccess-> Complexity: 1
Method Name : setName-> Complexity: 1
Method Name : getName-> Complexity: 1
Method Name : setClassName-> Complexity: 1
Method Name : getClassName-> Complexity: 1
Method Name : addComment-> Complexity: 1
Method Name : getCommentListIterator-> Complexity: 1
Method Name : addParameter-> Complexity: 1
Method Name : getParameterListIterator-> Complexity: 1
Method Name : getParameter-> Complexity: 4
Method Name : getMethodInvocations-> Complexity: 2
Method Name : getSuperMethodInvocations-> Complexity: 2
Method Name : getConstructorInvocations-> Complexity: 2
Method Name : getFieldInstructions-> Complexity: 2
Method Name : getSuperFieldInstructions-> Complexity: 2
Method Name : getLocalVariableDeclarations-> Complexity: 2
Method Name : getLocalVariableInstructions-> Complexity: 2
Method Name : getCreations-> Complexity: 2
Method Name : getLiterals-> Complexity: 2
Method Name : getAnonymousClassDeclarations-> Complexity: 2
Method Name : getExceptionsInThrowStatements-> Complexity: 2
Method Name : containsMethodInvocation-> Complexity: 2
Method Name : containsFieldInstruction-> Complexity: 2
Method Name : containsSuperMethodInvocation-> Complexity: 2
Method Name : getInvokedMethodsThroughFields-> Complexity: 2
Method Name : getNonDistinctInvokedMethodsThroughFields-> Complexity: 2
Method Name : getInvokedMethodsThroughParameters-> Complexity: 2
Method Name : getNonDistinctInvokedMethodsThroughParameters-> Complexity: 2
Method Name : getInvokedMethodsThroughLocalVariables-> Complexity: 2
Method Name : getInvokedMethodsThroughThisReference-> Complexity: 2
Method Name : getNonDistinctInvokedMethodsThroughThisReference-> Complexity: 2
Method Name : getInvokedStaticMethods-> Complexity: 2
Method Name : getDefinedFieldsThroughFields-> Complexity: 2
Method Name : getUsedFieldsThroughFields-> Complexity: 2
Method Name : getNonDistinctDefinedFieldsThroughFields-> Complexity: 2
Method Name : getNonDistinctUsedFieldsThroughFields-> Complexity: 2
Method Name : getDefinedFieldsThroughParameters-> Complexity: 2
Method Name : getUsedFieldsThroughParameters-> Complexity: 2
Method Name : getNonDistinctDefinedFieldsThroughParameters-> Complexity: 2
Method Name : getNonDistinctUsedFieldsThroughParameters-> Complexity: 2
Method Name : getDefinedFieldsThroughLocalVariables-> Complexity: 2
Method Name : getUsedFieldsThroughLocalVariables-> Complexity: 2
Method Name : getDefinedFieldsThroughThisReference-> Complexity: 2
Method Name : getNonDistinctDefinedFieldsThroughThisReference-> Complexity: 2
Method Name : getUsedFieldsThroughThisReference-> Complexity: 2
Method Name : getNonDistinctUsedFieldsThroughThisReference-> Complexity: 2
Method Name : getDeclaredLocalVariables-> Complexity: 2
Method Name : getDefinedLocalVariables-> Complexity: 2
Method Name : getUsedLocalVariables-> Complexity: 2
Method Name : getParametersPassedAsArgumentsInMethodInvocations-> Complexity: 2
Method Name : getParametersPassedAsArgumentsInSuperMethodInvocations-> Complexity: 2
Method Name : getParametersPassedAsArgumentsInConstructorInvocations-> Complexity: 2
Method Name : containsSuperMethodInvocation-> Complexity: 2
Method Name : containsSuperFieldAccess-> Complexity: 2
Method Name : getParameterTypeList-> Complexity: 2
Method Name : getParameterList-> Complexity: 2
Method Name : equals-> Complexity: 1
Method Name : equals-> Complexity: 1
Method Name : equalParameterTypes-> Complexity: 5
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 4
Method Name : getSignature-> Complexity: 3
Method Name : isAbstract-> Complexity: 1
	 WMC: 71
Total Complexity: 132


Class name: CreationObject
Method Name : getType-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: AbstractExpression
Method Name : processExpression-> Complexity: 1
Method Name : getExpression-> Complexity: 1
Method Name : hashCode-> Complexity: 1
Method Name : equals-> Complexity: 7
Method Name : toString-> Complexity: 1
	 WMC: 5
Total Complexity: 11


Class name: AbstractMethodFragment
Method Name : getParent-> Complexity: 1
Method Name : processVariables-> Complexity: 23
Method Name : addFieldInstruction-> Complexity: 2
Method Name : addSuperFieldInstruction-> Complexity: 2
Method Name : addLocalVariableDeclaration-> Complexity: 2
Method Name : addLocalVariableInstruction-> Complexity: 2
Method Name : addDeclaredLocalVariable-> Complexity: 2
Method Name : addDefinedLocalVariable-> Complexity: 2
Method Name : addUsedLocalVariable-> Complexity: 2
Method Name : processConstructorInvocation-> Complexity: 8
Method Name : processMethodInvocations-> Complexity: 23
Method Name : addMethodInvocation-> Complexity: 2
Method Name : addSuperMethodInvocation-> Complexity: 2
Method Name : addConstructorInvocation-> Complexity: 2
Method Name : processClassInstanceCreations-> Complexity: 38
Method Name : processArrayCreations-> Complexity: 2
Method Name : addCreation-> Complexity: 2
Method Name : processLiterals-> Complexity: 2
Method Name : addLiteral-> Complexity: 2
Method Name : addAnomymousClassDeclaration-> Complexity: 2
Method Name : processThrowStatement-> Complexity: 2
Method Name : addExceptionInThrowStatement-> Complexity: 2
Method Name : addNonDistinctInvokedMethodThroughField-> Complexity: 3
Method Name : addNonDistinctInvokedMethodThroughParameter-> Complexity: 3
Method Name : addNonDistinctInvokedMethodThroughLocalVariable-> Complexity: 3
Method Name : addNonDistinctInvokedMethodThroughThisReference-> Complexity: 2
Method Name : addStaticallyInvokedMethod-> Complexity: 2
Method Name : addParameterPassedAsArgumentInMethodInvocation-> Complexity: 3
Method Name : addParameterPassedAsArgumentInSuperMethodInvocation-> Complexity: 3
Method Name : addParameterPassedAsArgumentInConstructorInvocation-> Complexity: 3
Method Name : addVariableAssignedWithClassInstanceCreation-> Complexity: 3
Method Name : getMatchingAssignments-> Complexity: 3
Method Name : getMatchingPostfixAssignments-> Complexity: 3
Method Name : getMatchingPrefixAssignments-> Complexity: 3
Method Name : handleDefinedField-> Complexity: 6
Method Name : handleUsedField-> Complexity: 6
Method Name : getFieldInstructions-> Complexity: 1
Method Name : getSuperFieldInstructions-> Complexity: 1
Method Name : getLocalVariableDeclarations-> Complexity: 1
Method Name : getLocalVariableInstructions-> Complexity: 1
Method Name : getMethodInvocations-> Complexity: 1
Method Name : getSuperMethodInvocations-> Complexity: 1
Method Name : getConstructorInvocations-> Complexity: 1
Method Name : getCreations-> Complexity: 1
Method Name : getClassInstanceCreations-> Complexity: 3
Method Name : getArrayCreations-> Complexity: 3
Method Name : getLiterals-> Complexity: 1
Method Name : getAnonymousClassDeclarations-> Complexity: 1
Method Name : getExceptionsInThrowStatements-> Complexity: 1
Method Name : containsMethodInvocation-> Complexity: 1
Method Name : containsFieldInstruction-> Complexity: 1
Method Name : containsSuperMethodInvocation-> Complexity: 1
Method Name : containsLocalVariableDeclaration-> Complexity: 1
Method Name : getInvokedMethodsThroughFields-> Complexity: 2
Method Name : getInvokedMethodsThroughParameters-> Complexity: 2
Method Name : getNonDistinctInvokedMethodsThroughFields-> Complexity: 1
Method Name : getNonDistinctInvokedMethodsThroughParameters-> Complexity: 1
Method Name : getInvokedMethodsThroughLocalVariables-> Complexity: 2
Method Name : getNonDistinctInvokedMethodsThroughLocalVariables-> Complexity: 1
Method Name : getInvokedMethodsThroughThisReference-> Complexity: 1
Method Name : getNonDistinctInvokedMethodsThroughThisReference-> Complexity: 1
Method Name : getInvokedStaticMethods-> Complexity: 1
Method Name : getNonDistinctInvokedStaticMethods-> Complexity: 1
Method Name : getDefinedFieldsThroughFields-> Complexity: 1
Method Name : getUsedFieldsThroughFields-> Complexity: 1
Method Name : getNonDistinctDefinedFieldsThroughFields-> Complexity: 1
Method Name : getNonDistinctUsedFieldsThroughFields-> Complexity: 1
Method Name : getDefinedFieldsThroughParameters-> Complexity: 1
Method Name : getUsedFieldsThroughParameters-> Complexity: 1
Method Name : getNonDistinctDefinedFieldsThroughParameters-> Complexity: 1
Method Name : getNonDistinctUsedFieldsThroughParameters-> Complexity: 1
Method Name : getDefinedFieldsThroughLocalVariables-> Complexity: 1
Method Name : getUsedFieldsThroughLocalVariables-> Complexity: 1
Method Name : getNonDistinctDefinedFieldsThroughLocalVariables-> Complexity: 1
Method Name : getNonDistinctUsedFieldsThroughLocalVariables-> Complexity: 1
Method Name : getDefinedFieldsThroughThisReference-> Complexity: 1
Method Name : getNonDistinctDefinedFieldsThroughThisReference-> Complexity: 1
Method Name : getUsedFieldsThroughThisReference-> Complexity: 1
Method Name : getNonDistinctUsedFieldsThroughThisReference-> Complexity: 1
Method Name : getDeclaredLocalVariables-> Complexity: 1
Method Name : getDefinedLocalVariables-> Complexity: 1
Method Name : getUsedLocalVariables-> Complexity: 1
Method Name : getParametersPassedAsArgumentsInMethodInvocations-> Complexity: 1
Method Name : getParametersPassedAsArgumentsInSuperMethodInvocations-> Complexity: 1
Method Name : getParametersPassedAsArgumentsInConstructorInvocations-> Complexity: 1
Method Name : getVariablesAssignedWithClassInstanceCreations-> Complexity: 1
	 WMC: 86
Total Complexity: 230


Class name: AbstractStatement
Method Name : getStatement-> Complexity: 1
Method Name : getType-> Complexity: 1
Method Name : getNestingDepth-> Complexity: 3
	 WMC: 3
Total Complexity: 5


Class name: CatchClauseObject
Method Name : setParent-> Complexity: 1
Method Name : getParent-> Complexity: 1
Method Name : setBody-> Complexity: 1
Method Name : getBody-> Complexity: 1
Method Name : addExpression-> Complexity: 1
Method Name : getExpressions-> Complexity: 1
Method Name : getExceptionTypes-> Complexity: 1
Method Name : addExceptionType-> Complexity: 1
Method Name : stringRepresentation-> Complexity: 1
Method Name : getIfStatements-> Complexity: 1
Method Name : getSwitchStatements-> Complexity: 1
Method Name : getTryStatements-> Complexity: 1
Method Name : toString-> Complexity: 5
	 WMC: 13
Total Complexity: 17


Class name: AbstractVariable
Method Name : getVariableBindingKey-> Complexity: 1
Method Name : getVariableName-> Complexity: 1
Method Name : getVariableType-> Complexity: 1
Method Name : isField-> Complexity: 1
Method Name : isParameter-> Complexity: 1
Method Name : isStatic-> Complexity: 1
	 WMC: 6
Total Complexity: 6


Class name: BasicBlock
Method Name : getId-> Complexity: 1
Method Name : getLeader-> Complexity: 1
Method Name : getNodes-> Complexity: 1
Method Name : getAllNodes-> Complexity: 1
Method Name : getAllNodesIncludingTry-> Complexity: 1
Method Name : getLastNode-> Complexity: 2
Method Name : add-> Complexity: 1
Method Name : addTryNode-> Complexity: 1
Method Name : getPreviousBasicBlock-> Complexity: 1
Method Name : setPreviousBasicBlock-> Complexity: 1
Method Name : getNextBasicBlock-> Complexity: 1
Method Name : setNextBasicBlock-> Complexity: 1
Method Name : resetBlockNum-> Complexity: 1
Method Name : toString-> Complexity: 1
	 WMC: 14
Total Complexity: 15


Class name: BasicBlockCFG
Method Name : getBasicBlocks-> Complexity: 1
Method Name : forwardReachableBlocks-> Complexity: 4
	 WMC: 2
Total Complexity: 5


Class name: CFG
Method Name : getMethod-> Complexity: 1
Method Name : getBasicBlockCFG-> Complexity: 1
Method Name : getBasicBlocks-> Complexity: 1
Method Name : getDirectlyNestedNodesInBlocks-> Complexity: 1
Method Name : process-> Complexity: 24
Method Name : processSynchronizedStatement-> Complexity: 1
Method Name : processTryStatement-> Complexity: 2
Method Name : findBlockNodeControlParent-> Complexity: 6
Method Name : processDoStatement-> Complexity: 2
Method Name : processLoopStatement-> Complexity: 6
Method Name : getAction-> Complexity: 32
Method Name : isBlockWithoutCompositeParent-> Complexity: 3
Method Name : processNonCompositeStatement-> Complexity: 6
Method Name : createNonCompositeNode-> Complexity: 6
Method Name : previousNodesContainBreakOrReturn-> Complexity: 3
Method Name : directlyNestedNode-> Complexity: 6
Method Name : directlyNestedNodeInBlock-> Complexity: 3
Method Name : processSwitchStatement-> Complexity: 5
Method Name : processIfStatement-> Complexity: 14
Method Name : handleAction-> Complexity: 5
Method Name : createTopDownFlow-> Complexity: 6
Method Name : getNumberOfImmediateBlocks-> Complexity: 3
Method Name : isLoop-> Complexity: 2
Method Name : getCommonNextNode-> Complexity: 6
Method Name : getMostRecentSwitchNode-> Complexity: 4
	 WMC: 25
Total Complexity: 149


Class name: CFGBlockNode
Method Name : getControlParent-> Complexity: 1
Method Name : setControlParent-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: CFGBranchConditionalNode
Method Name : setJoinNode-> Complexity: 1
Method Name : getJoinNode-> Complexity: 1
Method Name : getNestedBasicBlocks-> Complexity: 7
	 WMC: 3
Total Complexity: 9


Class name: CFGBranchDoLoopNode
Method Name : getJoinNode-> Complexity: 1
Method Name : getNestedBasicBlocks-> Complexity: 3
	 WMC: 2
Total Complexity: 4


Class name: CFGBranchIfNode
Method Name : getImmediatelyNestedNodesInTrueControlFlow-> Complexity: 8
Method Name : getImmediatelyNestedNodesInFalseControlFlow-> Complexity: 9
	 WMC: 2
Total Complexity: 17


Class name: CFGBranchLoopNode
Method Name : getJoinNode-> Complexity: 1
Method Name : getNestedBasicBlocks-> Complexity: 7
	 WMC: 2
Total Complexity: 8


Class name: CFGBranchNode
Method Name : getTrueControlFlow-> Complexity: 3
Method Name : getFalseControlFlow-> Complexity: 3
Method Name : getNestedBasicBlocksToEnd-> Complexity: 2
Method Name : getImmediatelyNestedNodesFromAST-> Complexity: 10
Method Name : processBlockStatement-> Complexity: 5
Method Name : processLabeledStatement-> Complexity: 6
Method Name : processTryStatement-> Complexity: 3
	 WMC: 7
Total Complexity: 32


Class name: CFGBranchSwitchNode
	 WMC: 0
Total Complexity: 0


Class name: CFGBreakNode
Method Name : getLabel-> Complexity: 1
Method Name : isLabeled-> Complexity: 1
Method Name : getInnerMostLoopNode-> Complexity: 1
Method Name : setInnerMostLoopNode-> Complexity: 1
	 WMC: 4
Total Complexity: 4


Class name: CFGContinueNode
Method Name : getLabel-> Complexity: 1
Method Name : isLabeled-> Complexity: 1
Method Name : getInnerMostLoopNode-> Complexity: 1
Method Name : setInnerMostLoopNode-> Complexity: 1
	 WMC: 4
Total Complexity: 4


Class name: CFGExitNode
Method Name : getReturnedVariable-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: CFGNode
Method Name : getStatement-> Complexity: 1
Method Name : getASTStatement-> Complexity: 1
Method Name : isLeader-> Complexity: 2
Method Name : immediatelyFollowsBranchNode-> Complexity: 3
Method Name : isFirst-> Complexity: 4
Method Name : isBranch-> Complexity: 2
Method Name : isJoin-> Complexity: 2
Method Name : setBasicBlock-> Complexity: 1
Method Name : getBasicBlock-> Complexity: 1
Method Name : getPDGNode-> Complexity: 1
Method Name : setPDGNode-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
Method Name : compareTo-> Complexity: 3
	 WMC: 15
Total Complexity: 28


Class name: CFGSwitchCaseNode
Method Name : isDefault-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: CFGSynchronizedNode
	 WMC: 0
Total Complexity: 0


Class name: CFGThrowNode
	 WMC: 0
Total Complexity: 0


Class name: CFGTryNode
Method Name : hasResources-> Complexity: 1
Method Name : getHandledExceptions-> Complexity: 1
Method Name : hasFinallyClauseClosingVariable-> Complexity: 1
Method Name : hasCatchClause-> Complexity: 1
	 WMC: 4
Total Complexity: 4


Class name: CompositeVariable
Method Name : getRightPart-> Complexity: 1
Method Name : getLeftPart-> Complexity: 2
Method Name : getFinalVariable-> Complexity: 2
Method Name : getInitialVariable-> Complexity: 1
Method Name : containsPlainVariable-> Complexity: 2
Method Name : startsWithVariable-> Complexity: 3
Method Name : getRightPartAfterPrefix-> Complexity: 5
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
	 WMC: 10
Total Complexity: 22


Class name: Flow
Method Name : isLoopbackFlow-> Complexity: 1
Method Name : setLoopbackFlow-> Complexity: 1
Method Name : isTrueControlFlow-> Complexity: 1
Method Name : setTrueControlFlow-> Complexity: 1
Method Name : isFalseControlFlow-> Complexity: 1
Method Name : setFalseControlFlow-> Complexity: 1
Method Name : toString-> Complexity: 4
	 WMC: 7
Total Complexity: 10


Class name: Graph
Method Name : getNodes-> Complexity: 1
Method Name : getEdges-> Complexity: 1
Method Name : addNode-> Complexity: 1
Method Name : addEdge-> Complexity: 1
	 WMC: 4
Total Complexity: 4


Class name: GraphEdge
Method Name : getSrc-> Complexity: 1
Method Name : getDst-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: GraphNode
Method Name : getId-> Complexity: 1
Method Name : addIncomingEdge-> Complexity: 1
Method Name : addOutgoingEdge-> Complexity: 1
Method Name : resetNodeNum-> Complexity: 1
	 WMC: 4
Total Complexity: 4


Class name: BottomUpCDTMapper
Method Name : processBottomUp-> Complexity: 20
Method Name : containsSiblingMatch-> Complexity: 3
Method Name : containsMatch-> Complexity: 3
Method Name : isSubsumedByCurrentSolutions-> Complexity: 3
Method Name : getSolutions-> Complexity: 1
Method Name : findBottomUpMatches-> Complexity: 29
Method Name : ifStatementsWithEqualElseIfChains-> Complexity: 3
Method Name : ifStatementWithSingleElseAgainstTernaryOperator-> Complexity: 3
Method Name : alreadyMapped-> Complexity: 3
	 WMC: 9
Total Complexity: 68


Class name: @SuppressWarnings("restriction")
Method Name : getSubTreeMappers-> Complexity: 1
Method Name : getCDTNodesInBreadthFirstOrder-> Complexity: 3
Method Name : generateControlDependenceSubTree-> Complexity: 3
Method Name : generateControlDependenceSubTreeWithTheFirstNodeAsRoot-> Complexity: 3
Method Name : addNodeInOrder-> Complexity: 3
Method Name : insertCDTNodeInTree-> Complexity: 6
Method Name : insertCDTNodeInTreeAfterSibling-> Complexity: 6
Method Name : getSubTreeCDTNode-> Complexity: 11
Method Name : allNodesNestedUnderElse-> Complexity: 3
Method Name : isNestedUnderElse-> Complexity: 6
Method Name : getControlParent-> Complexity: 6
Method Name : getParent-> Complexity: 4
Method Name : allStatementsAreInAnonymousClassDeclarationOrCatchClauseOrFinallyBlock-> Complexity: 3
Method Name : isNestedUnderAnonymousClassDeclarationOrCatchClauseOrFinallyBlock-> Complexity: 3
Method Name : isFinallyBlockOfTryStatement-> Complexity: 3
Method Name : getSubTreeCDTNodes-> Complexity: 13
Method Name : isInside-> Complexity: 9
Method Name : hasOnlyKeyWord-> Complexity: 3
Method Name : getPDG-> Complexity: 2
Method Name : getIMethod-> Complexity: 5
Method Name : recursiveGetIMethod-> Complexity: 4
Method Name : getIMethodWithSignature-> Complexity: 17
	 WMC: 22
Total Complexity: 117


Class name: CloneStructureNode
Method Name : setParent-> Complexity: 1
Method Name : isElseIf-> Complexity: 6
Method Name : findNodeG1-> Complexity: 4
Method Name : findNodeG2-> Complexity: 4
Method Name : isGapNodeG1InAdditionalMatches-> Complexity: 4
Method Name : isGapNodeG2InAdditionalMatches-> Complexity: 4
Method Name : addGapChild-> Complexity: 14
Method Name : processFalseControlDependentGap-> Complexity: 15
Method Name : addChild-> Complexity: 5
Method Name : containsChildSymmetricalToNode-> Complexity: 7
Method Name : containsControlChildOfNode-> Complexity: 9
Method Name : containsControlParentOfNode-> Complexity: 15
Method Name : containsMappedReturnStatementInDirectChildren-> Complexity: 7
Method Name : containsMappedThrowStatementInDirectChildren-> Complexity: 7
Method Name : hasElseDescendant-> Complexity: 3
Method Name : lastIfElseIfChainContainsReturnOrThrowStatements-> Complexity: 14
Method Name : getParent-> Complexity: 1
Method Name : getMapping-> Complexity: 1
Method Name : getDescendants-> Complexity: 2
Method Name : getDescendantNodesG1-> Complexity: 5
Method Name : getDescendantNodesG2-> Complexity: 5
Method Name : getChildren-> Complexity: 1
Method Name : isRoot-> Complexity: 1
Method Name : toString-> Complexity: 2
Method Name : equals-> Complexity: 5
Method Name : compareTo-> Complexity: 1
	 WMC: 26
Total Complexity: 143


Class name: CodeFragmentDecomposer
Method Name : getObjectNodeMap-> Complexity: 1
Method Name : getNodesDefiningAttributesOfReference-> Complexity: 6
Method Name : getNodeDeclaringReference-> Complexity: 3
Method Name : getDeclaredVariables-> Complexity: 4
Method Name : getDefinedFieldMap-> Complexity: 6
	 WMC: 5
Total Complexity: 20


Class name: CompleteSubTreeMatch
Method Name : getMatchPairs-> Complexity: 1
Method Name : getAdditionalFragments1-> Complexity: 2
Method Name : getAdditionalFragments2-> Complexity: 2
Method Name : isAdvancedMatch-> Complexity: 1
Method Name : getControlDependenceTreeNodes1-> Complexity: 2
Method Name : getControlDependenceTreeNodes2-> Complexity: 2
Method Name : addStartPoint-> Complexity: 1
Method Name : subsumes-> Complexity: 4
Method Name : toString-> Complexity: 1
	 WMC: 9
Total Complexity: 16


Class name: ControlDependenceTreeGenerator
Method Name : getRoot-> Complexity: 1
Method Name : processControlDependences-> Complexity: 19
Method Name : checkIfTryNodeIsNestedUnderOtherTryNodeOrElse-> Complexity: 5
Method Name : searchForNode-> Complexity: 1
Method Name : searchForElseNode-> Complexity: 1
Method Name : numberOfOutgoingFalseControlDependences-> Complexity: 4
Method Name : isExpressionStatementWithConditionalExpression-> Complexity: 9
	 WMC: 7
Total Complexity: 40


Class name: ControlDependenceTreeNode
Method Name : parentChildRelationship-> Complexity: 4
Method Name : ifElseRelationship-> Complexity: 3
Method Name : getNode-> Complexity: 5
Method Name : getNode-> Complexity: 5
Method Name : getElseNode-> Complexity: 5
Method Name : getControlPredicateNodesInLevel-> Complexity: 4
Method Name : getElseNodesInLevel-> Complexity: 3
Method Name : getMaxLevel-> Complexity: 3
Method Name : getRoot-> Complexity: 2
Method Name : isLeaf-> Complexity: 1
Method Name : getLeaves-> Complexity: 3
Method Name : ifStatementInsideElseIfChain-> Complexity: 1
Method Name : getNumberOfIfParents-> Complexity: 2
Method Name : getNumberOfElseIfChildren-> Complexity: 2
Method Name : getLengthOfElseIfChain-> Complexity: 1
Method Name : getIfParents-> Complexity: 2
Method Name : getElseIfChildren-> Complexity: 2
Method Name : isElseNode-> Complexity: 1
Method Name : setElseNode-> Complexity: 1
Method Name : isTernary-> Complexity: 1
Method Name : setTernary-> Complexity: 1
Method Name : getSiblings-> Complexity: 4
Method Name : getPreviousSibling-> Complexity: 3
Method Name : areAllSiblingsLeaves-> Complexity: 5
Method Name : getControlDependenceTreeNodesInLevel-> Complexity: 3
Method Name : shallowCopy-> Complexity: 1
Method Name : getParent-> Complexity: 1
Method Name : getNode-> Complexity: 1
Method Name : getLevel-> Complexity: 1
Method Name : getChildren-> Complexity: 1
Method Name : getDescendants-> Complexity: 2
Method Name : getNodeCount-> Complexity: 2
Method Name : getNodesInBreadthFirstOrder-> Complexity: 2
Method Name : getIfParent-> Complexity: 1
Method Name : setIfParent-> Complexity: 1
Method Name : getElseIfChild-> Complexity: 1
Method Name : setElseIfChild-> Complexity: 1
Method Name : setIfParentAndElseIfChild-> Complexity: 1
Method Name : hashCode-> Complexity: 2
Method Name : equals-> Complexity: 5
Method Name : toString-> Complexity: 2
Method Name : getId-> Complexity: 6
Method Name : getElseChild-> Complexity: 3
	 WMC: 43
Total Complexity: 101


Class name: ControlDependenceTreeNodeMatchPair
Method Name : getNode1-> Complexity: 1
Method Name : getNode2-> Complexity: 1
Method Name : getNodeDifferences-> Complexity: 1
Method Name : getAdditionalFragments1-> Complexity: 1
Method Name : getAdditionalFragments2-> Complexity: 1
Method Name : ifStatementInsideElseIfChain-> Complexity: 1
Method Name : isElseIfChainSibling-> Complexity: 1
Method Name : getDistinctDifferenceCount-> Complexity: 5
Method Name : getDistinctDifferenceCountIncludingTypeMismatches-> Complexity: 4
Method Name : getNonDistinctDifferenceCount-> Complexity: 4
Method Name : getNonDistinctDifferenceCountIncludingTypeMismatches-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : equals-> Complexity: 3
Method Name : toString-> Complexity: 1
Method Name : compareTo-> Complexity: 3
	 WMC: 15
Total Complexity: 32


Class name: ControlDependenceTreeNodeMatchPairComparator
Method Name : compare-> Complexity: 4
	 WMC: 1
Total Complexity: 4


Class name: DivideAndConquerMatcher
Method Name : hasMappedNodes-> Complexity: 1
Method Name : getPDG1-> Complexity: 1
Method Name : getPDG2-> Complexity: 1
Method Name : getMethodName1-> Complexity: 1
Method Name : getMethodName2-> Complexity: 1
Method Name : getRemovableNodesG1-> Complexity: 1
Method Name : getRemovableNodesG2-> Complexity: 1
Method Name : getRemainingNodesG1-> Complexity: 1
Method Name : getRemainingNodesG2-> Complexity: 1
Method Name : getNonMappedPDGNodesG1MovableBefore-> Complexity: 1
Method Name : getNonMappedPDGNodesG1MovableAfter-> Complexity: 1
Method Name : getNonMappedPDGNodesG2MovableBefore-> Complexity: 1
Method Name : getNonMappedPDGNodesG2MovableAfter-> Complexity: 1
Method Name : getAdditionallyMatchedNodesG1-> Complexity: 1
Method Name : getAdditionallyMatchedNodesG2-> Complexity: 1
Method Name : getDirectlyAccessedLocalFieldsG1-> Complexity: 1
Method Name : getDirectlyAccessedLocalFieldsG2-> Complexity: 1
Method Name : getIndirectlyAccessedLocalFieldsG1-> Complexity: 1
Method Name : getIndirectlyAccessedLocalFieldsG2-> Complexity: 1
Method Name : getDirectlyModifiedLocalFieldsG1-> Complexity: 1
Method Name : getDirectlyModifiedLocalFieldsG2-> Complexity: 1
Method Name : getIndirectlyModifiedLocalFieldsG1-> Complexity: 1
Method Name : getIndirectlyModifiedLocalFieldsG2-> Complexity: 1
Method Name : getAccessedLocalMethodsG1-> Complexity: 1
Method Name : getAccessedLocalMethodsG2-> Complexity: 1
Method Name : getDirectlyAccessedLocalMethodsG1-> Complexity: 1
Method Name : getDirectlyAccessedLocalMethodsG2-> Complexity: 1
Method Name : getIndirectlyAccessedLocalMethodsG1-> Complexity: 1
Method Name : getIndirectlyAccessedLocalMethodsG2-> Complexity: 1
Method Name : getDeclaredLocalVariablesInMappedNodes-> Complexity: 1
Method Name : getDeclaredLocalVariablesInMappedNodesWithinAnonymousClass-> Complexity: 1
Method Name : getDeclaredLocalVariablesInAdditionallyMatchedNodesG1-> Complexity: 1
Method Name : getDeclaredLocalVariableBindingKeysInAdditionallyMatchedNodesG1-> Complexity: 1
Method Name : getDeclaredLocalVariablesInAdditionallyMatchedNodesG2-> Complexity: 1
Method Name : getDeclaredLocalVariableBindingKeysInAdditionallyMatchedNodesG2-> Complexity: 1
Method Name : getCommonPassedParameters-> Complexity: 1
Method Name : getNodeDifferences-> Complexity: 1
Method Name : getNonOverlappingNodeDifferences-> Complexity: 1
Method Name : getPreconditionViolations-> Complexity: 1
Method Name : getRenamedVariables-> Complexity: 1
Method Name : getRenamedVariableBindings-> Complexity: 1
Method Name : getVariablesToBeReturnedG1-> Complexity: 1
Method Name : getVariablesToBeReturnedG2-> Complexity: 1
Method Name : getDeclaredVariablesInRemainingNodesDefinedByMappedNodesG1-> Complexity: 1
Method Name : getDeclaredVariablesInRemainingNodesDefinedByMappedNodesG2-> Complexity: 1
Method Name : movableBeforeFirstMappedNode-> Complexity: 1
Method Name : getReturnTypeBinding-> Complexity: 1
Method Name : getCloneType-> Complexity: 1
Method Name : getCloneRefactoringType-> Complexity: 1
Method Name : isTemplateMethodApplicable-> Complexity: 1
Method Name : getCloneStructureRoot-> Complexity: 1
Method Name : getMaximumStateWithMinimumDifferences-> Complexity: 1
Method Name : getAllNodesInSubTreePDG1-> Complexity: 1
Method Name : getAllNodesInSubTreePDG2-> Complexity: 1
Method Name : findMaximumStateWithMinimumDifferences-> Complexity: 23
Method Name : matchBasedOnControlDependenceTreeStructure-> Complexity: 122
Method Name : findNodesNestedUnderIfAndElse-> Complexity: 5
Method Name : symmetricalIfNodes-> Complexity: 2
Method Name : matchBasedOnIfElseSymmetry-> Complexity: 11
Method Name : matchBasedOnCodeFragments-> Complexity: 47
Method Name : getIncomingDependenciesFromVariables-> Complexity: 8
Method Name : matchBasedOnIdenticalStatements-> Complexity: 13
Method Name : matchBasedOnSwitchCases-> Complexity: 19
Method Name : sameBasicBlock-> Complexity: 9
Method Name : symmetricalIfNodes-> Complexity: 4
Method Name : getPreviousControlMappingG1-> Complexity: 4
Method Name : getPreviousControlMappingG2-> Complexity: 4
Method Name : getNextControlMappingG1-> Complexity: 4
Method Name : getNextControlMappingG2-> Complexity: 4
Method Name : processPDGNodes-> Complexity: 6
Method Name : processPDGNodesWithFirstCloneAsReference-> Complexity: 12
Method Name : processPDGNodesWithSecondCloneAsReference-> Complexity: 12
Method Name : processIdenticalPDGNodes-> Complexity: 17
Method Name : getMaximumStates-> Complexity: 8
Method Name : clear-> Complexity: 3
	 WMC: 75
Total Complexity: 391


Class name: ExtractStatementsVisitor
Method Name : getStatementsList-> Complexity: 1
Method Name : getControlStatementsList-> Complexity: 1
Method Name : visit-> Complexity: 2
Method Name : isStartNodeNestedUnderAnonymousClassDeclaration-> Complexity: 3
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 3
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
	 WMC: 27
Total Complexity: 32


Class name: IdBasedGap
Method Name : getId1-> Complexity: 1
Method Name : getId2-> Complexity: 1
Method Name : isAdvancedMatch-> Complexity: 1
Method Name : compareTo-> Complexity: 7
	 WMC: 4
Total Complexity: 10


Class name: IdBasedMapping
Method Name : getId1-> Complexity: 1
Method Name : getId2-> Complexity: 1
Method Name : compareTo-> Complexity: 1
	 WMC: 3
Total Complexity: 3


Class name: IdenticalStatementDecomposer
Method Name : getIdenticalNodeMap-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: MappingState
Method Name : setRestrictedNodesG1-> Complexity: 1
Method Name : setRestrictedNodesG2-> Complexity: 1
Method Name : addChild-> Complexity: 1
Method Name : getMappedNodesG1-> Complexity: 2
Method Name : getMappedNodesG2-> Complexity: 2
Method Name : getNodeDifferences-> Complexity: 2
Method Name : getSortedNodeDifferences-> Complexity: 2
Method Name : getNonOverlappingNodeDifferences-> Complexity: 2
Method Name : getDistinctDifferenceCount-> Complexity: 6
Method Name : getDistinctDifferenceCountIncludingTypeMismatches-> Complexity: 5
Method Name : getNonDistinctDifferenceCount-> Complexity: 5
Method Name : getNonDistinctDifferenceCountIncludingTypeMismatches-> Complexity: 4
Method Name : getNodeMappingRelativeIdDiff-> Complexity: 2
Method Name : getEditDistanceOfDifferences-> Complexity: 5
Method Name : getMaximumCommonSubGraphs-> Complexity: 5
Method Name : clear-> Complexity: 3
Method Name : containsSameState-> Complexity: 3
Method Name : getLeaves-> Complexity: 3
Method Name : getNodeMappingSize-> Complexity: 6
Method Name : getSize-> Complexity: 1
Method Name : traverse-> Complexity: 16
Method Name : nodesDeclareVariableUsedInMappedNodes-> Complexity: 7
Method Name : edgeMappingWithAlreadyVisitedNodes-> Complexity: 3
Method Name : pruneBranch-> Complexity: 3
Method Name : symmetricalIfNodes-> Complexity: 2
Method Name : mappedControlParents-> Complexity: 7
Method Name : incomingDataDependenciesFromUnvisitedNodes-> Complexity: 7
Method Name : nodeIsUnmappedTemporaryVariableDeclaration-> Complexity: 7
Method Name : incomingDataDependenciesFromNonMatchingNodes-> Complexity: 17
Method Name : findNodeDeclaringVariable-> Complexity: 3
Method Name : findMappingWithBothNodes-> Complexity: 3
Method Name : findMappingWithNodeG1-> Complexity: 3
Method Name : findMappingWithNodeG2-> Complexity: 3
Method Name : containsBothNodesInMappings-> Complexity: 3
Method Name : containsNodeG1InMappings-> Complexity: 3
Method Name : containsNodeG2InMappings-> Complexity: 3
Method Name : getChildStateWithNodeMapping-> Complexity: 3
Method Name : containsAtLeastOneNodeInMappings-> Complexity: 3
Method Name : containsNodeInMappings-> Complexity: 3
Method Name : getNodeMappings-> Complexity: 1
Method Name : getSortedNodeMappings-> Complexity: 1
Method Name : sameNodeMappings-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : toString-> Complexity: 2
	 WMC: 44
Total Complexity: 168


Class name: NodeMapping
Method Name : getPreconditionViolations-> Complexity: 1
Method Name : addPreconditionViolation-> Complexity: 1
Method Name : getNonOverlappingNodeDifferences-> Complexity: 5
Method Name : isDifferenceInConditionalExpressionOfAdvancedLoopMatch-> Complexity: 8
Method Name : isExpressionWithinExpression-> Complexity: 3
Method Name : equals-> Complexity: 6
Method Name : compareTo-> Complexity: 9
	 WMC: 7
Total Complexity: 33


Class name: PDGEdgeMapping
Method Name : getEdgeG1-> Complexity: 1
Method Name : getEdgeG2-> Complexity: 1
Method Name : isCompatible-> Complexity: 7
Method Name : equalData-> Complexity: 2
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
	 WMC: 7
Total Complexity: 17


Class name: PDGElseGap
Method Name : getNodeG1-> Complexity: 1
Method Name : getNodeG2-> Complexity: 1
Method Name : getNodeDifferences-> Complexity: 1
Method Name : equals-> Complexity: 5
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 3
	 WMC: 6
Total Complexity: 13


Class name: PDGElseMapping
Method Name : getNodeG1-> Complexity: 1
Method Name : getNodeG2-> Complexity: 1
Method Name : getNodeDifferences-> Complexity: 1
Method Name : isAdvancedMatch-> Complexity: 1
Method Name : getSymmetricalIfNodePair-> Complexity: 1
Method Name : setSymmetricalIfNodePair-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
	 WMC: 9
Total Complexity: 12


Class name: PDGMapper
Method Name : addNodeInOrder-> Complexity: 3
Method Name : generateControlDependenceSubTree-> Complexity: 3
Method Name : insertCDTNodeInTree-> Complexity: 6
Method Name : insertCDTNodeInTreeAfterSibling-> Complexity: 6
Method Name : getBottomUpSubTreeMatches-> Complexity: 1
Method Name : getSubTreeMappers-> Complexity: 1
	 WMC: 6
Total Complexity: 20


Class name: PDGNodeGap
Method Name : getNodeG1-> Complexity: 1
Method Name : getNodeG2-> Complexity: 1
Method Name : getNodeDifferences-> Complexity: 1
Method Name : isFalseControlDependent-> Complexity: 7
Method Name : isNestedUnderElse-> Complexity: 6
Method Name : equals-> Complexity: 5
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 3
	 WMC: 8
Total Complexity: 26


Class name: PDGNodeMapping
Method Name : getNodeG1-> Complexity: 1
Method Name : getNodeG2-> Complexity: 1
Method Name : getNodeDifferences-> Complexity: 1
Method Name : isAdvancedMatch-> Complexity: 1
Method Name : getAdditionallyMatchedFragments1-> Complexity: 1
Method Name : getAdditionallyMatchedFragments2-> Complexity: 1
Method Name : containsAdditionallyMatchedFragment1-> Complexity: 4
Method Name : containsAdditionallyMatchedFragment2-> Complexity: 4
Method Name : getTypeRoot1-> Complexity: 1
Method Name : getTypeRoot2-> Complexity: 1
Method Name : getSymmetricalIfNodePair-> Complexity: 1
Method Name : setSymmetricalIfNodePair-> Complexity: 1
Method Name : isSymmetricalIfElse-> Complexity: 1
Method Name : setSymmetricalIfElse-> Complexity: 1
Method Name : isFalseControlDependent-> Complexity: 3
Method Name : isNode1FalseControlDependent-> Complexity: 3
Method Name : isNode2FalseControlDependent-> Complexity: 3
Method Name : isNestedUnderElse-> Complexity: 6
Method Name : matchingVariableDifference-> Complexity: 8
Method Name : isVoidMethodCallDifferenceCoveringEntireStatement-> Complexity: 8
Method Name : declaresInconsistentlyRenamedVariable-> Complexity: 3
Method Name : declaresVariableWithVariableNameMismatch-> Complexity: 6
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 2
	 WMC: 25
Total Complexity: 67


Class name: PDGRegionSubTreeMapper
Method Name : getNodesInRegion1-> Complexity: 1
Method Name : getNodesInRegion2-> Complexity: 1
Method Name : getElseNodesOfSymmetricalIfStatement1-> Complexity: 1
Method Name : getElseNodesOfSymmetricalIfStatement2-> Complexity: 1
Method Name : getIfParentChildren1-> Complexity: 1
Method Name : getIfParentChildren2-> Complexity: 1
Method Name : getNodesInRegion-> Complexity: 10
Method Name : getElseNodesOfSymmetricalIfStatement-> Complexity: 6
Method Name : getIfParentChildren-> Complexity: 3
Method Name : cloneFragmentContainsPDGNode-> Complexity: 2
	 WMC: 10
Total Complexity: 27


Class name: PDGSubTreeMapper
Method Name : getNodesInRegion1-> Complexity: 1
Method Name : getNodesInRegion2-> Complexity: 1
Method Name : getElseNodesOfSymmetricalIfStatement1-> Complexity: 1
Method Name : getElseNodesOfSymmetricalIfStatement2-> Complexity: 1
Method Name : getIfParentChildren1-> Complexity: 1
Method Name : getIfParentChildren2-> Complexity: 1
Method Name : getNodesInRegion-> Complexity: 10
Method Name : getElseNodesOfSymmetricalIfStatement-> Complexity: 6
Method Name : getIfParentChildren-> Complexity: 3
	 WMC: 9
Total Complexity: 25


Class name: BoldStyler
Method Name : applyStyles-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: DualExpressionPreconditionViolation
Method Name : getExpression1-> Complexity: 1
Method Name : getExpression2-> Complexity: 1
Method Name : getViolation-> Complexity: 3
Method Name : getStyledViolation-> Complexity: 3
	 WMC: 4
Total Complexity: 8


Class name: DualExpressionWithCommonSuperTypePreconditionViolation
Method Name : getViolation-> Complexity: 3
Method Name : getStyledViolation-> Complexity: 7
	 WMC: 2
Total Complexity: 10


Class name: ExpressionPreconditionViolation
Method Name : getExpression-> Complexity: 1
Method Name : getViolation-> Complexity: 1
Method Name : getStyledViolation-> Complexity: 1
	 WMC: 3
Total Complexity: 3


Class name: NormalStyler
Method Name : applyStyles-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: NotAllPossibleExecutionFlowsEndInReturnPreconditionViolation
Method Name : getViolation-> Complexity: 1
Method Name : getStyledViolation-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: PreconditionViolation
Method Name : getSuggestions-> Complexity: 1
Method Name : addSuggestion-> Complexity: 1
Method Name : toString-> Complexity: 1
Method Name : getType-> Complexity: 1
	 WMC: 4
Total Complexity: 4


Class name: ReturnedVariablePreconditionViolation
Method Name : getViolation-> Complexity: 3
Method Name : getStyledViolation-> Complexity: 7
	 WMC: 2
Total Complexity: 10


Class name: StatementPreconditionViolation
Method Name : getStatement-> Complexity: 1
Method Name : getViolation-> Complexity: 9
Method Name : getStyledViolation-> Complexity: 9
	 WMC: 3
Total Complexity: 19


Class name: Suggestion
Method Name : getPreconditionViolation-> Complexity: 1
Method Name : getSuggestion-> Complexity: 1
Method Name : setSuggestion-> Complexity: 1
	 WMC: 3
Total Complexity: 3


Class name: UncommonSuperclassPreconditionViolation
Method Name : getViolation-> Complexity: 1
Method Name : getStyledViolation-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: ZeroMatchedStatementsPreconditionViolation
Method Name : getViolation-> Complexity: 1
Method Name : getStyledViolation-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: PreconditionExaminer
Method Name : getCloneStructureRoot-> Complexity: 1
Method Name : getMaximumStateWithMinimumDifferences-> Complexity: 1
Method Name : getAllNodesInSubTreePDG1-> Complexity: 1
Method Name : getAllNodesInSubTreePDG2-> Complexity: 1
Method Name : findNonMappedNodes-> Complexity: 6
Method Name : findDeclaredVariablesInRemainingNodesDefinedByMappedNodes-> Complexity: 10
Method Name : findDeclaredVariablesInMappedNodesUsedByNonMappedNodes-> Complexity: 13
Method Name : findPassedParameters-> Complexity: 25
Method Name : commonPassedParametersAlreadyContainOneOfTheKeys-> Complexity: 3
Method Name : sortVariables-> Complexity: 12
Method Name : appearsInMultipleDifferences-> Complexity: 3
Method Name : appearsOnlyInDifferences1-> Complexity: 7
Method Name : appearsOnlyInDifferences2-> Complexity: 7
Method Name : appearsOnlyAsPartOfDifferences1-> Complexity: 7
Method Name : appearsOnlyAsPartOfDifferences2-> Complexity: 7
Method Name : isInsideDifference-> Complexity: 2
Method Name : findRenamedVariableName1-> Complexity: 3
Method Name : findRenamedVariableName2-> Complexity: 3
Method Name : extractPassedParameters-> Complexity: 6
Method Name : getVariableBinding-> Complexity: 3
Method Name : findLocallyAccessedFields-> Complexity: 59
Method Name : getAllSuperTypesUpToCommonSuperclass-> Complexity: 4
Method Name : getAdditionalLocallyAccessedFieldsAndMethods-> Complexity: 10
Method Name : getPDG1-> Complexity: 1
Method Name : getPDG2-> Complexity: 1
Method Name : getMethodName1-> Complexity: 1
Method Name : getMethodName2-> Complexity: 1
Method Name : getRemovableNodesG1-> Complexity: 1
Method Name : getRemovableNodesG2-> Complexity: 1
Method Name : getRemainingNodesG1-> Complexity: 1
Method Name : getRemainingNodesG2-> Complexity: 1
Method Name : getNonMappedPDGNodesG1MovableBefore-> Complexity: 1
Method Name : getNonMappedPDGNodesG1MovableAfter-> Complexity: 1
Method Name : getNonMappedPDGNodesG2MovableBefore-> Complexity: 1
Method Name : getNonMappedPDGNodesG2MovableAfter-> Complexity: 1
Method Name : getAdditionallyMatchedNodesG1-> Complexity: 1
Method Name : getAdditionallyMatchedNodesG2-> Complexity: 1
Method Name : getVariablesToBeReturnedG1-> Complexity: 4
Method Name : getVariablesToBeReturnedG2-> Complexity: 4
Method Name : getDeclaredVariablesInRemainingNodesDefinedByMappedNodesG1-> Complexity: 4
Method Name : getDeclaredVariablesInRemainingNodesDefinedByMappedNodesG2-> Complexity: 4
Method Name : getDirectlyAccessedLocalFieldsG1-> Complexity: 1
Method Name : getDirectlyAccessedLocalFieldsG2-> Complexity: 1
Method Name : getIndirectlyAccessedLocalFieldsG1-> Complexity: 1
Method Name : getIndirectlyAccessedLocalFieldsG2-> Complexity: 1
Method Name : getDirectlyModifiedLocalFieldsG1-> Complexity: 1
Method Name : getDirectlyModifiedLocalFieldsG2-> Complexity: 1
Method Name : getIndirectlyModifiedLocalFieldsG1-> Complexity: 1
Method Name : getIndirectlyModifiedLocalFieldsG2-> Complexity: 1
Method Name : getAccessedLocalMethodsG1-> Complexity: 1
Method Name : getAccessedLocalMethodsG2-> Complexity: 1
Method Name : getDirectlyAccessedLocalMethodsG1-> Complexity: 1
Method Name : getDirectlyAccessedLocalMethodsG2-> Complexity: 1
Method Name : getIndirectlyAccessedLocalMethodsG1-> Complexity: 1
Method Name : getIndirectlyAccessedLocalMethodsG2-> Complexity: 1
Method Name : getDeclaredLocalVariablesInMappedNodes-> Complexity: 6
Method Name : getDeclaredLocalVariablesInMappedNodesWithinAnonymousClass-> Complexity: 1
Method Name : getDeclaredLocalVariablesInAdditionallyMatchedNodesG1-> Complexity: 4
Method Name : getDeclaredLocalVariableBindingKeysInAdditionallyMatchedNodesG1-> Complexity: 2
Method Name : getDeclaredLocalVariablesInAdditionallyMatchedNodesG2-> Complexity: 4
Method Name : getDeclaredLocalVariableBindingKeysInAdditionallyMatchedNodesG2-> Complexity: 2
Method Name : getCommonPassedParameters-> Complexity: 7
Method Name : getNodeDifferences-> Complexity: 1
Method Name : getSortedNodeDifferences-> Complexity: 1
Method Name : getNonOverlappingNodeDifferences-> Complexity: 1
Method Name : findRenamedVariables-> Complexity: 27
Method Name : alreadyContainsOneOfTheKeys-> Complexity: 3
Method Name : getAdditionallyMatchedFragmentsNotBeingUnderMappedStatement-> Complexity: 9
Method Name : getVariables-> Complexity: 13
Method Name : getBindingSignaturePairForVariable1-> Complexity: 3
Method Name : getBindingSignaturePairForVariable2-> Complexity: 3
Method Name : getPreconditionViolations-> Complexity: 1
Method Name : getRenamedVariables-> Complexity: 1
Method Name : getRenamedVariableBindings-> Complexity: 7
Method Name : variablesToBeReturned-> Complexity: 17
Method Name : isAssignmentToArrayAccess-> Complexity: 11
Method Name : mappedNodeDeclaresVariable-> Complexity: 3
Method Name : checkPreconditionsAboutReturnedVariables-> Complexity: 5
Method Name : checkIfAllPossibleExecutionFlowsEndInReturn-> Complexity: 5
Method Name : getAllNodesInCloneBlock-> Complexity: 8
Method Name : containSwitchCase-> Complexity: 3
Method Name : findSwitchCaseBefore-> Complexity: 4
Method Name : findSwitchCaseAfter-> Complexity: 5
Method Name : extractConditionalReturnStatements-> Complexity: 5
Method Name : extractReturnStatementsAfterId-> Complexity: 3
Method Name : conditionalReturnStatement-> Complexity: 3
Method Name : branchStatementWithInnermostLoop-> Complexity: 5
Method Name : switchCaseStatementWithInnermostSwitch-> Complexity: 3
Method Name : checkIfStatementIsSuperConstructorInvocation-> Complexity: 2
Method Name : checkIfStatementIsThisConstructorInvocation-> Complexity: 2
Method Name : checkIfStatementContainsSuperMethodInvocation-> Complexity: 5
Method Name : checkCloneStructureNodeForPreconditions-> Complexity: 3
Method Name : checkPreconditions-> Complexity: 47
Method Name : getDeclaredMethods-> Complexity: 4
Method Name : getDeclaredFields-> Complexity: 4
Method Name : isVariableWithTypeMismatchDifference-> Complexity: 5
Method Name : findMethodsCalledFromType-> Complexity: 11
Method Name : checkDifferenceForMethodArgumentPassing-> Complexity: 18
Method Name : processNonMappedNode-> Complexity: 15
Method Name : isTheOnlyUnmappedNodeInsideMappedTryBlock-> Complexity: 3
Method Name : controlParentExaminesVariableUsedInNonMappedNode-> Complexity: 17
Method Name : controlParentExaminesVariableUsedInDifferenceExpression-> Complexity: 17
Method Name : controlParentExaminesVariableInCondition-> Complexity: 12
Method Name : processNonMappedNodesMovableBeforeAndAfter-> Complexity: 5
Method Name : examineIfNonMappedNodesUpdateTheSameVariable-> Complexity: 15
Method Name : movableNonMappedNodeBeforeNonMappedNodesMovableAfter-> Complexity: 8
Method Name : movableBeforeFirstMappedNode-> Complexity: 1
Method Name : isFirstNonMappedNode-> Complexity: 5
Method Name : movableNonMappedNodeBeforeFirstMappedNode-> Complexity: 12
Method Name : isLastNonMappedNode-> Complexity: 5
Method Name : movableNonMappedNodeAfterLastMappedNode-> Complexity: 14
Method Name : isVoidMethodCall-> Complexity: 5
Method Name : isMethodCallDifferenceCoveringEntireStatement-> Complexity: 3
Method Name : isFieldUpdate-> Complexity: 1
Method Name : isUpdated-> Complexity: 6
Method Name : isField-> Complexity: 7
Method Name : isParameterizableExpression-> Complexity: 30
Method Name : expressionUsesVariableWhoseStateIsModifiedByPreviousStatements-> Complexity: 6
Method Name : isAdvancedMatchNode-> Complexity: 14
Method Name : isExpressionUnderStatement-> Complexity: 3
Method Name : isExpressionWithinExpression-> Complexity: 3
Method Name : getMethodBinding-> Complexity: 5
Method Name : getCloneType-> Complexity: 6
Method Name : isType3-> Complexity: 10
Method Name : getCloneRefactoringType-> Complexity: 1
Method Name : isTemplateMethodApplicable-> Complexity: 10
Method Name : computeRefactoringType-> Complexity: 22
Method Name : infeasibleRefactoring-> Complexity: 3
Method Name : pullUpToCommonSuperclass-> Complexity: 1
Method Name : superclassDirectlyInheritedFromRefactoredSubclasses-> Complexity: 1
Method Name : superclassIsOneOfRefactoredSubclasses-> Complexity: 2
Method Name : superclassInheritedOnlyByRefactoredSubclasses-> Complexity: 3
Method Name : extractToUtilityClass-> Complexity: 1
Method Name : cloneFragmentsDoNotAccessFieldsOrMethods-> Complexity: 47
Method Name : extractSimpleNames-> Complexity: 2
Method Name : extractSimpleNames-> Complexity: 7
Method Name : extractMethodInvocations-> Complexity: 2
Method Name : extractMethodInvocations-> Complexity: 7
Method Name : extractThisExpressions-> Complexity: 2
Method Name : extractThisExpressions-> Complexity: 7
Method Name : allAccessedLocalMethodsHaveMatchingSignatures-> Complexity: 4
Method Name : getReturnTypeBinding-> Complexity: 3
Method Name : extractTypeBinding-> Complexity: 1
Method Name : findReturnTypeBinding-> Complexity: 20
Method Name : determineType-> Complexity: 18
Method Name : extractReturnTypeBinding-> Complexity: 7
	 WMC: 146
Total Complexity: 914


Class name: StatementCollector
Method Name : getStatementList-> Complexity: 1
Method Name : getControlStatementList-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 3
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
	 WMC: 26
Total Complexity: 28


Class name: SubTreeMatchComparator
Method Name : compare-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: SwitchBodyDecomposer
Method Name : getSwitchCaseNodeMap-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: TopDownCDTMapper
Method Name : processTopDown-> Complexity: 7
Method Name : secondPhase-> Complexity: 10
Method Name : getSolutions-> Complexity: 1
Method Name : isSubsumedByCurrentSolutions-> Complexity: 3
Method Name : getMaximumCompleteSubTreeMatches-> Complexity: 8
Method Name : findTopDownMatches-> Complexity: 8
	 WMC: 6
Total Complexity: 37


Class name: VariableBindingKeyPair
Method Name : getKey1-> Complexity: 1
Method Name : getKey2-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 1
Method Name : toString-> Complexity: 1
	 WMC: 5
Total Complexity: 7


Class name: VariableBindingPair
Method Name : getBinding1-> Complexity: 1
Method Name : getBinding2-> Complexity: 1
Method Name : hasQualifiedType-> Complexity: 1
Method Name : getVariableBindingKeyPair-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 1
Method Name : toString-> Complexity: 1
	 WMC: 7
Total Complexity: 9


Class name: MethodCallAnalyzer
Method Name : processArgumentsOfInternalMethodInvocation-> Complexity: 58
Method Name : processArgumentOfInternalMethodInvocation-> Complexity: 32
Method Name : processArgumentOfExternalMethodInvocation-> Complexity: 12
Method Name : getArgumentPosition-> Complexity: 4
Method Name : processInternalMethodInvocation-> Complexity: 52
Method Name : processExternalMethodInvocation-> Complexity: 40
Method Name : exactSubType-> Complexity: 6
Method Name : getInvokedMethodDeclaration-> Complexity: 7
Method Name : handleAlreadyAnalyzedMethod-> Complexity: 8
Method Name : composeVariable-> Complexity: 3
Method Name : extractTypeDeclarations-> Complexity: 5
Method Name : extractAnonymousClassDeclarations-> Complexity: 11
Method Name : equalType-> Complexity: 18
Method Name : equalSignature-> Complexity: 6
Method Name : equalSignatureIgnoringSubclassTypeDifferences-> Complexity: 6
Method Name : getMatchingMethodDeclarationsForSubType-> Complexity: 11
Method Name : isUnprocessedMethod-> Complexity: 1
	 WMC: 17
Total Complexity: 280


Class name: PDG
Method Name : getEntryNode-> Complexity: 1
Method Name : getMethod-> Complexity: 1
Method Name : getIFile-> Complexity: 1
Method Name : getVariableDeclarationObjectsInMethod-> Complexity: 1
Method Name : getVariableDeclarationsInMethod-> Complexity: 2
Method Name : getFieldsAccessedInMethod-> Complexity: 2
Method Name : isDirectlyNestedWithinBlockNode-> Complexity: 3
Method Name : isNestedWithinBlockNode-> Complexity: 3
Method Name : getNestedNodesWithinBlockNode-> Complexity: 2
Method Name : getVariableDeclarationsAndAccessedFieldsInMethod-> Complexity: 1
Method Name : getVariablesWithMethodBodyScope-> Complexity: 5
Method Name : getAllDeclaredVariables-> Complexity: 5
Method Name : getTotalNumberOfStatements-> Complexity: 1
Method Name : getNodeIterator-> Complexity: 1
Method Name : getDefinedAttributesOfReference-> Complexity: 6
Method Name : getAssignmentNodesOfVariableCriterion-> Complexity: 3
Method Name : getAssignmentNodesOfVariableCriterionIncludingDeclaration-> Complexity: 3
Method Name : handleThrowExceptionNodes-> Complexity: 10
Method Name : isControlDependent-> Complexity: 4
Method Name : handleSwitchCaseNodes-> Complexity: 14
Method Name : isDirectlyDependentOnSwitchNode-> Complexity: 4
Method Name : handleJumpNodes-> Complexity: 8
Method Name : getInnerMostLoopNodesForJumpNodes-> Complexity: 8
Method Name : getLoopNodeUnderLabel-> Complexity: 6
Method Name : getInnerMostLoopNode-> Complexity: 5
Method Name : containsNodeWithID-> Complexity: 3
Method Name : createControlDependenciesFromEntryNode-> Complexity: 14
Method Name : findParentOfBlockNode-> Complexity: 5
Method Name : processCFGNode-> Complexity: 7
Method Name : processControlPredicate-> Complexity: 5
Method Name : isNested-> Complexity: 3
Method Name : performAliasAnalysis-> Complexity: 1
Method Name : createDataDependencies-> Complexity: 4
Method Name : createDataDependenciesFromEntryNode-> Complexity: 5
Method Name : aliasSearch-> Complexity: 6
Method Name : dataDependenceSearch-> Complexity: 9
Method Name : antiDependenceSearch-> Complexity: 7
Method Name : outputDependenceSearch-> Complexity: 7
Method Name : getBasicBlocks-> Complexity: 1
Method Name : forwardReachableBlocks-> Complexity: 1
Method Name : directlyDominates-> Complexity: 3
Method Name : dominatedBlocks-> Complexity: 2
Method Name : dominatedBlocks-> Complexity: 4
Method Name : boundaryBlocks-> Complexity: 3
Method Name : blockBasedRegion-> Complexity: 3
Method Name : getReturnedVariables-> Complexity: 4
Method Name : getFirstDef-> Complexity: 3
Method Name : getLastUse-> Complexity: 3
	 WMC: 48
Total Complexity: 203


Class name: PDGAbstractDataDependence
Method Name : getData-> Complexity: 1
Method Name : getLoop-> Complexity: 1
Method Name : isLoopCarried-> Complexity: 2
Method Name : equals-> Complexity: 5
Method Name : hashCode-> Complexity: 3
Method Name : toString-> Complexity: 1
	 WMC: 6
Total Complexity: 13


Class name: PDGAntiDependence
	 WMC: 0
Total Complexity: 0


Class name: PDGBlockNode
Method Name : getControlDependenceParent-> Complexity: 3
Method Name : determineDefinedAndUsedVariables-> Complexity: 29
	 WMC: 2
Total Complexity: 32


Class name: PDGControlDependence
Method Name : isTrueControlDependence-> Complexity: 2
Method Name : isFalseControlDependence-> Complexity: 2
Method Name : sameLabel-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 2
	 WMC: 6
Total Complexity: 12


Class name: PDGControlPredicateNode
Method Name : determineDefinedAndUsedVariables-> Complexity: 29
	 WMC: 1
Total Complexity: 29


Class name: PDGDataDependence
	 WMC: 0
Total Complexity: 0


Class name: PDGDependence
Method Name : getSrc-> Complexity: 1
Method Name : getDst-> Complexity: 1
Method Name : getType-> Complexity: 1
	 WMC: 3
Total Complexity: 3


Class name: PDGExitNode
Method Name : getReturnedVariable-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: PDGExpression
Method Name : getDeclaredVariableIterator-> Complexity: 1
Method Name : getDefinedVariableIterator-> Complexity: 1
Method Name : getUsedVariableIterator-> Complexity: 1
Method Name : definesLocalVariable-> Complexity: 1
Method Name : usesLocalVariable-> Complexity: 1
Method Name : throwsException-> Complexity: 2
Method Name : determineDefinedAndUsedVariables-> Complexity: 27
Method Name : processArgumentsOfInternalMethodInvocation-> Complexity: 3
Method Name : processArgumentsOfInternalClassInstanceCreation-> Complexity: 3
	 WMC: 9
Total Complexity: 40


Class name: PDGMethodEntryNode
Method Name : getMethod-> Complexity: 1
Method Name : getBasicBlock-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 1
Method Name : toString-> Complexity: 1
	 WMC: 5
Total Complexity: 7


Class name: PDGNode
Method Name : getDeclaredVariableIterator-> Complexity: 1
Method Name : getDefinedVariableIterator-> Complexity: 1
Method Name : getUsedVariableIterator-> Complexity: 1
Method Name : getCFGNode-> Complexity: 1
Method Name : getThrownExceptionTypes-> Complexity: 1
Method Name : getDependenceIterator-> Complexity: 1
Method Name : getOutgoingDependenceIterator-> Complexity: 1
Method Name : getIncomingDependenceIterator-> Complexity: 1
Method Name : getControlDependentNodes-> Complexity: 3
Method Name : getTrueControlDependentNodes-> Complexity: 4
Method Name : getControlDependenceParent-> Complexity: 3
Method Name : isControlDependentOnNode-> Complexity: 3
Method Name : isControlDependentOnOneOfTheNodes-> Complexity: 3
Method Name : getIncomingControlDependence-> Complexity: 3
Method Name : hasIncomingControlDependenceFromMethodEntryNode-> Complexity: 4
Method Name : incomingDataDependencesFromNodesDeclaringOrDefiningVariables-> Complexity: 6
Method Name : declaresLocalVariable-> Complexity: 1
Method Name : definesLocalVariable-> Complexity: 1
Method Name : usesLocalVariable-> Complexity: 1
Method Name : instantiatesLocalVariable-> Complexity: 6
Method Name : containsClassInstanceCreation-> Complexity: 2
Method Name : throwsException-> Complexity: 2
Method Name : getBasicBlock-> Complexity: 1
Method Name : getStatement-> Complexity: 1
Method Name : getASTStatement-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 1
Method Name : toString-> Complexity: 1
Method Name : compareTo-> Complexity: 3
Method Name : getAnnotation-> Complexity: 1
Method Name : processArgumentsOfInternalMethodInvocation-> Complexity: 3
Method Name : processArgumentsOfInternalClassInstanceCreation-> Complexity: 3
Method Name : updateReachingAliasSet-> Complexity: 13
Method Name : processAssignment-> Complexity: 17
Method Name : applyReachingAliasSet-> Complexity: 11
Method Name : getClassInstantiations-> Complexity: 13
Method Name : changesStateOfVariable-> Complexity: 4
Method Name : changesStateOfReference-> Complexity: 4
Method Name : accessesReference-> Complexity: 4
Method Name : assignsReference-> Complexity: 14
	 WMC: 40
Total Complexity: 148


Class name: PDGObjectSliceUnion
Method Name : isNestedInside-> Complexity: 4
Method Name : getThrowStatementNodesWithinRegion-> Complexity: 3
Method Name : getVariableDeclarationsAndAccessedFieldsInMethod-> Complexity: 1
Method Name : getMethod-> Complexity: 1
Method Name : getIFile-> Complexity: 1
Method Name : getMethodSize-> Complexity: 1
Method Name : getBoundaryBlock-> Complexity: 1
Method Name : getExtractedMethodInvocationInsertionNode-> Complexity: 1
Method Name : getObjectReference-> Complexity: 1
Method Name : getSliceNodes-> Complexity: 1
Method Name : getPassedParameters-> Complexity: 1
Method Name : getRemovableNodes-> Complexity: 1
Method Name : getDeclarationOfObjectReference-> Complexity: 3
Method Name : declarationOfObjectReferenceBelongsToSliceNodes-> Complexity: 3
Method Name : declarationOfObjectReferenceBelongsToRemovableNodes-> Complexity: 3
Method Name : sliceContainsDeclaration-> Complexity: 3
Method Name : allNodeCriteriaAreDuplicated-> Complexity: 3
Method Name : returnStatementIsControlDependentOnSliceNode-> Complexity: 5
Method Name : isControlDependentOnSliceNode-> Complexity: 4
Method Name : nonDuplicatedSliceNodeAntiDependsOnNonRemovableNode-> Complexity: 6
Method Name : nodeDependsOnNonRemovableNode-> Complexity: 5
Method Name : nonDuplicatedSliceNodeOutputDependsOnNonRemovableNode-> Complexity: 6
Method Name : duplicatedSliceNodeWithClassInstantiationHasDependenceOnRemovableNode-> Complexity: 8
Method Name : containsDuplicateNodeWithStateChangingMethodInvocation-> Complexity: 7
Method Name : objectSliceEqualsMethodBody-> Complexity: 4
Method Name : objectSliceHasMinimumSize-> Complexity: 4
Method Name : objectReferenceIsReturnedVariableInOriginalMethod-> Complexity: 2
Method Name : declarationOfObjectReferenceIsDuplicated-> Complexity: 3
Method Name : sliceContainsReturnStatement-> Complexity: 3
Method Name : sliceContainsBranchStatementWithoutInnermostLoop-> Complexity: 6
Method Name : complyWithUserThresholds-> Complexity: 5
Method Name : variableCriterionIsStreamClosedInFinallyBlock-> Complexity: 5
Method Name : sliceContainsVariableDeclarationClosedInFinallyBlock-> Complexity: 6
Method Name : satisfiesRules-> Complexity: 2
	 WMC: 34
Total Complexity: 113


Class name: PDGObjectSliceUnionCollection
Method Name : getSliceUnions-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: PDGOutputDependence
	 WMC: 0
Total Complexity: 0


Class name: PDGSlice
Method Name : getVariableDeclarationsAndAccessedFieldsInMethod-> Complexity: 1
Method Name : getMethod-> Complexity: 1
Method Name : getIFile-> Complexity: 1
Method Name : getMethodSize-> Complexity: 1
Method Name : getBoundaryBlock-> Complexity: 1
Method Name : getExtractedMethodInvocationInsertionNode-> Complexity: 1
Method Name : getNodeCriterion-> Complexity: 1
Method Name : getLocalVariableCriterion-> Complexity: 1
Method Name : getSliceNodes-> Complexity: 1
Method Name : getPassedParameters-> Complexity: 1
Method Name : getRemovableNodes-> Complexity: 1
Method Name : nodeBelongsToBlockBasedRegion-> Complexity: 1
Method Name : edgeBelongsToBlockBasedRegion-> Complexity: 1
Method Name : getDeclarationOfVariableCriterion-> Complexity: 3
Method Name : declarationOfVariableCriterionBelongsToSliceNodes-> Complexity: 3
Method Name : declarationOfVariableCriterionBelongsToRemovableNodes-> Complexity: 3
Method Name : nodeCriterionIsDuplicated-> Complexity: 2
Method Name : satisfiesRules-> Complexity: 2
Method Name : sliceContainsBranchStatementWithoutInnermostLoop-> Complexity: 6
Method Name : sliceContainsReturnStatement-> Complexity: 3
Method Name : declarationOfVariableCriterionIsDuplicated-> Complexity: 3
Method Name : returnStatementIsControlDependentOnSliceNode-> Complexity: 5
Method Name : isControlDependentOnSliceNode-> Complexity: 4
Method Name : nonDuplicatedSliceNodeAntiDependsOnNonRemovableNode-> Complexity: 6
Method Name : nodeDependsOnNonRemovableNode-> Complexity: 5
Method Name : nonDuplicatedSliceNodeOutputDependsOnNonRemovableNode-> Complexity: 6
Method Name : duplicatedSliceNodeWithClassInstantiationHasDependenceOnRemovableNode-> Complexity: 8
Method Name : nodeCritetionIsDeclarationOfVariableCriterion-> Complexity: 2
Method Name : variableCriterionIsReturnedVariableInOriginalMethod-> Complexity: 2
Method Name : containsDuplicateNodeWithStateChangingMethodInvocation-> Complexity: 7
Method Name : sliceContainsDeclaration-> Complexity: 3
Method Name : computeSlice-> Complexity: 4
Method Name : computeSlice-> Complexity: 1
Method Name : getDefNodes-> Complexity: 4
Method Name : traverseBackward-> Complexity: 4
Method Name : toString-> Complexity: 1
	 WMC: 36
Total Complexity: 100


Class name: PDGSliceUnion
Method Name : isNestedInside-> Complexity: 4
Method Name : getThrowStatementNodesWithinRegion-> Complexity: 3
Method Name : getVariableDeclarationsAndAccessedFieldsInMethod-> Complexity: 1
Method Name : getMethod-> Complexity: 1
Method Name : getIFile-> Complexity: 1
Method Name : getMethodSize-> Complexity: 1
Method Name : getBoundaryBlock-> Complexity: 1
Method Name : getNodeCriteria-> Complexity: 1
Method Name : getExtractedMethodInvocationInsertionNode-> Complexity: 1
Method Name : getLocalVariableCriterion-> Complexity: 1
Method Name : getSliceNodes-> Complexity: 1
Method Name : getPassedParameters-> Complexity: 1
Method Name : getRemovableNodes-> Complexity: 1
Method Name : getDeclarationOfVariableCriterion-> Complexity: 3
Method Name : declarationOfVariableCriterionBelongsToSliceNodes-> Complexity: 3
Method Name : declarationOfVariableCriterionBelongsToRemovableNodes-> Complexity: 3
Method Name : sliceContainsDeclaration-> Complexity: 3
Method Name : allNodeCriteriaAreDuplicated-> Complexity: 3
Method Name : returnStatementIsControlDependentOnSliceNode-> Complexity: 5
Method Name : isControlDependentOnSliceNode-> Complexity: 4
Method Name : nonDuplicatedSliceNodeAntiDependsOnNonRemovableNode-> Complexity: 6
Method Name : nodeDependsOnNonRemovableNode-> Complexity: 5
Method Name : nonDuplicatedSliceNodeOutputDependsOnNonRemovableNode-> Complexity: 6
Method Name : duplicatedSliceNodeWithClassInstantiationHasDependenceOnRemovableNode-> Complexity: 8
Method Name : containsDuplicateNodeWithStateChangingMethodInvocation-> Complexity: 7
Method Name : variableCriterionIsReturnedVariableInOriginalMethod-> Complexity: 2
Method Name : sliceContainsOnlyOneNodeCriterionAndDeclarationOfVariableCriterion-> Complexity: 2
Method Name : declarationOfVariableCriterionIsDuplicated-> Complexity: 3
Method Name : sliceContainsReturnStatement-> Complexity: 3
Method Name : sliceContainsBranchStatementWithoutInnermostLoop-> Complexity: 6
Method Name : complyWithUserThresholds-> Complexity: 5
Method Name : sliceEqualsMethodBody-> Complexity: 2
Method Name : variableCriterionIsStreamClosedInFinallyBlock-> Complexity: 5
Method Name : sliceContainsVariableDeclarationClosedInFinallyBlock-> Complexity: 6
Method Name : satisfiesRules-> Complexity: 2
	 WMC: 35
Total Complexity: 110


Class name: PDGSliceUnionCollection
Method Name : getSliceUnions-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: PDGStatementNode
Method Name : determineDefinedAndUsedVariables-> Complexity: 28
	 WMC: 1
Total Complexity: 28


Class name: PDGSynchronizedNode
	 WMC: 0
Total Complexity: 0


Class name: PDGTryNode
Method Name : hasFinallyClauseClosingVariable-> Complexity: 1
Method Name : hasCatchClause-> Complexity: 1
Method Name : determineDefinedAndUsedVariables-> Complexity: 7
	 WMC: 3
Total Complexity: 9


Class name: PlainVariable
Method Name : containsPlainVariable-> Complexity: 1
Method Name : startsWithVariable-> Complexity: 2
Method Name : getInitialVariable-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
	 WMC: 6
Total Complexity: 10


Class name: ReachingAliasSet
Method Name : insertAlias-> Complexity: 9
Method Name : removeAlias-> Complexity: 5
Method Name : containsAlias-> Complexity: 3
Method Name : containsAlias-> Complexity: 4
Method Name : getAliases-> Complexity: 5
Method Name : getAliases-> Complexity: 7
Method Name : copy-> Complexity: 2
Method Name : toString-> Complexity: 1
	 WMC: 8
Total Complexity: 36


Class name: CompositeStatementObject
Method Name : addStatement-> Complexity: 1
Method Name : getStatements-> Complexity: 1
Method Name : addExpression-> Complexity: 1
Method Name : getExpressions-> Complexity: 1
Method Name : getFieldInstructionsInExpressions-> Complexity: 2
Method Name : getSuperFieldInstructionsInExpressions-> Complexity: 2
Method Name : getLocalVariableDeclarationsInExpressions-> Complexity: 2
Method Name : getLocalVariableInstructionsInExpressions-> Complexity: 2
Method Name : getMethodInvocationsInExpressions-> Complexity: 2
Method Name : getSuperMethodInvocationsInExpressions-> Complexity: 2
Method Name : getCreationsInExpressions-> Complexity: 2
Method Name : getArrayCreationsInExpressions-> Complexity: 2
Method Name : getClassInstanceCreationsInExpressions-> Complexity: 2
Method Name : getLiteralsInExpressions-> Complexity: 2
Method Name : getAnonymousClassDeclarationsInExpressions-> Complexity: 2
Method Name : getInvokedStaticMethodsInExpressions-> Complexity: 2
Method Name : getUsedFieldsThroughThisReferenceInExpressions-> Complexity: 2
Method Name : getDefinedFieldsThroughThisReferenceInExpressions-> Complexity: 2
Method Name : getInvokedMethodsThroughThisReferenceInExpressions-> Complexity: 2
Method Name : getNonDistinctInvokedMethodsThroughThisReferenceInExpressions-> Complexity: 2
Method Name : getNonDistinctInvokedStaticMethodsInExpressions-> Complexity: 2
Method Name : getNonDistinctDefinedFieldsThroughThisReferenceInExpressions-> Complexity: 2
Method Name : getNonDistinctUsedFieldsThroughThisReferenceInExpressions-> Complexity: 2
Method Name : getParametersPassedAsArgumentsInMethodInvocationsInExpressions-> Complexity: 2
Method Name : getParametersPassedAsArgumentsInSuperMethodInvocationsInExpressions-> Complexity: 2
Method Name : stringRepresentation-> Complexity: 2
Method Name : getIfStatements-> Complexity: 4
Method Name : getSwitchStatements-> Complexity: 4
Method Name : getTryStatements-> Complexity: 4
Method Name : toString-> Complexity: 3
	 WMC: 30
Total Complexity: 63


Class name: ASTNodeDifference
Method Name : getDifferences-> Complexity: 1
Method Name : getExpression1-> Complexity: 1
Method Name : getExpression2-> Complexity: 1
Method Name : getBindingSignaturePair-> Complexity: 1
Method Name : addDifference-> Complexity: 1
Method Name : containsDifferenceType-> Complexity: 3
Method Name : containsOnlyDifferenceType-> Complexity: 4
Method Name : isParameterizable-> Complexity: 3
Method Name : typeMismatch-> Complexity: 2
Method Name : isVariableTypeMismatch-> Complexity: 2
Method Name : isExpressionOfIfStatementNestedAtLevelZero-> Complexity: 9
Method Name : isQualifierOfQualifiedName-> Complexity: 3
Method Name : isExpressionOfFieldAccess-> Complexity: 3
Method Name : isEmpty-> Complexity: 1
Method Name : isParentNodeDifferenceOf-> Complexity: 2
Method Name : isParent-> Complexity: 4
Method Name : isLeftHandSideOfAssignment-> Complexity: 3
Method Name : getParentExpressionOfMethodNameOrTypeName-> Complexity: 17
Method Name : getWeight-> Complexity: 1
Method Name : hashCode-> Complexity: 1
Method Name : equals-> Complexity: 13
Method Name : toString-> Complexity: 2
	 WMC: 22
Total Complexity: 78


Class name: ASTNodeMatcher
Method Name : match-> Complexity: 2
Method Name : addDifference-> Complexity: 2
Method Name : getDifferences-> Complexity: 1
Method Name : getTypeRoot1-> Complexity: 1
Method Name : getTypeRoot2-> Complexity: 1
Method Name : getAdditionallyMatchedFragments1-> Complexity: 1
Method Name : getAdditionallyMatchedFragments2-> Complexity: 1
Method Name : toString-> Complexity: 2
Method Name : isParameterizable-> Complexity: 5
Method Name : methodInvocationMatchWithMissingExpressionAndDifferentNameAndDifferentArguments-> Complexity: 7
Method Name : onlyVariableTypeMismatchDifferences-> Complexity: 9
Method Name : isTypeHolder-> Complexity: 2
Method Name : getTypeBinding-> Complexity: 30
Method Name : typeBindingMatch-> Complexity: 22
Method Name : subclassTypeMismatch-> Complexity: 2
Method Name : isNumberPrimitiveType-> Complexity: 3
Method Name : validCommonSuperType-> Complexity: 2
Method Name : isTaggingInterface-> Complexity: 1
Method Name : commonSuperType-> Complexity: 30
Method Name : implementsInterface-> Complexity: 3
Method Name : addTypeBinding-> Complexity: 4
Method Name : getAllSuperTypes-> Complexity: 3
Method Name : isInfixExpressionWithCompositeParent-> Complexity: 2
Method Name : processClassInstanceCreationArguments-> Complexity: 4
Method Name : processMethodInvocationArguments-> Complexity: 4
Method Name : overloadedMethods-> Complexity: 1
Method Name : isExpressionWithinMethodInvocationArgument-> Complexity: 11
Method Name : match-> Complexity: 5
Method Name : match-> Complexity: 11
Method Name : match-> Complexity: 3
Method Name : match-> Complexity: 3
Method Name : match-> Complexity: 6
Method Name : match-> Complexity: 7
Method Name : match-> Complexity: 2
Method Name : match-> Complexity: 6
Method Name : match-> Complexity: 15
Method Name : reduceWeightOfReversedArguments-> Complexity: 6
Method Name : match-> Complexity: 5
Method Name : match-> Complexity: 4
Method Name : match-> Complexity: 4
Method Name : match-> Complexity: 9
Method Name : match-> Complexity: 18
Method Name : match-> Complexity: 4
Method Name : match-> Complexity: 7
Method Name : match-> Complexity: 17
Method Name : match-> Complexity: 5
Method Name : match-> Complexity: 3
Method Name : match-> Complexity: 29
Method Name : match-> Complexity: 5
Method Name : match-> Complexity: 8
Method Name : match-> Complexity: 8
Method Name : match-> Complexity: 6
Method Name : match-> Complexity: 14
Method Name : match-> Complexity: 2
Method Name : match-> Complexity: 23
Method Name : match-> Complexity: 6
Method Name : match-> Complexity: 9
Method Name : match-> Complexity: 6
Method Name : match-> Complexity: 3
Method Name : match-> Complexity: 3
Method Name : match-> Complexity: 5
Method Name : match-> Complexity: 5
Method Name : match-> Complexity: 6
Method Name : match-> Complexity: 8
Method Name : match-> Complexity: 4
Method Name : setterReplacedWithFieldAssignment-> Complexity: 13
Method Name : fieldAssignmentReplacedWithSetter-> Complexity: 13
Method Name : getterMethodForField-> Complexity: 7
Method Name : setterMethodForField-> Complexity: 7
Method Name : isNestedUnderAnonymousClassDeclaration-> Complexity: 3
Method Name : isFinallyBlockOfTryStatement-> Complexity: 3
Method Name : hasEmptyInitializer-> Complexity: 3
Method Name : loopMatch-> Complexity: 25
Method Name : getOccurrencesOfSimpleName-> Complexity: 5
Method Name : generateAbstractLoop-> Complexity: 5
Method Name : reportAdditionalFragments-> Complexity: 1
Method Name : ifMatch-> Complexity: 3
Method Name : generateAbstractControlStructure-> Complexity: 7
Method Name : reportAdditionalFragments-> Complexity: 1
Method Name : reportAdditionalFragments-> Complexity: 9
	 WMC: 80
Total Complexity: 551


Class name: BindingSignature
Method Name : getOccurrences-> Complexity: 3
Method Name : containsBinding-> Complexity: 1
Method Name : containsOnlyBinding-> Complexity: 1
Method Name : signatureWithoutMethods-> Complexity: 3
Method Name : getSize-> Complexity: 1
Method Name : getLength-> Complexity: 2
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 1
Method Name : toString-> Complexity: 1
	 WMC: 9
Total Complexity: 16


Class name: BindingSignaturePair
Method Name : getSignature1-> Complexity: 1
Method Name : getSignature2-> Complexity: 1
Method Name : setGap-> Complexity: 1
Method Name : isReverse-> Complexity: 2
Method Name : getWeight-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 1
Method Name : toString-> Complexity: 1
	 WMC: 8
Total Complexity: 11


Class name: BindingSignatureVisitor
Method Name : getBindingKeys-> Complexity: 1
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 3
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 3
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 3
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 3
Method Name : handleExpression-> Complexity: 27
Method Name : handleType-> Complexity: 7
Method Name : handleParameters-> Complexity: 2
	 WMC: 38
Total Complexity: 90


Class name: AbstractControlCase
Method Name : toString-> Complexity: 2
Method Name : addBodyStatement-> Complexity: 1
Method Name : getBody-> Complexity: 1
Method Name : isDefaultCase-> Complexity: 1
Method Name : match-> Complexity: 3
	 WMC: 5
Total Complexity: 8


Class name: AbstractControlStructure
Method Name : toString-> Complexity: 1
Method Name : getNode-> Complexity: 1
Method Name : match-> Complexity: 4
	 WMC: 3
Total Complexity: 6


Class name: @SuppressWarnings("unchecked")
Method Name : getIfAndTernaryStructureMatchList-> Complexity: 6
Method Name : matchExpressionStatementExpressions-> Complexity: 10
Method Name : getTernaryArgumentIndex-> Complexity: 3
Method Name : isSameAssignee-> Complexity: 3
Method Name : hasOneConditionalExpression-> Complexity: 2
Method Name : unBlock-> Complexity: 3
Method Name : unparenthesize-> Complexity: 2
	 WMC: 7
Total Complexity: 29


Class name: IfControlCase
Method Name : match-> Complexity: 1
Method Name : match-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: IfControlStructure
Method Name : initializeFields-> Complexity: 5
Method Name : match-> Complexity: 4
Method Name : match-> Complexity: 1
Method Name : match-> Complexity: 5
Method Name : getAdditionalFragments-> Complexity: 3
	 WMC: 5
Total Complexity: 18


Class name: Pair
Method Name : equals-> Complexity: 4
Method Name : hashCode-> Complexity: 1
Method Name : getFirst-> Complexity: 1
Method Name : setFirst-> Complexity: 1
Method Name : getSecond-> Complexity: 1
Method Name : setSecond-> Complexity: 1
Method Name : toString-> Complexity: 1
	 WMC: 7
Total Complexity: 10


Class name: SwitchControlCase
Method Name : match-> Complexity: 1
Method Name : match-> Complexity: 6
Method Name : matchCaseCondition-> Complexity: 8
Method Name : getConstantValue-> Complexity: 3
Method Name : getLiteralValue-> Complexity: 4
	 WMC: 5
Total Complexity: 22


Class name: @SuppressWarnings("unchecked")
Method Name : createSwitchCases-> Complexity: 4
Method Name : addToAll-> Complexity: 2
Method Name : match-> Complexity: 1
Method Name : match-> Complexity: 4
Method Name : match-> Complexity: 1
Method Name : getAdditionalFragments-> Complexity: 1
	 WMC: 6
Total Complexity: 13


Class name: TernaryControlStructure
Method Name : initializeFields-> Complexity: 2
Method Name : getConditionalExpression-> Complexity: 1
Method Name : getCondition-> Complexity: 1
Method Name : getThenExpression-> Complexity: 1
Method Name : getElseExpression-> Complexity: 1
Method Name : match-> Complexity: 5
Method Name : match-> Complexity: 1
Method Name : match-> Complexity: 1
Method Name : getAdditionalFragments-> Complexity: 1
	 WMC: 9
Total Complexity: 14


Class name: Difference
Method Name : getType-> Complexity: 1
Method Name : getFirstValue-> Complexity: 1
Method Name : getSecondValue-> Complexity: 1
Method Name : getWeight-> Complexity: 1
Method Name : setWeight-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
	 WMC: 8
Total Complexity: 11


Class name: FieldAccessReplacedWithGetterInvocationDifference
Method Name : getGetterMethodName-> Complexity: 1
Method Name : getInvokerDifferences-> Complexity: 1
Method Name : addInvokerDifference-> Complexity: 1
Method Name : getInvoker1-> Complexity: 1
Method Name : setInvoker1-> Complexity: 1
Method Name : getInvoker2-> Complexity: 1
Method Name : setInvoker2-> Complexity: 1
	 WMC: 7
Total Complexity: 7


Class name: FieldAssignmentReplacedWithSetterInvocationDifference
Method Name : getSetterMethodName-> Complexity: 1
Method Name : getInvokerDifferences-> Complexity: 1
Method Name : addInvokerDifference-> Complexity: 1
Method Name : getArgumentDifferences-> Complexity: 1
Method Name : addArgumentDifference-> Complexity: 1
Method Name : getInvoker1-> Complexity: 1
Method Name : setInvoker1-> Complexity: 1
Method Name : getInvoker2-> Complexity: 1
Method Name : setInvoker2-> Complexity: 1
Method Name : getArgument1-> Complexity: 1
Method Name : setArgument1-> Complexity: 1
Method Name : getArgument2-> Complexity: 1
Method Name : setArgument2-> Complexity: 1
Method Name : getField1-> Complexity: 1
Method Name : setField1-> Complexity: 1
Method Name : getField2-> Complexity: 1
Method Name : setField2-> Complexity: 1
	 WMC: 17
Total Complexity: 17


Class name: AbstractControlVariable
Method Name : getVariableUpdaters-> Complexity: 1
Method Name : getDataStructureExpression-> Complexity: 1
Method Name : match-> Complexity: 1
Method Name : equalUpdaterLists-> Complexity: 4
	 WMC: 4
Total Complexity: 7


Class name: AbstractLoop
Method Name : getLoopStatement-> Complexity: 1
Method Name : getLoopBody-> Complexity: 5
Method Name : match-> Complexity: 3
	 WMC: 3
Total Complexity: 9


Class name: AbstractLoopBindingInformation
Method Name : getInstance-> Complexity: 2
Method Name : iteratorInstantiationMethodBindingStartValuesContains-> Complexity: 3
Method Name : conditionalMethodBindingEndValuesContains-> Complexity: 1
Method Name : updateMethodValuesContains-> Complexity: 1
Method Name : dataStructureSizeMethodContains-> Complexity: 3
Method Name : dataStructureAccessMethodsContains-> Complexity: 1
Method Name : getIteratorInstantiationMethodBindingStartValue-> Complexity: 3
Method Name : getConditionalMethodBindingEndValue-> Complexity: 1
Method Name : getUpdateMethodValue-> Complexity: 1
	 WMC: 9
Total Complexity: 16


Class name: @SuppressWarnings("unchecked")
Method Name : isUpdatingVariable-> Complexity: 5
Method Name : isSameVariable-> Complexity: 2
Method Name : isCollectionSizeInvocation-> Complexity: 3
Method Name : isDataStructureSizeInvocation-> Complexity: 3
Method Name : isLengthFieldAccess-> Complexity: 5
Method Name : isCollection-> Complexity: 1
Method Name : isSubclassOf-> Complexity: 3
Method Name : isSubinterfaceOf-> Complexity: 4
Method Name : getVariableDeclaration-> Complexity: 4
Method Name : getAllVariableDeclarations-> Complexity: 9
Method Name : findParentMethodDeclaration-> Complexity: 3
Method Name : getUpdateValue-> Complexity: 4
Method Name : getIncrementValue-> Complexity: 5
Method Name : assignmentUpdateValue-> Complexity: 13
Method Name : getIntegerValue-> Complexity: 4
Method Name : isVariableLeftOperand-> Complexity: 8
Method Name : isVariableRightOperand-> Complexity: 8
Method Name : unBlock-> Complexity: 4
Method Name : getVariableInitializedUsingControlVariable-> Complexity: 4
Method Name : getVariableDeclarationsAndAssignmentsContainingAccessUsingVariable-> Complexity: 10
Method Name : isAccessUsingVariable-> Complexity: 14
Method Name : getOccurrencesOfSimpleName-> Complexity: 3
Method Name : isExpressionAnArgument-> Complexity: 3
	 WMC: 23
Total Complexity: 122


Class name: @SuppressWarnings("unchecked")
Method Name : getConditionControlVariables-> Complexity: 1
Method Name : generateConditionControlVariables-> Complexity: 4
Method Name : getAllVariableModifiersInParentBlock-> Complexity: 4
Method Name : getAdditionalFragments-> Complexity: 8
Method Name : match-> Complexity: 3
Method Name : match-> Complexity: 6
Method Name : findEquivalentExpression-> Complexity: 11
Method Name : getDifference-> Complexity: 3
	 WMC: 8
Total Complexity: 40


Class name: ConditionalLoopASTNodeMatcher
Method Name : isInfixExpressionWithCompositeParent-> Complexity: 1
Method Name : match-> Complexity: 14
Method Name : compareTypes-> Complexity: 9
	 WMC: 3
Total Complexity: 24


Class name: @SuppressWarnings("unchecked")
Method Name : getVariable-> Complexity: 1
Method Name : getDataStructureAccessExpression-> Complexity: 1
Method Name : getConditionContainingVariable-> Complexity: 3
Method Name : getStartValue-> Complexity: 16
Method Name : setMethodInvocationStartValue-> Complexity: 5
Method Name : getValueContributingModifiers-> Complexity: 15
Method Name : getAllVariableModifiersInParentMethod-> Complexity: 7
Method Name : getEndValue-> Complexity: 11
Method Name : getIteratorDataStructureExpression-> Complexity: 12
Method Name : getVariableUpdaters-> Complexity: 6
Method Name : getAllFirstLevelUpdaters-> Complexity: 6
Method Name : removeExpressionsInAConditionalExpression-> Complexity: 4
	 WMC: 12
Total Complexity: 87


Class name: EarliestStartPositionComparator
Method Name : compare-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: EnhancedForLoop
Method Name : getControlVariable-> Complexity: 1
Method Name : generateConditionControlVariable-> Complexity: 3
Method Name : getAdditionalFragments-> Complexity: 3
Method Name : match-> Complexity: 3
Method Name : match-> Complexity: 1
	 WMC: 5
Total Complexity: 11


Class name: VariableUpdater
Method Name : getUpdater-> Complexity: 1
Method Name : getUpdateValue-> Complexity: 1
Method Name : match-> Complexity: 1
	 WMC: 3
Total Complexity: 3


Class name: VariableValue
Method Name : getType-> Complexity: 1
Method Name : setType-> Complexity: 1
Method Name : getValue-> Complexity: 1
Method Name : setValue-> Complexity: 1
Method Name : match-> Complexity: 1
	 WMC: 5
Total Complexity: 5


Class name: NodePair
Method Name : hashCode-> Complexity: 1
Method Name : equals-> Complexity: 3
	 WMC: 2
Total Complexity: 4


Class name: NodePairComparisonCache
Method Name : getInstance-> Complexity: 2
Method Name : clearCache-> Complexity: 1
Method Name : containsNodePair-> Complexity: 1
Method Name : getDifferencesForNodePair-> Complexity: 1
Method Name : getMatchForNodePair-> Complexity: 1
Method Name : getAdditionallyMatchedFragments1-> Complexity: 1
Method Name : getAdditionallyMatchedFragments2-> Complexity: 1
Method Name : addDifferencesForNodePair-> Complexity: 1
Method Name : addMatchForNodePair-> Complexity: 1
Method Name : setAdditionallyMatchedFragments1-> Complexity: 1
Method Name : setAdditionallyMatchedFragments2-> Complexity: 1
Method Name : getMapSize-> Complexity: 1
	 WMC: 12
Total Complexity: 13


Class name: MethodBodyObject
Method Name : getCompositeStatement-> Complexity: 1
Method Name : generateTypeCheckEliminations-> Complexity: 34
Method Name : getFieldInstructions-> Complexity: 1
Method Name : getSuperFieldInstructions-> Complexity: 1
Method Name : getLocalVariableDeclarations-> Complexity: 1
Method Name : getLocalVariableInstructions-> Complexity: 1
Method Name : getMethodInvocations-> Complexity: 1
Method Name : getSuperMethodInvocations-> Complexity: 1
Method Name : getConstructorInvocations-> Complexity: 1
Method Name : getCreations-> Complexity: 1
Method Name : getLiterals-> Complexity: 1
Method Name : getAnonymousClassDeclarations-> Complexity: 1
Method Name : getExceptionsInThrowStatements-> Complexity: 1
Method Name : containsMethodInvocation-> Complexity: 1
Method Name : containsFieldInstruction-> Complexity: 1
Method Name : containsSuperMethodInvocation-> Complexity: 1
Method Name : getInvokedMethodsThroughFields-> Complexity: 1
Method Name : getInvokedMethodsThroughParameters-> Complexity: 1
Method Name : getNonDistinctInvokedMethodsThroughFields-> Complexity: 1
Method Name : getNonDistinctInvokedMethodsThroughParameters-> Complexity: 1
Method Name : getInvokedMethodsThroughLocalVariables-> Complexity: 1
Method Name : getInvokedMethodsThroughThisReference-> Complexity: 1
Method Name : getNonDistinctInvokedMethodsThroughThisReference-> Complexity: 1
Method Name : getInvokedStaticMethods-> Complexity: 1
Method Name : getDefinedFieldsThroughFields-> Complexity: 1
Method Name : getUsedFieldsThroughFields-> Complexity: 1
Method Name : getNonDistinctDefinedFieldsThroughFields-> Complexity: 1
Method Name : getNonDistinctUsedFieldsThroughFields-> Complexity: 1
Method Name : getDefinedFieldsThroughParameters-> Complexity: 1
Method Name : getUsedFieldsThroughParameters-> Complexity: 1
Method Name : getNonDistinctDefinedFieldsThroughParameters-> Complexity: 1
Method Name : getNonDistinctUsedFieldsThroughParameters-> Complexity: 1
Method Name : getDefinedFieldsThroughLocalVariables-> Complexity: 1
Method Name : getUsedFieldsThroughLocalVariables-> Complexity: 1
Method Name : getDefinedFieldsThroughThisReference-> Complexity: 1
Method Name : getNonDistinctDefinedFieldsThroughThisReference-> Complexity: 1
Method Name : getUsedFieldsThroughThisReference-> Complexity: 1
Method Name : getNonDistinctUsedFieldsThroughThisReference-> Complexity: 1
Method Name : getDeclaredLocalVariables-> Complexity: 1
Method Name : getDefinedLocalVariables-> Complexity: 1
Method Name : getUsedLocalVariables-> Complexity: 1
Method Name : getParametersPassedAsArgumentsInMethodInvocations-> Complexity: 1
Method Name : getParametersPassedAsArgumentsInSuperMethodInvocations-> Complexity: 1
Method Name : getParametersPassedAsArgumentsInConstructorInvocations-> Complexity: 1
Method Name : containsSuperMethodInvocation-> Complexity: 2
Method Name : containsSuperFieldAccess-> Complexity: 2
Method Name : processStatement-> Complexity: 37
Method Name : getTryStatements-> Complexity: 1
Method Name : stringRepresentation-> Complexity: 1
	 WMC: 49
Total Complexity: 120


Class name: StatementObject
Method Name : toString-> Complexity: 1
Method Name : stringRepresentation-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: SynchronizedStatementObject
	 WMC: 0
Total Complexity: 0


Class name: TryStatementObject
Method Name : getStatementsInsideTryBlock-> Complexity: 1
Method Name : hasResources-> Complexity: 1
Method Name : addCatchClause-> Complexity: 1
Method Name : getCatchClauses-> Complexity: 1
Method Name : setFinallyClause-> Complexity: 1
Method Name : getFinallyClause-> Complexity: 1
Method Name : getExpressions-> Complexity: 2
Method Name : stringRepresentation-> Complexity: 3
Method Name : getIfStatements-> Complexity: 3
Method Name : getSwitchStatements-> Complexity: 3
Method Name : getTryStatements-> Complexity: 3
Method Name : hasFinallyClauseClosingVariable-> Complexity: 14
Method Name : hasCatchClause-> Complexity: 1
	 WMC: 13
Total Complexity: 35


Class name: DelegationDetection
Method Name : getAllDelegationPaths-> Complexity: 1
Method Name : getDelegationPathsOfSize-> Complexity: 3
	 WMC: 2
Total Complexity: 4


Class name: DelegationPath
Method Name : addMethodInvocation-> Complexity: 1
Method Name : size-> Complexity: 1
Method Name : getPathIterator-> Complexity: 1
Method Name : toString-> Complexity: 2
	 WMC: 4
Total Complexity: 5


Class name: DelegationTree
Method Name : getDelegations-> Complexity: 5
Method Name : existsNode-> Complexity: 3
Method Name : existsNode-> Complexity: 3
Method Name : getDepth-> Complexity: 1
Method Name : getDelegationPathList-> Complexity: 3
	 WMC: 5
Total Complexity: 15


Class name: EnumConstantDeclarationObject
Method Name : setEnumConstantDeclaration-> Complexity: 1
Method Name : getEnumConstantDeclaration-> Complexity: 1
Method Name : getName-> Complexity: 1
Method Name : addArgument-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : setEnumName-> Complexity: 1
Method Name : getEnumName-> Complexity: 1
Method Name : equals-> Complexity: 1
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 3
	 WMC: 10
Total Complexity: 15


Class name: FieldInstructionObject
Method Name : getOwnerClass-> Complexity: 1
Method Name : getType-> Complexity: 1
Method Name : getName-> Complexity: 1
Method Name : getVariableBindingKey-> Complexity: 1
Method Name : isStatic-> Complexity: 1
Method Name : setStatic-> Complexity: 1
Method Name : setSimpleName-> Complexity: 1
Method Name : getSimpleName-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
	 WMC: 11
Total Complexity: 14


Class name: FieldObject
Method Name : setVariableDeclarationFragment-> Complexity: 1
Method Name : getVariableDeclarationFragment-> Complexity: 2
Method Name : setAccess-> Complexity: 1
Method Name : getAccess-> Complexity: 1
Method Name : getName-> Complexity: 1
Method Name : getType-> Complexity: 1
Method Name : addComment-> Complexity: 1
Method Name : addComments-> Complexity: 1
Method Name : getCommentListIterator-> Complexity: 1
Method Name : isStatic-> Complexity: 1
Method Name : setStatic-> Complexity: 1
Method Name : generateFieldInstruction-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : setClassName-> Complexity: 1
Method Name : getClassName-> Complexity: 1
Method Name : equals-> Complexity: 1
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 3
Method Name : getVariableDeclaration-> Complexity: 1
	 WMC: 19
Total Complexity: 25


Class name: IfStatementExpressionAnalyzer
Method Name : putTypeVariableExpression-> Complexity: 1
Method Name : getTargetVariables-> Complexity: 3
Method Name : getTypeVariableExpression-> Complexity: 1
Method Name : putTypeVariableStaticField-> Complexity: 3
Method Name : getTypeVariableStaticField-> Complexity: 1
Method Name : putTypeVariableSubclass-> Complexity: 3
Method Name : getTypeVariableSubclass-> Complexity: 1
Method Name : putTypeMethodInvocationExpression-> Complexity: 1
Method Name : getTargetMethodInvocations-> Complexity: 3
Method Name : getTypeMethodInvocationExpression-> Complexity: 1
Method Name : putTypeMethodInvocationStaticField-> Complexity: 3
Method Name : getTypeMethodInvocationStaticField-> Complexity: 1
Method Name : putTypeMethodInvocationSubclass-> Complexity: 3
Method Name : getTypeMethodInvocationSubclass-> Complexity: 1
Method Name : processExpression-> Complexity: 6
Method Name : processExtendedOperands-> Complexity: 2
Method Name : getInstanceofExpressions-> Complexity: 3
Method Name : getInfixExpressionsWithEqualsOperator-> Complexity: 4
Method Name : getRemainingExpression-> Complexity: 7
Method Name : allParentNodesAreConditionalAndOperators-> Complexity: 4
Method Name : allParentNodesAreConditionalOrOperators-> Complexity: 4
Method Name : getNumberOfConditionalOperatorNodes-> Complexity: 3
Method Name : getCompleteExpression-> Complexity: 1
Method Name : toString-> Complexity: 1
	 WMC: 24
Total Complexity: 61


Class name: Indexer
Method Name : getSubTypes-> Complexity: 7
Method Name : addInvokedMethod-> Complexity: 4
Method Name : addInvokedMethodThroughReference-> Complexity: 5
Method Name : getRecursivelyInvocationReferences-> Complexity: 10
Method Name : addOverridingMethod-> Complexity: 4
Method Name : setDefinedFields-> Complexity: 1
Method Name : setUsedFields-> Complexity: 1
Method Name : setThrownExceptionTypes-> Complexity: 1
Method Name : isAnalyzed-> Complexity: 2
Method Name : getRecursivelyDefinedFields-> Complexity: 10
Method Name : getRecursivelyUsedFields-> Complexity: 10
Method Name : getRecursivelyThrownExceptionTypes-> Complexity: 10
Method Name : getThrownExceptionTypes-> Complexity: 2
Method Name : getRecursivelyDefinedFieldsThroughReference-> Complexity: 12
Method Name : getRecursivelyUsedFieldsThroughReference-> Complexity: 10
Method Name : composeVariable-> Complexity: 2
Method Name : addUsedFieldForMethodArgument-> Complexity: 3
Method Name : setEmptyUsedFieldsForMethodArgument-> Complexity: 2
Method Name : addDefinedFieldForMethodArgument-> Complexity: 3
Method Name : setEmptyDefinedFieldsForMethodArgument-> Complexity: 2
Method Name : containsMethodArgument-> Complexity: 5
Method Name : getUsedFieldsForMethodArgument-> Complexity: 3
Method Name : getDefinedFieldsForMethodArgument-> Complexity: 3
	 WMC: 23
Total Complexity: 112


Class name: CompleteInheritanceDetection
Method Name : addSubclassToSuperclass-> Complexity: 2
Method Name : generateInheritanceHierarchies-> Complexity: 6
Method Name : getTree-> Complexity: 2
Method Name : recursivelyConstructTree-> Complexity: 3
Method Name : getRoots-> Complexity: 1
Method Name : getMatchingTrees-> Complexity: 5
	 WMC: 6
Total Complexity: 19


Class name: InheritanceDetection
Method Name : getInheritanceTreeList-> Complexity: 1
Method Name : generateInheritanceTrees-> Complexity: 8
Method Name : getTree-> Complexity: 3
	 WMC: 3
Total Complexity: 12


Class name: InheritanceTree
Method Name : getRootNode-> Complexity: 1
Method Name : contains-> Complexity: 3
Method Name : getNode-> Complexity: 4
Method Name : addChildToParent-> Complexity: 3
Method Name : addChildRootNodeToParent-> Complexity: 2
Method Name : getLeavesByLevel-> Complexity: 4
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
	 WMC: 8
Total Complexity: 22


Class name: TypeBindingInheritanceDetection
Method Name : getInheritanceTreeList-> Complexity: 1
Method Name : generateInheritanceTrees-> Complexity: 8
Method Name : extendsOrImplements-> Complexity: 7
Method Name : getTree-> Complexity: 3
Method Name : getLeavesInDeepestLevels-> Complexity: 3
	 WMC: 5
Total Complexity: 22


Class name: LibraryClassStorage
Method Name : getInstance-> Complexity: 2
Method Name : getCompilationUnit-> Complexity: 4
	 WMC: 2
Total Complexity: 6


Class name: LiteralObject
Method Name : getLiteralType-> Complexity: 1
Method Name : getValue-> Complexity: 1
Method Name : getType-> Complexity: 1
Method Name : getLiteral-> Complexity: 7
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
	 WMC: 7
Total Complexity: 16


Class name: LocalVariableDeclarationObject
Method Name : getType-> Complexity: 1
Method Name : getName-> Complexity: 1
Method Name : getVariableDeclaration-> Complexity: 2
Method Name : setVariableDeclaration-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : equals-> Complexity: 1
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
	 WMC: 8
Total Complexity: 12


Class name: LocalVariableInstructionObject
Method Name : getType-> Complexity: 1
Method Name : getName-> Complexity: 1
Method Name : getVariableBindingKey-> Complexity: 1
Method Name : setSimpleName-> Complexity: 1
Method Name : getSimpleName-> Complexity: 2
Method Name : equals-> Complexity: 3
Method Name : equals-> Complexity: 1
Method Name : equals-> Complexity: 1
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
	 WMC: 10
Total Complexity: 14


Class name: MethodInvocationObject
Method Name : setMethodInvocation-> Complexity: 1
Method Name : getMethodInvocation-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: MethodObject
Method Name : setReturnType-> Complexity: 1
Method Name : getReturnType-> Complexity: 1
Method Name : setAbstract-> Complexity: 1
Method Name : isAbstract-> Complexity: 1
Method Name : isStatic-> Complexity: 1
Method Name : setStatic-> Complexity: 1
Method Name : isSynchronized-> Complexity: 1
Method Name : setSynchronized-> Complexity: 1
Method Name : isNative-> Complexity: 1
Method Name : setNative-> Complexity: 1
Method Name : getName-> Complexity: 1
Method Name : hasTestAnnotation-> Complexity: 1
Method Name : setTestAnnotation-> Complexity: 1
Method Name : getExceptionsInJavaDocThrows-> Complexity: 1
Method Name : getAccess-> Complexity: 1
Method Name : getMethodDeclaration-> Complexity: 1
Method Name : getMethodBody-> Complexity: 1
Method Name : generateMethodInvocation-> Complexity: 1
Method Name : generateSuperMethodInvocation-> Complexity: 1
Method Name : isGetter-> Complexity: 5
Method Name : isSetter-> Complexity: 6
Method Name : isCollectionAdder-> Complexity: 6
Method Name : isDelegate-> Complexity: 35
Method Name : validTargetObject-> Complexity: 17
Method Name : oneToManyRelationshipWithTargetClass-> Complexity: 4
Method Name : containsFieldAccessOfEnclosingClass-> Complexity: 5
Method Name : containsMethodCallWithThisExpressionAsArgument-> Complexity: 8
Method Name : containsNullCheckForTargetObject-> Complexity: 11
Method Name : overridesMethod-> Complexity: 3
Method Name : overridesMethod-> Complexity: 10
Method Name : getClassName-> Complexity: 1
Method Name : getCommentListIterator-> Complexity: 1
Method Name : getParameterListIterator-> Complexity: 1
Method Name : getParameter-> Complexity: 1
Method Name : getMethodInvocations-> Complexity: 1
Method Name : getSuperMethodInvocations-> Complexity: 1
Method Name : getConstructorInvocations-> Complexity: 1
Method Name : getFieldInstructions-> Complexity: 1
Method Name : getSuperFieldInstructions-> Complexity: 1
Method Name : getLocalVariableDeclarations-> Complexity: 1
Method Name : getLocalVariableInstructions-> Complexity: 1
Method Name : getCreations-> Complexity: 1
Method Name : getLiterals-> Complexity: 1
Method Name : getAnonymousClassDeclarations-> Complexity: 1
Method Name : getExceptionsInThrowStatements-> Complexity: 1
Method Name : containsMethodInvocation-> Complexity: 1
Method Name : containsFieldInstruction-> Complexity: 1
Method Name : containsSuperMethodInvocation-> Complexity: 1
Method Name : getInvokedMethodsThroughFields-> Complexity: 1
Method Name : getNonDistinctInvokedMethodsThroughFields-> Complexity: 1
Method Name : getInvokedMethodsThroughParameters-> Complexity: 1
Method Name : getNonDistinctInvokedMethodsThroughParameters-> Complexity: 1
Method Name : getInvokedMethodsThroughLocalVariables-> Complexity: 1
Method Name : getInvokedMethodsThroughThisReference-> Complexity: 1
Method Name : getNonDistinctInvokedMethodsThroughThisReference-> Complexity: 1
Method Name : getInvokedStaticMethods-> Complexity: 1
Method Name : getDefinedFieldsThroughFields-> Complexity: 1
Method Name : getUsedFieldsThroughFields-> Complexity: 1
Method Name : getNonDistinctDefinedFieldsThroughFields-> Complexity: 1
Method Name : getNonDistinctUsedFieldsThroughFields-> Complexity: 1
Method Name : getDefinedFieldsThroughParameters-> Complexity: 1
Method Name : getUsedFieldsThroughParameters-> Complexity: 1
Method Name : getNonDistinctDefinedFieldsThroughParameters-> Complexity: 1
Method Name : getNonDistinctUsedFieldsThroughParameters-> Complexity: 1
Method Name : getDefinedFieldsThroughLocalVariables-> Complexity: 1
Method Name : getUsedFieldsThroughLocalVariables-> Complexity: 1
Method Name : getDefinedFieldsThroughThisReference-> Complexity: 1
Method Name : getNonDistinctDefinedFieldsThroughThisReference-> Complexity: 1
Method Name : getUsedFieldsThroughThisReference-> Complexity: 1
Method Name : getNonDistinctUsedFieldsThroughThisReference-> Complexity: 1
Method Name : getDeclaredLocalVariables-> Complexity: 1
Method Name : getDefinedLocalVariables-> Complexity: 1
Method Name : getUsedLocalVariables-> Complexity: 1
Method Name : getParametersPassedAsArgumentsInMethodInvocations-> Complexity: 1
Method Name : getParametersPassedAsArgumentsInSuperMethodInvocations-> Complexity: 1
Method Name : getParametersPassedAsArgumentsInConstructorInvocations-> Complexity: 1
Method Name : containsSuperMethodInvocation-> Complexity: 1
Method Name : containsSuperFieldAccess-> Complexity: 1
Method Name : getParameterTypeList-> Complexity: 1
Method Name : getParameterList-> Complexity: 1
Method Name : equals-> Complexity: 1
Method Name : equals-> Complexity: 1
Method Name : equalParameterTypes-> Complexity: 5
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 6
Method Name : getSignature-> Complexity: 1
	 WMC: 87
Total Complexity: 198


Class name: ConnectivityMetric
Method Name : classCohesion-> Complexity: 15
Method Name : useCommonFieldOrOneInvokesTheOther-> Complexity: 17
Method Name : getSystemAverageConnectivity-> Complexity: 4
	 WMC: 3
Total Complexity: 36


Class name: LCOM
Method Name : classLCOM-> Complexity: 25
Method Name : getSystemAverageLCOM2-> Complexity: 4
Method Name : getSystemAverageLCOM3-> Complexity: 4
	 WMC: 3
Total Complexity: 33


Class name: MMImportCoupling
Method Name : calculateCoupling-> Complexity: 9
Method Name : getClassAverageCoupling-> Complexity: 3
Method Name : getSystemAverageCoupling-> Complexity: 2
	 WMC: 3
Total Complexity: 14


Class name: ParameterObject
Method Name : getType-> Complexity: 1
Method Name : getName-> Complexity: 1
Method Name : isVarargs-> Complexity: 1
Method Name : setSingleVariableDeclaration-> Complexity: 1
Method Name : getSingleVariableDeclaration-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
Method Name : getVariableDeclaration-> Complexity: 1
	 WMC: 9
Total Complexity: 12


Class name: Standalone
Method Name : getMoveMethodRefactoringOpportunities-> Complexity: 5
Method Name : getExtractClassRefactoringOpportunities-> Complexity: 8
Method Name : getTypeCheckEliminationRefactoringOpportunities-> Complexity: 5
Method Name : getExtractMethodRefactoringOpportunities-> Complexity: 6
Method Name : processMethod-> Complexity: 13
	 WMC: 5
Total Complexity: 37


Class name: SuperFieldInstructionObject
Method Name : getOwnerClass-> Complexity: 1
Method Name : getType-> Complexity: 1
Method Name : getName-> Complexity: 1
Method Name : isStatic-> Complexity: 1
Method Name : setStatic-> Complexity: 1
Method Name : setSimpleName-> Complexity: 1
Method Name : getSimpleName-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
	 WMC: 10
Total Complexity: 13


Class name: SuperMethodInvocationObject
Method Name : setSuperMethodInvocation-> Complexity: 1
Method Name : getSuperMethodInvocation-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: SystemObject
Method Name : addClass-> Complexity: 1
Method Name : addClasses-> Complexity: 2
Method Name : replaceClass-> Complexity: 2
Method Name : removeClasses-> Complexity: 4
Method Name : removeClass-> Complexity: 3
Method Name : addGetter-> Complexity: 1
Method Name : addSetter-> Complexity: 1
Method Name : addCollectionAdder-> Complexity: 1
Method Name : addDelegate-> Complexity: 1
Method Name : containsGetter-> Complexity: 1
Method Name : containsSetter-> Complexity: 1
Method Name : containsCollectionAdder-> Complexity: 1
Method Name : containsDelegate-> Complexity: 1
Method Name : getMethod-> Complexity: 2
Method Name : getMethod-> Complexity: 2
Method Name : containsMethodInvocation-> Complexity: 3
Method Name : containsFieldInstruction-> Complexity: 3
Method Name : containsSuperMethodInvocation-> Complexity: 3
Method Name : getClassObject-> Complexity: 2
Method Name : getClassObject-> Complexity: 1
Method Name : getClassListIterator-> Complexity: 1
Method Name : getClassNumber-> Complexity: 1
Method Name : getPositionInClassList-> Complexity: 2
Method Name : getClassObjects-> Complexity: 1
Method Name : getClassObjects-> Complexity: 3
Method Name : getClassObjects-> Complexity: 2
Method Name : getClassObjects-> Complexity: 2
Method Name : getClassObjects-> Complexity: 3
Method Name : getAnonymousClassDeclaration-> Complexity: 5
Method Name : getMethodObject-> Complexity: 12
Method Name : getClassNames-> Complexity: 2
Method Name : generateTypeCheckEliminations-> Complexity: 52
Method Name : validTypeBinding-> Complexity: 1
Method Name : handleTypeMethodInvocation-> Complexity: 17
Method Name : nonEmptyIntersection-> Complexity: 4
Method Name : constructUnion-> Complexity: 5
Method Name : inheritanceHierarchyMatchingWithStaticTypes-> Complexity: 15
Method Name : allStaticFieldsWithinSystemBoundary-> Complexity: 5
Method Name : identifySuperFieldAccessorMethods-> Complexity: 14
Method Name : handleGroup-> Complexity: 5
Method Name : toString-> Complexity: 2
	 WMC: 41
Total Complexity: 190


Class name: TypeCheckCodeFragmentAnalyzer
Method Name : processTypeCheckCodeFragment-> Complexity: 110
Method Name : processTypeCheckCodeFragmentBranches-> Complexity: 82
Method Name : processRemainingIfStatementExpressions-> Complexity: 74
Method Name : extractOperand-> Complexity: 8
Method Name : isValidTypeVariable-> Complexity: 9
Method Name : isValidTypeMethodInvocation-> Complexity: 9
Method Name : containsTypeVariableKey-> Complexity: 3
Method Name : containsTypeMethodInvocationKey-> Complexity: 3
	 WMC: 8
Total Complexity: 298


Class name: TypeObject
Method Name : getClassType-> Complexity: 1
Method Name : getGenericType-> Complexity: 1
Method Name : setGeneric-> Complexity: 1
Method Name : setArrayDimension-> Complexity: 1
Method Name : getArrayDimension-> Complexity: 1
Method Name : equalsClassType-> Complexity: 2
Method Name : equalsGenericType-> Complexity: 10
Method Name : equals-> Complexity: 6
Method Name : hashCode-> Complexity: 3
Method Name : toString-> Complexity: 3
Method Name : extractTypeObject-> Complexity: 4
	 WMC: 11
Total Complexity: 33


Class name: TypeSearchRequestor
Method Name : acceptSearchMatch-> Complexity: 3
	 WMC: 1
Total Complexity: 3


Class name: ExpressionExtractor
Method Name : getVariableInstructions-> Complexity: 1
Method Name : getVariableInstructions-> Complexity: 1
Method Name : getMethodInvocations-> Complexity: 1
Method Name : getSuperMethodInvocations-> Complexity: 1
Method Name : getMethodInvocations-> Complexity: 1
Method Name : getSuperMethodInvocations-> Complexity: 1
Method Name : getFieldAccesses-> Complexity: 1
Method Name : getSuperFieldAccesses-> Complexity: 1
Method Name : getFieldAccesses-> Complexity: 1
Method Name : getSuperFieldAccesses-> Complexity: 1
Method Name : getClassInstanceCreations-> Complexity: 1
Method Name : getClassInstanceCreations-> Complexity: 1
Method Name : getArrayCreations-> Complexity: 1
Method Name : getArrayCreations-> Complexity: 1
Method Name : getArrayAccesses-> Complexity: 1
Method Name : getArrayAccesses-> Complexity: 1
Method Name : getThisExpressions-> Complexity: 1
Method Name : getThisExpressions-> Complexity: 1
Method Name : getTypeLiterals-> Complexity: 1
Method Name : getLiterals-> Complexity: 1
Method Name : getLiterals-> Complexity: 1
Method Name : getCastExpressions-> Complexity: 1
Method Name : getInfixExpressions-> Complexity: 1
Method Name : getInfixExpressions-> Complexity: 1
Method Name : getInstanceofExpressions-> Complexity: 1
Method Name : getInstanceofExpressions-> Complexity: 1
Method Name : getAssignments-> Complexity: 1
Method Name : getAssignments-> Complexity: 1
Method Name : getPostfixExpressions-> Complexity: 1
Method Name : getPostfixExpressions-> Complexity: 1
Method Name : getPrefixExpressions-> Complexity: 1
Method Name : getPrefixExpressions-> Complexity: 1
Method Name : getVariableDeclarationExpressions-> Complexity: 1
Method Name : getVariableDeclarationExpressions-> Complexity: 1
Method Name : getConditionalExpressions-> Complexity: 1
Method Name : getConditionalExpressions-> Complexity: 1
Method Name : getVariableModifiers-> Complexity: 1
Method Name : getVariableModifiers-> Complexity: 1
Method Name : getAllExpressions-> Complexity: 3
Method Name : getExpressions-> Complexity: 41
Method Name : getExpressions-> Complexity: 64
Method Name : getExpressions-> Complexity: 5
	 WMC: 42
Total Complexity: 151


Class name: ExpressionInstanceChecker
Method Name : instanceOf-> Complexity: 0
	 WMC: 2
Total Complexity: 0


Class name: InstanceOfArrayAccess
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfArrayCreation
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfAssignment
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfBranchingStatement
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfBreakStatement
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfCastExpression
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfClassInstanceCreation
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfConditionalExpression
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfConstructorInvocation
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfContinueStatement
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfDoStatement
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfEnhancedForStatement
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfExpression
Method Name : instanceOf-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: InstanceOfFieldAccess
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfForStatement
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfIfStatement
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfInfixExpression
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfInstanceofExpression
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfLiteral
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfMethodInvocation
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfPostfixExpression
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfPrefixExpression
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfReturnStatement
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfSimpleName
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfSuperFieldAccess
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfSuperMethodInvocation
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfSwitchStatement
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfThisExpression
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfTryStatement
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfTypeDeclarationStatement
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfTypeLiteral
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfVariableDeclarationExpression
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfVariableDeclarationStatement
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfVariableModifier
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: InstanceOfWhileStatement
Method Name : instanceOf-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: AdjacencyList
Method Name : addEdge-> Complexity: 2
Method Name : getAdjacent-> Complexity: 2
Method Name : reverseEdge-> Complexity: 1
Method Name : reverseGraph-> Complexity: 1
Method Name : getReversedList-> Complexity: 3
Method Name : getSourceNodeSet-> Complexity: 1
Method Name : getAllEdges-> Complexity: 2
	 WMC: 7
Total Complexity: 12


Class name: Cluster
Method Name : addEntity-> Complexity: 2
Method Name : getEntities-> Complexity: 1
Method Name : addEntities-> Complexity: 2
Method Name : equals-> Complexity: 1
Method Name : hashCode-> Complexity: 3
Method Name : toString-> Complexity: 2
	 WMC: 6
Total Complexity: 11


Class name: Clustering
Method Name : getInstance-> Complexity: 3
	 WMC: 1
Total Complexity: 3


Class name: DoubleArray
Method Name : insertColumns-> Complexity: 1
Method Name : insertRows-> Complexity: 4
Method Name : insert-> Complexity: 1
Method Name : deleteColumnsRange-> Complexity: 2
Method Name : deleteColumns-> Complexity: 1
Method Name : deleteRowsRange-> Complexity: 3
Method Name : deleteRows-> Complexity: 3
Method Name : into-> Complexity: 2
Method Name : transpose-> Complexity: 3
	 WMC: 9
Total Complexity: 20


Class name: Edge
Method Name : getSource-> Complexity: 1
Method Name : getTarget-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
Method Name : compareTo-> Complexity: 1
	 WMC: 6
Total Complexity: 9


Class name: Hierarchical
Method Name : clustering-> Complexity: 27
	 WMC: 1
Total Complexity: 27


Class name: HumaniseCamelCase
Method Name : humanise-> Complexity: 3
Method Name : camelCaseWordMatcher-> Complexity: 1
Method Name : reset-> Complexity: 1
Method Name : addToAcronym-> Complexity: 1
Method Name : appendWord-> Complexity: 1
Method Name : appendAcronymIfThereIsOne-> Complexity: 2
Method Name : capitaliseFirstLetter-> Complexity: 1
	 WMC: 7
Total Complexity: 10


Class name: LevenshteinDistance
Method Name : minimum-> Complexity: 1
Method Name : computeLevenshteinDistance-> Complexity: 5
	 WMC: 2
Total Complexity: 6


Class name: Node
Method Name : getName-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
Method Name : compareTo-> Complexity: 1
	 WMC: 5
Total Complexity: 8


Class name: Stemmer
Method Name : add-> Complexity: 3
Method Name : add-> Complexity: 4
Method Name : toString-> Complexity: 1
Method Name : getResultLength-> Complexity: 1
Method Name : getResultBuffer-> Complexity: 1
Method Name : cons-> Complexity: 8
Method Name : m-> Complexity: 11
Method Name : vowelinstem-> Complexity: 3
Method Name : doublec-> Complexity: 3
Method Name : cvc-> Complexity: 3
Method Name : ends-> Complexity: 4
Method Name : setto-> Complexity: 2
Method Name : r-> Complexity: 2
Method Name : step1-> Complexity: 14
Method Name : step2-> Complexity: 2
Method Name : step3-> Complexity: 31
Method Name : step4-> Complexity: 12
Method Name : step5-> Complexity: 35
Method Name : step6-> Complexity: 4
Method Name : stem-> Complexity: 2
Method Name : main-> Complexity: 9
	 WMC: 21
Total Complexity: 155


Class name: TarjanAlgorithm
Method Name : tarjan-> Complexity: 6
Method Name : belongToTheSameStronglyConnectedComponent-> Complexity: 3
	 WMC: 2
Total Complexity: 9


Class name: MethodDeclarationUtility
Method Name : isDelegate-> Complexity: 25
Method Name : isGetter-> Complexity: 6
Method Name : isSetter-> Complexity: 9
Method Name : createVariable-> Complexity: 11
Method Name : processMethodInvocationExpression-> Complexity: 5
Method Name : getRightMostSimpleName-> Complexity: 8
	 WMC: 6
Total Complexity: 64


Class name: StatementExtractor
Method Name : getConstructorInvocations-> Complexity: 1
Method Name : getVariableDeclarationStatements-> Complexity: 1
Method Name : getBranchingStatements-> Complexity: 1
Method Name : getTryStatements-> Complexity: 1
Method Name : getSwitchStatements-> Complexity: 1
Method Name : getIfStatements-> Complexity: 1
Method Name : getReturnStatements-> Complexity: 1
Method Name : getBreakStatements-> Complexity: 1
Method Name : getContinueStatements-> Complexity: 1
Method Name : getEnhancedForStatements-> Complexity: 1
Method Name : getForStatements-> Complexity: 1
Method Name : getWhileStatements-> Complexity: 1
Method Name : getDoStatements-> Complexity: 1
Method Name : getTypeDeclarationStatements-> Complexity: 1
Method Name : getStatements-> Complexity: 41
Method Name : getTotalNumberOfStatements-> Complexity: 27
	 WMC: 16
Total Complexity: 82


Class name: StatementInstanceChecker
Method Name : instanceOf-> Complexity: 0
	 WMC: 2
Total Complexity: 0


Class name: SuperMethodInvocationVisitor
Method Name : visit-> Complexity: 1
Method Name : getSuperMethodInvocations-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: ThrownExceptionVisitor
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 1
Method Name : getTypeBindings-> Complexity: 1
	 WMC: 5
Total Complexity: 8


Class name: TopicFinder
Method Name : findTopics-> Complexity: 11
Method Name : getStopWords-> Complexity: 2
	 WMC: 2
Total Complexity: 13


Class name: TypeVisitor
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 2
Method Name : getTypeBindings-> Complexity: 1
Method Name : getTypes-> Complexity: 1
	 WMC: 4
Total Complexity: 6


Class name: VariableDeclarationObject
Method Name : getVariableBindingKey-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: ClassFigure
Method Name : addThreeCompartments-> Complexity: 1
Method Name : addTwoCompartments-> Complexity: 1
Method Name : addFieldCompartment-> Complexity: 1
Method Name : addMethodCompartment-> Complexity: 1
Method Name : addMethodSectionCompartment-> Complexity: 1
Method Name : addFieldSectionCompartment-> Complexity: 1
Method Name : getFieldSectionCompartment-> Complexity: 1
Method Name : getMethodSectionCompartment-> Complexity: 1
Method Name : getFieldsCompartment-> Complexity: 1
Method Name : getMethodsCompartment-> Complexity: 1
Method Name : getExtractMethodCompartment-> Complexity: 1
	 WMC: 11
Total Complexity: 11


Class name: ClassFigureMover
Method Name : mousePressed-> Complexity: 1
Method Name : mouseDragged-> Complexity: 4
Method Name : mouseReleased-> Complexity: 2
Method Name : mouseMoved-> Complexity: 1
Method Name : mouseDoubleClicked-> Complexity: 1
Method Name : mouseEntered-> Complexity: 1
Method Name : mouseExited-> Complexity: 1
Method Name : mouseHover-> Complexity: 1
	 WMC: 8
Total Complexity: 12


Class name: CompartmentFigure
Method Name : addFigure-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: CompartmentFigureBorder
Method Name : getInsets-> Complexity: 1
Method Name : paint-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: DecorationConstants
	 WMC: 0
Total Complexity: 0


Class name: EntityFigure
Method Name : getLeftAnchor-> Complexity: 1
Method Name : setLeftAnchor-> Complexity: 1
Method Name : getRightAnchor-> Complexity: 1
Method Name : setRightAnchor-> Complexity: 1
Method Name : getName-> Complexity: 1
Method Name : getOutgoingConnections-> Complexity: 1
Method Name : addLeftLeftConnection-> Complexity: 1
Method Name : addRightRightConnection-> Complexity: 1
Method Name : addRightLeftConnection-> Complexity: 1
Method Name : addLeftRightConnection-> Complexity: 1
Method Name : addToSourceMethodConnection-> Complexity: 1
Method Name : addToTargetMethodConnection-> Complexity: 1
Method Name : addToSameClassWriteConnectionRR-> Complexity: 1
Method Name : addToSameClassWriteConnectionLL-> Complexity: 1
Method Name : addToSameClassReadConnectionRR-> Complexity: 1
Method Name : addToSameClassReadConnectionLL-> Complexity: 1
Method Name : addToSameClassMethodConnectionRR-> Complexity: 1
Method Name : addToSameClassMethodConnectionLL-> Complexity: 1
Method Name : addLeftRightMethodConnection-> Complexity: 1
Method Name : addRightLeftMethodConnection-> Complexity: 1
Method Name : addToSourceReadConnection-> Complexity: 1
Method Name : addToSourceWriteConnection-> Complexity: 1
Method Name : addToSourceWeakReadConnection-> Complexity: 1
Method Name : addToSourceWeakWriteConnection-> Complexity: 1
Method Name : addToTargetBendConnection-> Complexity: 1
Method Name : addToSourceBendConnection-> Complexity: 1
Method Name : addToTargetReadConnection-> Complexity: 1
Method Name : addToTargetWriteConnection-> Complexity: 1
	 WMC: 28
Total Complexity: 28


Class name: EntityFigureListener
Method Name : mouseDragged-> Complexity: 1
Method Name : mouseEntered-> Complexity: 4
Method Name : mouseExited-> Complexity: 3
Method Name : mouseHover-> Complexity: 1
Method Name : mouseMoved-> Complexity: 1
	 WMC: 5
Total Complexity: 10


Class name: FeatureEnviedMethodInformationControl
Method Name : hasContents-> Complexity: 1
Method Name : setInput-> Complexity: 1
Method Name : mouseDragged-> Complexity: 1
Method Name : mouseEntered-> Complexity: 3
Method Name : mouseExited-> Complexity: 3
Method Name : mouseHover-> Complexity: 1
Method Name : mouseMoved-> Complexity: 1
Method Name : mousePressed-> Complexity: 2
Method Name : mouseReleased-> Complexity: 1
Method Name : mouseDoubleClicked-> Complexity: 1
Method Name : setInput-> Complexity: 7
Method Name : createContent-> Complexity: 1
Method Name : computeSizeHint-> Complexity: 2
	 WMC: 13
Total Complexity: 25


Class name: FeatureEnviedMethodInformationControlCreator
Method Name : createInformationControl-> Complexity: 1
Method Name : isSupported-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: FeatureEnvyDiagram
Method Name : getRoot-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: FeatureEnvyVisualizationData
Method Name : handleUsedFields-> Complexity: 9
Method Name : handleDefinedFields-> Complexity: 9
Method Name : findFieldInstruction-> Complexity: 3
Method Name : findLocalVariableInstruction-> Complexity: 3
Method Name : processExternalMethodInvocations-> Complexity: 10
Method Name : getSourceMethodInvocationMap-> Complexity: 1
Method Name : getTargetMethodInvocationMap-> Complexity: 1
Method Name : getSourceFieldReadMap-> Complexity: 1
Method Name : getSourceFieldWriteMap-> Complexity: 1
Method Name : getTargetFieldReadMap-> Complexity: 1
Method Name : getTargetFieldWriteMap-> Complexity: 1
Method Name : getSourceClass-> Complexity: 1
Method Name : getMethodToBeMoved-> Complexity: 1
Method Name : getTargetClass-> Complexity: 1
Method Name : toString-> Complexity: 7
Method Name : getDistinctSourceDependencies-> Complexity: 1
Method Name : getDistinctTargetDependencies-> Complexity: 1
	 WMC: 17
Total Complexity: 52


Class name: GodClassDiagram
Method Name : createDiagram-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: GodClassDiagram2
Method Name : getRoot-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: GodClassInformationControl
Method Name : hasContents-> Complexity: 1
Method Name : setInput-> Complexity: 1
Method Name : mousePressed-> Complexity: 2
Method Name : mouseReleased-> Complexity: 1
Method Name : mouseDoubleClicked-> Complexity: 1
Method Name : setInput-> Complexity: 3
Method Name : createContent-> Complexity: 1
Method Name : computeSizeHint-> Complexity: 2
	 WMC: 8
Total Complexity: 12


Class name: GodClassInformationControlCreator
Method Name : createInformationControl-> Complexity: 1
Method Name : isSupported-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: GodClassVisualizationData
Method Name : insertToMap-> Complexity: 3
Method Name : insertToMap-> Complexity: 3
Method Name : isInvocationToExtractedMethod-> Complexity: 3
Method Name : isAccessToExtractedField-> Complexity: 3
Method Name : findFieldInstruction-> Complexity: 3
Method Name : getInternalMethodInvocationMap-> Complexity: 1
Method Name : getExternalMethodInvocationMap-> Complexity: 1
Method Name : getInternalFieldReadMap-> Complexity: 1
Method Name : getInternalFieldWriteMap-> Complexity: 1
Method Name : getExternalFieldReadMap-> Complexity: 1
Method Name : getExternalFieldWriteMap-> Complexity: 1
Method Name : getExtractedMethods-> Complexity: 1
Method Name : getExtractedFields-> Complexity: 1
Method Name : getSourceClass-> Complexity: 1
Method Name : toString-> Complexity: 1
Method Name : methodCallMapToString-> Complexity: 3
Method Name : fieldAccessMapToString-> Complexity: 3
Method Name : getDistinctTargetDependencies-> Complexity: 4
Method Name : getDistinctSourceDependencies-> Complexity: 4
Method Name : containsNonAccessedFieldInExtractedClass-> Complexity: 5
	 WMC: 20
Total Complexity: 44


Class name: ICustomInformationControlCreator
Method Name : isSupported-> Complexity: 0
	 WMC: 2
Total Complexity: 0


Class name: IInformationProvider
Method Name : getInformation-> Complexity: 0
Method Name : getArea-> Complexity: 0
	 WMC: 4
Total Complexity: 0


Class name: InformationControlManager
Method Name : setSubjectControl-> Complexity: 1
Method Name : setInformationControl-> Complexity: 1
Method Name : start-> Complexity: 4
Method Name : stop-> Complexity: 4
Method Name : controlResized-> Complexity: 1
Method Name : controlMoved-> Complexity: 1
Method Name : mouseDown-> Complexity: 1
Method Name : mouseUp-> Complexity: 1
Method Name : mouseDoubleClick-> Complexity: 1
Method Name : focusGained-> Complexity: 1
Method Name : run-> Complexity: 2
Method Name : focusLost-> Complexity: 2
Method Name : keyPressed-> Complexity: 1
Method Name : keyReleased-> Complexity: 1
Method Name : mouseDragged-> Complexity: 1
Method Name : computeInformation-> Complexity: 4
Method Name : computeLocation-> Complexity: 1
	 WMC: 17
Total Complexity: 28


Class name: JConnection
Method Name : getType-> Complexity: 1
Method Name : getLabel-> Complexity: 1
Method Name : isWrite-> Complexity: 1
Method Name : getLocator-> Complexity: 1
Method Name : setRightLeftAnchors-> Complexity: 3
Method Name : setLeftLeftAnchors-> Complexity: 3
Method Name : setLeftRightAnchors-> Complexity: 3
Method Name : setRightRightAnchors-> Complexity: 3
Method Name : setMethodToMethodStyle-> Complexity: 1
Method Name : setWriteStyle-> Complexity: 1
Method Name : setReadStyle-> Complexity: 1
Method Name : setDottedLine-> Complexity: 1
Method Name : setLabel-> Complexity: 2
Method Name : setSlightBendRouter-> Complexity: 1
Method Name : setFullBendRouter-> Complexity: 1
	 WMC: 15
Total Complexity: 24


Class name: LeftAnchor
Method Name : getLocation-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: Legend
Method Name : handleStateChanged-> Complexity: 7
Method Name : newCheckBox-> Complexity: 7
	 WMC: 2
Total Complexity: 14


Class name: MethodClassSection
Method Name : getNumOfMethods-> Complexity: 1
Method Name : addFigure-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: MyContentProposalProvider
Method Name : getProposals-> Complexity: 3
	 WMC: 1
Total Complexity: 3


Class name: PackageFigure
Method Name : addToSet-> Complexity: 1
Method Name : draw-> Complexity: 2
Method Name : compareTo-> Complexity: 3
Method Name : numberOfClasses-> Complexity: 2
Method Name : getChildrenSet-> Complexity: 1
Method Name : getDepth-> Complexity: 1
Method Name : setDepth-> Complexity: 1
Method Name : getName-> Complexity: 1
Method Name : toString-> Complexity: 1
	 WMC: 9
Total Complexity: 13


Class name: PackageMapDiagram
Method Name : mousePressed-> Complexity: 1
Method Name : mouseReleased-> Complexity: 1
Method Name : mouseDoubleClicked-> Complexity: 3
Method Name : getRoot-> Complexity: 1
Method Name : calculateSeverityColor-> Complexity: 9
Method Name : calculateDepthColor-> Complexity: 3
Method Name : calculateDepth-> Complexity: 3
Method Name : getAllClassFigures-> Complexity: 1
Method Name : getSelectedClass-> Complexity: 1
Method Name : setSelectedClass-> Complexity: 1
Method Name : getProjectName-> Complexity: 1
Method Name : mouseDragged-> Complexity: 1
Method Name : mouseEntered-> Complexity: 1
Method Name : mouseExited-> Complexity: 1
Method Name : mouseHover-> Complexity: 1
Method Name : mouseMoved-> Complexity: 1
Method Name : createClassFigure-> Complexity: 3
Method Name : createSmellyClass-> Complexity: 1
	 WMC: 18
Total Complexity: 34


Class name: PackageMapDiagramInformationProvider
Method Name : getInformation-> Complexity: 2
Method Name : getArea-> Complexity: 3
	 WMC: 2
Total Complexity: 5


Class name: PackageMapFigure
	 WMC: 0
Total Complexity: 0


Class name: PMClassFigure
Method Name : calculateSize-> Complexity: 1
Method Name : setMAX_NUM-> Complexity: 1
Method Name : setMIN_NUM-> Complexity: 1
Method Name : compareTo-> Complexity: 4
Method Name : draw-> Complexity: 1
Method Name : numberOfClasses-> Complexity: 1
Method Name : getCandidates-> Complexity: 1
Method Name : setCandidates-> Complexity: 1
Method Name : getName-> Complexity: 1
Method Name : toString-> Complexity: 1
Method Name : getOriginalColor-> Complexity: 1
Method Name : isSelected-> Complexity: 1
Method Name : setSelected-> Complexity: 1
Method Name : setOriginalBackgroundColor-> Complexity: 1
Method Name : getOriginalTooltip-> Complexity: 1
Method Name : setOriginalTooltip-> Complexity: 1
Method Name : setToOriginalState-> Complexity: 1
Method Name : getOriginalBorder-> Complexity: 1
Method Name : setOriginalBorder-> Complexity: 1
Method Name : isInnerClass-> Complexity: 1
Method Name : setInnerClass-> Complexity: 1
	 WMC: 21
Total Complexity: 24


Class name: ProportionalFlowLayout
Method Name : calculatePreferredSize-> Complexity: 9
	 WMC: 1
Total Complexity: 9


Class name: RightAnchor
Method Name : getLocation-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: SearchDialog
Method Name : create-> Complexity: 1
Method Name : createDialogArea-> Complexity: 2
Method Name : isResizable-> Complexity: 1
Method Name : saveInput-> Complexity: 1
Method Name : getInitialSize-> Complexity: 1
Method Name : okPressed-> Complexity: 1
Method Name : getClassName-> Complexity: 1
	 WMC: 7
Total Complexity: 8


Class name: SearchInputAction
Method Name : run-> Complexity: 5
Method Name : dispose-> Complexity: 1
	 WMC: 2
Total Complexity: 6


Class name: SectionCompartment
Method Name : getSectionOne-> Complexity: 1
Method Name : getSectionTwo-> Complexity: 1
Method Name : getSectionThree-> Complexity: 1
	 WMC: 3
Total Complexity: 3


Class name: SmellyClassMouseListener
Method Name : mousePressed-> Complexity: 10
Method Name : mouseReleased-> Complexity: 1
Method Name : mouseDoubleClicked-> Complexity: 1
	 WMC: 3
Total Complexity: 12


Class name: VisualizationData
Method Name : getDistinctSourceDependencies-> Complexity: 0
Method Name : getDistinctTargetDependencies-> Complexity: 0
	 WMC: 4
Total Complexity: 0


Class name: ZoomAction
Method Name : run-> Complexity: 4
Method Name : dispose-> Complexity: 1
Method Name : scaleToFit-> Complexity: 2
	 WMC: 3
Total Complexity: 7


Class name: ZoomInputAction
Method Name : run-> Complexity: 4
Method Name : dispose-> Complexity: 1
	 WMC: 2
Total Complexity: 5


Class name: CandidateRefactoring
Method Name : getAnnotationText-> Complexity: 5
	 WMC: 1
Total Complexity: 5


Class name: ClusterSizeComparator
Method Name : compare-> Complexity: 3
	 WMC: 1
Total Complexity: 3


Class name: DistanceCalculator
Method Name : getDistance-> Complexity: 2
Method Name : union-> Complexity: 1
Method Name : intersection-> Complexity: 1
	 WMC: 3
Total Complexity: 4


Class name: DistanceMatrix
Method Name : generateDistances-> Complexity: 8
Method Name : identifyConceptualBindings-> Complexity: 21
Method Name : targetClassInheritedByAnotherCandidateTargetClass-> Complexity: 5
Method Name : getMoveMethodCandidateRefactoringsByAccess-> Complexity: 21
Method Name : computeAccessMap-> Complexity: 7
Method Name : getExtractClassCandidateRefactorings-> Complexity: 12
Method Name : getJaccardDistanceMatrix-> Complexity: 4
	 WMC: 7
Total Complexity: 78


Class name: Entity
	 WMC: 0
Total Complexity: 0


Class name: ExtractClassCandidateGroup
Method Name : getExtractedConcepts-> Complexity: 1
Method Name : getSource-> Complexity: 1
Method Name : addCandidate-> Complexity: 1
Method Name : getCandidates-> Complexity: 1
Method Name : groupConcepts-> Complexity: 6
Method Name : findConceptTerms-> Complexity: 3
Method Name : compareTo-> Complexity: 2
	 WMC: 7
Total Complexity: 15


Class name: ExtractClassCandidateRefactoring
Method Name : getTargetClassName-> Complexity: 1
Method Name : setTargetClassName-> Complexity: 1
Method Name : getExtractedEntities-> Complexity: 1
Method Name : getExtractedMethods-> Complexity: 3
Method Name : getDelegateMethods-> Complexity: 3
Method Name : getExtractedFieldFragments-> Complexity: 3
Method Name : getLeaveDelegate-> Complexity: 1
Method Name : leaveDelegate-> Complexity: 1
Method Name : isApplicable-> Complexity: 8
Method Name : validRemainingMethodsInSourceClass-> Complexity: 4
Method Name : validRemainingFieldsInSourceClass-> Complexity: 4
Method Name : isReadObject-> Complexity: 1
Method Name : isReadObject-> Complexity: 1
Method Name : isWriteObject-> Complexity: 1
Method Name : isWriteObject-> Complexity: 1
Method Name : isEquals-> Complexity: 1
Method Name : isHashCode-> Complexity: 1
Method Name : isToString-> Complexity: 1
Method Name : isClone-> Complexity: 1
Method Name : isCompareTo-> Complexity: 1
Method Name : containsFieldAccessOfEnclosingClass-> Complexity: 2
Method Name : overridesMethod-> Complexity: 2
Method Name : containsSuperMethodInvocation-> Complexity: 2
Method Name : isSynchronized-> Complexity: 2
Method Name : getEntitySet-> Complexity: 1
Method Name : getPositions-> Complexity: 5
Method Name : getSource-> Complexity: 1
Method Name : getSourceClassTypeDeclaration-> Complexity: 1
Method Name : getSourceEntity-> Complexity: 1
Method Name : getTarget-> Complexity: 1
Method Name : getTargetClassTypeDeclaration-> Complexity: 1
Method Name : toString-> Complexity: 1
Method Name : getAnnotationText-> Complexity: 1
Method Name : getGodClassVisualizationData-> Complexity: 1
Method Name : getSourceIFile-> Complexity: 1
Method Name : getTargetIFile-> Complexity: 1
Method Name : getUserRate-> Complexity: 1
Method Name : setUserRate-> Complexity: 1
Method Name : compareTo-> Complexity: 3
Method Name : findTopics-> Complexity: 4
Method Name : getTopics-> Complexity: 1
Method Name : getDistinctSourceDependencies-> Complexity: 1
Method Name : getDistinctTargetDependencies-> Complexity: 1
	 WMC: 43
Total Complexity: 75


Class name: ExtractedConcept
Method Name : getTopics-> Complexity: 1
Method Name : getSourceClass-> Complexity: 1
Method Name : getConceptEntities-> Complexity: 1
Method Name : getConceptClusters-> Complexity: 1
Method Name : addConceptCluster-> Complexity: 1
Method Name : findTopics-> Complexity: 4
Method Name : compareTo-> Complexity: 1
	 WMC: 7
Total Complexity: 10


Class name: MoveMethodCandidateRefactoring
Method Name : isApplicable-> Complexity: 2
Method Name : leaveDelegate-> Complexity: 1
Method Name : targetClassContainsMethodWithSourceMethodSignature-> Complexity: 7
Method Name : isSourceClassATestClass-> Complexity: 1
Method Name : isTargetClassAnInterface-> Complexity: 2
Method Name : isTargetClassAnEnum-> Complexity: 2
Method Name : validTargetObject-> Complexity: 2
Method Name : oneToManyRelationshipWithTargetClass-> Complexity: 2
Method Name : overridesMethod-> Complexity: 2
Method Name : containsFieldAssignment-> Complexity: 2
Method Name : containsAssignmentToTargetClassVariable-> Complexity: 3
Method Name : containsSuperMethodInvocation-> Complexity: 2
Method Name : isSynchronized-> Complexity: 2
Method Name : containsMethodCallWithThisExpressionAsArgument-> Complexity: 2
Method Name : containsNullCheckForTargetObject-> Complexity: 2
Method Name : getSourceClassTypeDeclaration-> Complexity: 1
Method Name : getTargetClassTypeDeclaration-> Complexity: 1
Method Name : getSourceIFile-> Complexity: 1
Method Name : getTargetIFile-> Complexity: 1
Method Name : getSourceMethodDeclaration-> Complexity: 1
Method Name : getSourceClass-> Complexity: 1
Method Name : getTargetClass-> Complexity: 1
Method Name : getSourceMethod-> Complexity: 1
Method Name : getAdditionalMethodsToBeMoved-> Complexity: 1
Method Name : getMovedMethodName-> Complexity: 1
Method Name : setMovedMethodName-> Complexity: 1
Method Name : toString-> Complexity: 1
Method Name : getSourceEntity-> Complexity: 4
Method Name : getSource-> Complexity: 1
Method Name : getTarget-> Complexity: 1
Method Name : getEntitySet-> Complexity: 1
Method Name : getPositions-> Complexity: 1
Method Name : getAnnotationText-> Complexity: 1
Method Name : getFeatureEnvyVisualizationData-> Complexity: 1
Method Name : getNumberOfDistinctEnviedElements-> Complexity: 3
Method Name : getUserRate-> Complexity: 1
Method Name : setUserRate-> Complexity: 1
Method Name : compareTo-> Complexity: 3
Method Name : getDistinctSourceDependencies-> Complexity: 1
Method Name : getDistinctTargetDependencies-> Complexity: 1
	 WMC: 40
Total Complexity: 66


Class name: MyAbstractExpression
Method Name : isAccessor-> Complexity: 6
Method Name : recurseDelegations-> Complexity: 2
Method Name : setMethodInvocationList-> Complexity: 1
Method Name : setAttributeInstructionList-> Complexity: 1
Method Name : containsAttributeInstruction-> Complexity: 1
Method Name : containsMethodInvocation-> Complexity: 1
Method Name : addMethodInvocation-> Complexity: 2
Method Name : addAttributeInstruction-> Complexity: 2
Method Name : getNumberOfAttributeInstructions-> Complexity: 1
Method Name : getNumberOfMethodInvocations-> Complexity: 1
Method Name : getMethodInvocationIterator-> Complexity: 1
Method Name : getAttributeInstructionIterator-> Complexity: 1
Method Name : setOwner-> Complexity: 1
Method Name : getOwner-> Complexity: 1
Method Name : getExpression-> Complexity: 1
Method Name : setExpression-> Complexity: 1
Method Name : toString-> Complexity: 1
Method Name : setAttributeInstructionReference-> Complexity: 2
Method Name : getEntitySet-> Complexity: 4
Method Name : equals-> Complexity: 3
	 WMC: 20
Total Complexity: 34


Class name: MyAbstractStatement
Method Name : isAccessor-> Complexity: 6
Method Name : recurseDelegations-> Complexity: 2
Method Name : delegationLoop-> Complexity: 2
Method Name : setMethodInvocationList-> Complexity: 1
Method Name : setAttributeInstructionList-> Complexity: 1
Method Name : containsAttributeInstruction-> Complexity: 1
Method Name : containsMethodInvocation-> Complexity: 1
Method Name : addMethodInvocation-> Complexity: 2
Method Name : addAttributeInstruction-> Complexity: 2
Method Name : getNumberOfAttributeInstructions-> Complexity: 1
Method Name : getNumberOfMethodInvocations-> Complexity: 1
Method Name : getMethodInvocationIterator-> Complexity: 1
Method Name : getMethodInvocationList-> Complexity: 1
Method Name : getAttributeInstructionIterator-> Complexity: 1
Method Name : getAttributeInstructionList-> Complexity: 1
Method Name : setParent-> Complexity: 1
Method Name : getParent-> Complexity: 1
Method Name : getStatement-> Complexity: 1
Method Name : setStatement-> Complexity: 1
Method Name : toString-> Complexity: 1
Method Name : setAttributeInstructionReference-> Complexity: 2
Method Name : getAbstractStatement-> Complexity: 2
Method Name : getEntitySet-> Complexity: 4
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 1
	 WMC: 25
Total Complexity: 41


Class name: MyAttribute
Method Name : getFieldObject-> Complexity: 1
Method Name : setFieldObject-> Complexity: 1
Method Name : getAccess-> Complexity: 1
Method Name : setAccess-> Complexity: 1
Method Name : generateAttributeInstruction-> Complexity: 1
Method Name : setClassOrigin-> Complexity: 1
Method Name : getClassOrigin-> Complexity: 1
Method Name : getName-> Complexity: 1
Method Name : setClassType-> Complexity: 1
Method Name : getClassType-> Complexity: 1
Method Name : isReference-> Complexity: 1
Method Name : setReference-> Complexity: 1
Method Name : addMethod-> Complexity: 2
Method Name : getMethodIterator-> Complexity: 1
Method Name : equals-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
Method Name : getEntitySet-> Complexity: 3
Method Name : getFullEntitySet-> Complexity: 2
	 WMC: 20
Total Complexity: 27


Class name: MyAttributeInstruction
Method Name : isReference-> Complexity: 1
Method Name : setReference-> Complexity: 1
Method Name : getClassOrigin-> Complexity: 1
Method Name : setClassOrigin-> Complexity: 1
Method Name : getClassType-> Complexity: 1
Method Name : getName-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : toString-> Complexity: 1
	 WMC: 8
Total Complexity: 10


Class name: MyClass
Method Name : getName-> Complexity: 1
Method Name : getSuperclass-> Complexity: 1
Method Name : setSuperclass-> Complexity: 1
Method Name : getClassObject-> Complexity: 1
Method Name : setClassObject-> Complexity: 1
Method Name : addAttribute-> Complexity: 2
Method Name : getAttribute-> Complexity: 3
Method Name : getMethod-> Complexity: 3
Method Name : getMethod-> Complexity: 3
Method Name : getMethodList-> Complexity: 1
Method Name : addMethod-> Complexity: 2
Method Name : removeMethod-> Complexity: 1
Method Name : removeAttribute-> Complexity: 1
Method Name : getAttributeList-> Complexity: 1
Method Name : getAttributeIterator-> Complexity: 1
Method Name : getMethodIterator-> Complexity: 1
Method Name : getEntitySet-> Complexity: 4
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
	 WMC: 20
Total Complexity: 34


Class name: MyCompositeStatement
Method Name : addStatement-> Complexity: 1
Method Name : getStatementIterator-> Complexity: 1
Method Name : addExpression-> Complexity: 1
Method Name : getExpressionIterator-> Complexity: 1
Method Name : setAttributeInstructionReference-> Complexity: 3
Method Name : getAbstractStatement-> Complexity: 4
Method Name : update-> Complexity: 12
Method Name : addAttributeInstructionInStatementsOrExpressionsContainingMethodInvocation-> Complexity: 7
Method Name : insertMethodInvocationBeforeStatement-> Complexity: 4
Method Name : removeStatement-> Complexity: 4
Method Name : replaceSiblingStatementsWithMethodInvocation-> Complexity: 6
Method Name : removeAllStatementsExceptFromSiblingStatements-> Complexity: 6
Method Name : getEntitySet-> Complexity: 2
	 WMC: 13
Total Complexity: 52


Class name: MyMethod
Method Name : setMethodObject-> Complexity: 1
Method Name : getMethodObject-> Complexity: 1
Method Name : getAccess-> Complexity: 1
Method Name : setAccess-> Complexity: 1
Method Name : setMethodBody-> Complexity: 1
Method Name : generateMethodInvocation-> Complexity: 1
Method Name : isAbstract-> Complexity: 1
Method Name : setAbstract-> Complexity: 1
Method Name : containsParameter-> Complexity: 3
Method Name : setClassOrigin-> Complexity: 1
Method Name : removeParameter-> Complexity: 1
Method Name : addParameter-> Complexity: 2
Method Name : getClassOrigin-> Complexity: 1
Method Name : getMethodName-> Complexity: 1
Method Name : setMethodName-> Complexity: 1
Method Name : getReturnType-> Complexity: 1
Method Name : getParameterList-> Complexity: 1
Method Name : setAttributeInstructionReference-> Complexity: 2
Method Name : getAbstractStatement-> Complexity: 2
Method Name : getMethodInvocationIterator-> Complexity: 2
Method Name : getAttributeInstructionIterator-> Complexity: 2
Method Name : getNumberOfAttributeInstructions-> Complexity: 2
Method Name : getNumberOfMethodInvocations-> Complexity: 2
Method Name : getNumberOfParameters-> Complexity: 1
Method Name : equals-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 3
Method Name : toString-> Complexity: 5
Method Name : getEntitySet-> Complexity: 5
Method Name : getFullEntitySet-> Complexity: 3
	 WMC: 30
Total Complexity: 53


Class name: MyMethodBody
Method Name : processStatement-> Complexity: 5
Method Name : getMethodBodyObject-> Complexity: 1
Method Name : containsAttributeInstruction-> Complexity: 1
Method Name : containsMethodInvocation-> Complexity: 1
Method Name : getNumberOfAttributeInstructions-> Complexity: 1
Method Name : getNumberOfMethodInvocations-> Complexity: 1
Method Name : getMethodInvocationIterator-> Complexity: 1
Method Name : getAttributeInstructionIterator-> Complexity: 1
Method Name : setAttributeInstructionReference-> Complexity: 1
Method Name : getAbstractStatement-> Complexity: 1
Method Name : addAttributeInstructionInStatementsOrExpressionsContainingMethodInvocation-> Complexity: 1
Method Name : insertMethodInvocationBeforeStatement-> Complexity: 1
Method Name : removeStatement-> Complexity: 1
Method Name : replaceSiblingStatementsWithMethodInvocation-> Complexity: 1
Method Name : getEntitySet-> Complexity: 1
	 WMC: 15
Total Complexity: 19


Class name: MyMethodInvocation
Method Name : getClassOrigin-> Complexity: 1
Method Name : getMethodName-> Complexity: 1
Method Name : getReturnType-> Complexity: 1
Method Name : getParameterList-> Complexity: 1
Method Name : getNumberOfParameters-> Complexity: 1
Method Name : setClassOrigin-> Complexity: 1
Method Name : equals-> Complexity: 3
Method Name : toString-> Complexity: 5
	 WMC: 8
Total Complexity: 14


Class name: MyStatement
	 WMC: 0
Total Complexity: 0


Class name: MySystem
Method Name : generateSystem-> Complexity: 16
Method Name : generateSystemWithStaticMembers-> Complexity: 15
Method Name : getClassIterator-> Complexity: 1
Method Name : getClass-> Complexity: 1
Method Name : addClass-> Complexity: 2
Method Name : removeClass-> Complexity: 2
Method Name : getSystemObject-> Complexity: 1
Method Name : getAssociationsOfClass-> Complexity: 1
Method Name : containsAssociationWithMultiplicityBetweenClasses-> Complexity: 2
	 WMC: 9
Total Complexity: 41


Class name: Evolution
Method Name : getSimilarityEntries-> Complexity: 0
Method Name : getChangeEntries-> Complexity: 0
Method Name : getCode-> Complexity: 0
	 WMC: 6
Total Complexity: 0


Class name: FeatureEnvyEvolution
Method Name : getNumberOfEnviedElements-> Complexity: 17
Method Name : getNumberOfAccessibleMembers-> Complexity: 5
Method Name : getSimilarityEntries-> Complexity: 1
Method Name : getChangeEntries-> Complexity: 1
Method Name : getCode-> Complexity: 1
	 WMC: 5
Total Complexity: 25


Class name: MethodEvolution
Method Name : getStringRepresentation-> Complexity: 5
Method Name : editDistance-> Complexity: 6
Method Name : getSimilarityEntries-> Complexity: 1
Method Name : getChangeEntries-> Complexity: 1
Method Name : getCode-> Complexity: 1
	 WMC: 5
Total Complexity: 14


Class name: ProjectEvolution
Method Name : getProjectEntries-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: ProjectVersion
Method Name : compareTo-> Complexity: 17
Method Name : toString-> Complexity: 3
	 WMC: 2
Total Complexity: 20


Class name: ProjectVersionPair
Method Name : getFromVersion-> Complexity: 1
Method Name : getToVersion-> Complexity: 1
Method Name : toString-> Complexity: 1
	 WMC: 3
Total Complexity: 3


Class name: TypeCheckingEvolution
Method Name : generateTypeCheckEliminationsWithinJavaProject-> Complexity: 5
Method Name : generateTypeCheckEliminationsWithinCompilationUnit-> Complexity: 5
Method Name : generateTypeCheckEliminationsWithinTypeDeclaration-> Complexity: 7
Method Name : generateTypeCheckEliminationsWithinMethodBody-> Complexity: 28
Method Name : getSimilarityEntries-> Complexity: 1
Method Name : getChangeEntries-> Complexity: 1
Method Name : getCode-> Complexity: 1
	 WMC: 7
Total Complexity: 48


Class name: PreferenceConstants
	 WMC: 0
Total Complexity: 0


Class name: PreferenceInitializer
Method Name : initializeDefaultPreferences-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: PropertyManagerPreferencePage
Method Name : createFieldEditors-> Complexity: 1
Method Name : checkState-> Complexity: 11
Method Name : propertyChange-> Complexity: 2
Method Name : init-> Complexity: 1
	 WMC: 4
Total Complexity: 15


Class name: BadSmellsMenu
Method Name : run-> Complexity: 6
Method Name : selectionChanged-> Complexity: 1
Method Name : dispose-> Complexity: 1
Method Name : init-> Complexity: 1
	 WMC: 4
Total Complexity: 9


Class name: Activator
Method Name : start-> Complexity: 1
Method Name : stop-> Complexity: 1
Method Name : getDefault-> Complexity: 1
Method Name : getImageDescriptor-> Complexity: 1
	 WMC: 4
Total Complexity: 4


Class name: ASTSlice
Method Name : isVariableCriterionDeclarationStatementIsDeeperNestedThanExtractedMethodInvocationInsertionStatement-> Complexity: 4
Method Name : depthOfNesting-> Complexity: 2
Method Name : getSourceTypeDeclaration-> Complexity: 1
Method Name : getSourceMethodDeclaration-> Complexity: 1
Method Name : getLocalVariableCriterion-> Complexity: 1
Method Name : getPassedParameters-> Complexity: 1
Method Name : getSliceNodes-> Complexity: 1
Method Name : getSliceStatements-> Complexity: 1
Method Name : getRemovableStatements-> Complexity: 1
Method Name : getVariableCriterionDeclarationStatement-> Complexity: 1
Method Name : getExtractedMethodInvocationInsertionStatement-> Complexity: 1
Method Name : getExtractedMethodName-> Complexity: 1
Method Name : setExtractedMethodName-> Complexity: 1
Method Name : declarationOfVariableCriterionBelongsToSliceNodes-> Complexity: 1
Method Name : declarationOfVariableCriterionBelongsToRemovableNodes-> Complexity: 1
Method Name : getIFile-> Complexity: 1
Method Name : getBoundaryBlock-> Complexity: 1
Method Name : isObjectSlice-> Complexity: 1
Method Name : getMethodSize-> Complexity: 1
Method Name : getHighlightPositions-> Complexity: 25
Method Name : sliceToString-> Complexity: 2
Method Name : toString-> Complexity: 1
Method Name : getNumberOfSliceStatements-> Complexity: 1
Method Name : getNumberOfDuplicatedStatements-> Complexity: 1
Method Name : getUserRate-> Complexity: 1
Method Name : setUserRate-> Complexity: 1
	 WMC: 26
Total Complexity: 55


Class name: ASTSliceGroup
Method Name : addCandidate-> Complexity: 3
Method Name : getCandidates-> Complexity: 1
Method Name : getSourceTypeDeclaration-> Complexity: 1
Method Name : getSourceMethodDeclaration-> Complexity: 1
Method Name : getLocalVariableCriterion-> Complexity: 1
Method Name : setAverageNumberOfExtractedStatementsInGroup-> Complexity: 1
Method Name : setAverageNumberOfDuplicatedStatementsInGroup-> Complexity: 1
Method Name : setAverageDuplicationRatioInGroup-> Complexity: 1
Method Name : setMaximumNumberOfExtractedStatementsInGroup-> Complexity: 1
Method Name : compareTo-> Complexity: 11
	 WMC: 10
Total Complexity: 22


Class name: @SuppressWarnings("restriction")
Method Name : getExtractedTypeName-> Complexity: 1
Method Name : setExtractedTypeName-> Complexity: 1
Method Name : setLeaveDelegateForPublicMethods-> Complexity: 1
Method Name : getSourceCompilationUnit-> Complexity: 1
Method Name : getJavaElementsToOpenInEditor-> Complexity: 1
Method Name : appendAccessorMethodSuffix-> Complexity: 1
Method Name : appendAccessorMethodSuffix-> Complexity: 8
Method Name : apply-> Complexity: 11
Method Name : handleInitializationOfExtractedFieldsWithThisExpressionInTheirInitializer-> Complexity: 5
Method Name : addDelegationInExtractedMethod-> Complexity: 8
Method Name : removeSourceMethods-> Complexity: 10
Method Name : modifyExtractedMethodInvocationsInSourceClass-> Complexity: 17
Method Name : existsNonTransientExtractedFieldFragment-> Complexity: 6
Method Name : implementsSerializableInterface-> Complexity: 4
Method Name : implementsCloneableInterface-> Complexity: 5
Method Name : staticFieldInitializer-> Complexity: 4
Method Name : variableBindingInExtractedFields-> Complexity: 3
Method Name : createExtractedClass-> Complexity: 75
Method Name : createCloneMethod-> Complexity: 7
Method Name : getAverageLevelOfTargets-> Complexity: 6
Method Name : allExtractedMethodsObtainedLevel-> Complexity: 3
Method Name : getExtractedMethod-> Complexity: 3
Method Name : createExtractedMethodDeclaration-> Complexity: 11
Method Name : variableBindingCorrespondsToExtractedField-> Complexity: 3
Method Name : methodBindingCorrespondsToExtractedMethod-> Complexity: 3
Method Name : isParentAnonymousClassDeclaration-> Complexity: 3
Method Name : findSetterMethodInSourceClass-> Complexity: 4
Method Name : findGetterMethodInSourceClass-> Complexity: 4
Method Name : createSetterMethodInSourceClass-> Complexity: 4
Method Name : createGetterMethodInSourceClass-> Complexity: 4
Method Name : modifySourceMemberAccessesInTargetClass-> Complexity: 181
Method Name : handleAccessedFieldNotHavingSetterMethod-> Complexity: 5
Method Name : handleAccessedFieldHavingSetterMethod-> Complexity: 7
Method Name : addVariable-> Complexity: 1
Method Name : addThisVariable-> Complexity: 1
Method Name : isThisVariable-> Complexity: 1
Method Name : containsThisVariable-> Complexity: 3
Method Name : containsVariable-> Complexity: 3
Method Name : declaredInSourceTypeDeclarationOrSuperclass-> Complexity: 1
Method Name : addSourceClassParameterToMovedMethod-> Complexity: 1
Method Name : addParameterToMovedMethod-> Complexity: 2
Method Name : addParameterToMovedMethod-> Complexity: 2
Method Name : createNameForParameterizedFieldAccess-> Complexity: 1
Method Name : setPublicModifierToSourceMethod-> Complexity: 10
Method Name : updateAccessModifier-> Complexity: 2
Method Name : modifySourceStaticFieldInstructionsInTargetClass-> Complexity: 11
Method Name : setPublicModifierToSourceMemberType-> Complexity: 6
Method Name : updateBodyDeclarationAccessModifier-> Complexity: 9
Method Name : setPublicModifierToSourceField-> Complexity: 13
Method Name : createSetterMethodDeclaration-> Complexity: 3
Method Name : createGetterMethodDeclaration-> Complexity: 2
Method Name : addStaticImportDeclaration-> Complexity: 1
Method Name : addImportDeclaration-> Complexity: 9
Method Name : createExtractedTypeFieldReferenceInSourceClass-> Complexity: 19
Method Name : updateWriteObjectInSourceClass-> Complexity: 7
Method Name : createMethodInvocationStatementForWriteObject-> Complexity: 1
Method Name : updateReadObjectInSourceClass-> Complexity: 7
Method Name : createAssignmentStatementForReadObject-> Complexity: 1
Method Name : updateCloneInSourceClass-> Complexity: 9
Method Name : createAssignmentStatementForClone-> Complexity: 1
Method Name : isWriteObject-> Complexity: 1
Method Name : isReadObject-> Complexity: 1
Method Name : isClone-> Complexity: 1
Method Name : findCloneMethod-> Complexity: 4
Method Name : isClone-> Complexity: 1
Method Name : isFirstStatementMethodInvocationExpressionStatementWithName-> Complexity: 6
Method Name : isFirstStatementVariableDeclarationStatementWithSuperCloneInitializer-> Complexity: 10
Method Name : removeFieldFragmentsInSourceClass-> Complexity: 8
Method Name : modifyExtractedFieldAssignmentsInSourceClass-> Complexity: 67
Method Name : modifyExtractedFieldAccessesInSourceClass-> Complexity: 22
Method Name : getAllMethodDeclarationsInSourceClass-> Complexity: 4
Method Name : getMethodDeclarationsWithinAnonymousClassDeclarations-> Complexity: 5
Method Name : getMethodDeclarationsWithinAnonymousClassDeclarations-> Complexity: 6
Method Name : isAssignmentChild-> Complexity: 7
Method Name : getName-> Complexity: 1
Method Name : checkInitialConditions-> Complexity: 1
Method Name : checkFinalConditions-> Complexity: 1
Method Name : getDescriptor-> Complexity: 1
Method Name : createChange-> Complexity: 1
	 WMC: 79
Total Complexity: 685


Class name: ExtractClassRefactoringDescriptor
Method Name : createRefactoring-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: @SuppressWarnings("restriction")
Method Name : getMappers-> Complexity: 1
Method Name : initialize-> Complexity: 7
Method Name : getJavaElementsToOpenInEditor-> Complexity: 1
Method Name : getMapper-> Complexity: 1
Method Name : setMapper-> Complexity: 1
Method Name : getExtractedMethodName-> Complexity: 1
Method Name : setExtractedMethodName-> Complexity: 1
Method Name : apply-> Complexity: 5
Method Name : mappedNodesContainStatementReturningVariable-> Complexity: 6
Method Name : mappedNodesContainStatementDeclaringVariable-> Complexity: 7
Method Name : mappedNodesContainDifferentStatementsDeclaringVariables-> Complexity: 7
Method Name : variableBelongsToParameterizedDifferences-> Complexity: 3
Method Name : variableIsPassedAsCommonParameter-> Complexity: 3
Method Name : variableIsPassedAsCommonParameter-> Complexity: 3
Method Name : variableIsDeclaredInMappedNodes-> Complexity: 3
Method Name : getLocallyAccessedFields-> Complexity: 3
Method Name : containsImportWithNameClash-> Complexity: 4
Method Name : extractClone-> Complexity: 140
Method Name : containsSuperMethodCall-> Complexity: 3
Method Name : commonSuperTypeDeclaresOrInheritsMethodWithIdenticalSignature-> Complexity: 4
Method Name : addTypeBinding-> Complexity: 4
Method Name : extractMethodInvocations-> Complexity: 7
Method Name : createDifferencesForStaticMethodCalls-> Complexity: 12
Method Name : checkIfThisReferenceIsPassedAsArgumentToMethodInvocation-> Complexity: 15
Method Name : noneOfTheConstructorsContainsSuperConstructorCall-> Complexity: 4
Method Name : containsConstructorCallingSuperConstructorWithoutArguments-> Complexity: 4
Method Name : createDefaultConstructor-> Complexity: 1
Method Name : copyConstructor-> Complexity: 8
Method Name : updateAccessModifier-> Complexity: 9
Method Name : firstStatementIsSuperConstructorInvocation-> Complexity: 4
Method Name : matchingArgumentTypes-> Complexity: 4
Method Name : matchingParameterTypesWithArgumentTypes-> Complexity: 4
Method Name : type2Clones-> Complexity: 7
Method Name : compareStatements-> Complexity: 5
Method Name : isField-> Complexity: 5
Method Name : extractTypeBindings-> Complexity: 9
Method Name : superclassDirectlyInheritedFromRefactoredSubclasses-> Complexity: 1
Method Name : getFieldsAccessedInMethod-> Complexity: 5
Method Name : additionalFieldUsedAsInitializers-> Complexity: 6
Method Name : pullUpLocallyAccessedFields-> Complexity: 34
Method Name : bothFieldsDeclaredInCommonSuperclass-> Complexity: 3
Method Name : sameInitializers-> Complexity: 1
Method Name : avoidPullUpMethodDueToSerialization-> Complexity: 3
Method Name : finalizeCloneExtraction-> Complexity: 19
Method Name : differenceContainsSubDifferenceWithSubclassTypeMismatch-> Complexity: 6
Method Name : parameterIsUsedByNodesWithoutDifferences-> Complexity: 14
Method Name : processCloneStructureNode-> Complexity: 82
Method Name : processIfStatementChild-> Complexity: 6
Method Name : processableNode-> Complexity: 1
Method Name : processableMappedNode-> Complexity: 1
Method Name : processableGapNode-> Complexity: 1
Method Name : processCloneStructureGapNode-> Complexity: 55
Method Name : isNestedUnderElse-> Complexity: 6
Method Name : belongsToLabeledStatement-> Complexity: 2
Method Name : processASTNodeWithDifferences-> Complexity: 34
Method Name : preprocessASTNode-> Complexity: 13
Method Name : replaceFieldAccessesOfParameterizedFields-> Complexity: 14
Method Name : replaceFieldAccessesWithGetterMethodInvocations-> Complexity: 14
Method Name : replaceFieldAssignmentsWithSetterMethodInvocations-> Complexity: 8
Method Name : replaceSuperMethodCallsWithRegularMethodCalls-> Complexity: 7
Method Name : createReplacementForFieldAccessOfParameterizedFields-> Complexity: 10
Method Name : createReplacementForFieldAccessWithGetterInvocation-> Complexity: 10
Method Name : createNameForParameterizedFieldAccess-> Complexity: 1
Method Name : createReplacementForFieldAssignment-> Complexity: 6
Method Name : createReplacementForSuperMethodCall-> Complexity: 5
Method Name : createArgument-> Complexity: 3
Method Name : generateSetterMethodInvocation-> Complexity: 9
Method Name : processNestedDifferences-> Complexity: 8
Method Name : generateGetterMethodInvocation-> Complexity: 8
Method Name : replaceExpression-> Complexity: 5
Method Name : addConstructorDeclaration-> Complexity: 6
Method Name : modifySourceClass-> Complexity: 7
Method Name : modifySourceCompilationUnitImportDeclarations-> Complexity: 8
Method Name : typeContainsPureSetterMethodForVariable-> Complexity: 4
Method Name : typeContainsPureGetterMethodForVariable-> Complexity: 4
Method Name : createSetterMethodDeclaration-> Complexity: 5
Method Name : createGetterMethodDeclaration-> Complexity: 5
Method Name : typeContainsMethodWithName-> Complexity: 3
Method Name : typeContainsMethodWithSignature-> Complexity: 3
Method Name : appendAccessorMethodSuffix-> Complexity: 8
Method Name : removeMethodDeclarations-> Complexity: 8
Method Name : removeFieldDeclarations-> Complexity: 13
Method Name : modifySuperclassType-> Complexity: 6
Method Name : modifySourceMethod-> Complexity: 44
Method Name : finalizeOriginalMethod-> Complexity: 1
Method Name : isReturnedVariable-> Complexity: 3
Method Name : isReturnedVariable-> Complexity: 4
Method Name : addImportDeclaration-> Complexity: 10
Method Name : findExistingParametersWithArgName-> Complexity: 5
Method Name : checkFinalConditions-> Complexity: 11
Method Name : checkInitialConditions-> Complexity: 1
Method Name : getDescriptor-> Complexity: 1
Method Name : createChange-> Complexity: 1
Method Name : getName-> Complexity: 1
	 WMC: 94
Total Complexity: 869


Class name: ExtractCloneRefactoringDescriptor
Method Name : createRefactoring-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: ExtractMethodFragmentRefactoring
Method Name : getStatements-> Complexity: 24
Method Name : getThrownExceptionTypes-> Complexity: 23
Method Name : isNestedUnderAnonymousClassDeclaration-> Complexity: 3
Method Name : processPredicateNode-> Complexity: 33
Method Name : processStatementNode-> Complexity: 1
Method Name : belongsToLabeledStatement-> Complexity: 2
Method Name : createTryStatementIfNeeded-> Complexity: 5
Method Name : copyTryStatement-> Complexity: 4
Method Name : isInsideDoLoop-> Complexity: 3
Method Name : surroundingTryBlock-> Complexity: 3
Method Name : tryBlockCatchesExceptionType-> Complexity: 6
Method Name : equalOrExtend-> Complexity: 3
Method Name : extractTypeBinding-> Complexity: 1
Method Name : generateDefaultValue-> Complexity: 9
	 WMC: 14
Total Complexity: 120


Class name: ExtractMethodRefactoring
Method Name : getSlice-> Complexity: 1
Method Name : getExtractedMethodName-> Complexity: 1
Method Name : setExtractedMethodName-> Complexity: 1
Method Name : processTryStatement-> Complexity: 8
Method Name : apply-> Complexity: 1
Method Name : modifySourceMethod-> Complexity: 20
Method Name : getBlockRewrite-> Complexity: 3
Method Name : extractMethod-> Complexity: 18
Method Name : processStatementNode-> Complexity: 1
Method Name : checkFinalConditions-> Complexity: 1
Method Name : checkInitialConditions-> Complexity: 1
Method Name : getDescriptor-> Complexity: 1
Method Name : createChange-> Complexity: 1
Method Name : getName-> Complexity: 1
	 WMC: 14
Total Complexity: 59


Class name: ExtractMethodRefactoringDescriptor
Method Name : createRefactoring-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: MoveMethodRefactoring
Method Name : getChanges-> Complexity: 1
Method Name : getMovedMethodName-> Complexity: 1
Method Name : setMovedMethodName-> Complexity: 1
Method Name : setLeaveDelegate-> Complexity: 1
Method Name : apply-> Complexity: 3
Method Name : addRequiredTargetImportDeclarations-> Complexity: 6
Method Name : createMovedMethod-> Complexity: 48
Method Name : addAdditionalMethodsToTargetClass-> Complexity: 3
Method Name : removeAdditionalMethodsFromSourceClass-> Complexity: 2
Method Name : removeSourceMethod-> Complexity: 2
Method Name : addDelegationInSourceMethod-> Complexity: 17
Method Name : modifyMovedMethodInvocationInSourceClass-> Complexity: 24
Method Name : modifyTargetMethodInvocations-> Complexity: 7
Method Name : modifyTargetPublicFieldInstructions-> Complexity: 17
Method Name : modifySourceStaticFieldInstructionsInTargetClass-> Complexity: 11
Method Name : setPublicModifierToSourceMemberType-> Complexity: 6
Method Name : updateBodyDeclarationAccessModifier-> Complexity: 9
Method Name : setPublicModifierToSourceField-> Complexity: 12
Method Name : modifySourceStaticMethodInvocationsInTargetClass-> Complexity: 4
Method Name : modifySourceMemberAccessesInTargetClass-> Complexity: 58
Method Name : addSourceClassParameterToMovedMethod-> Complexity: 1
Method Name : findSubclassesOverridingMethod-> Complexity: 6
Method Name : setPublicModifierToSourceTypeDeclaration-> Complexity: 8
Method Name : addParameterToMovedMethod-> Complexity: 4
Method Name : addParameterToMovedMethod-> Complexity: 1
Method Name : setPublicModifierToSourceMethod-> Complexity: 10
Method Name : updateAccessModifier-> Complexity: 2
Method Name : modifyRecursiveMethodInvocationsOfTheMovedMethod-> Complexity: 19
Method Name : replaceTargetClassVariableNameWithThisExpressionInMethodInvocationArguments-> Complexity: 10
Method Name : replaceTargetClassVariableNameWithThisExpressionInClassInstanceCreationArguments-> Complexity: 7
Method Name : replaceTargetClassVariableNameWithThisExpressionInVariableDeclarationInitializers-> Complexity: 8
Method Name : replaceTargetClassVariableNameWithThisExpressionInInfixExpressions-> Complexity: 10
Method Name : replaceTargetClassVariableNameWithThisExpressionInCastExpressions-> Complexity: 6
Method Name : replaceTargetClassVariableNameWithThisExpressionInInstanceofExpressions-> Complexity: 6
Method Name : replaceTargetClassVariableNameWithThisExpressionInAssignments-> Complexity: 10
Method Name : replaceTargetClassVariableNameWithThisExpressionInReturnStatements-> Complexity: 6
Method Name : replaceThisExpressionWithSourceClassParameterInMethodInvocationArguments-> Complexity: 6
Method Name : replaceThisExpressionWithSourceClassParameterInClassInstanceCreationArguments-> Complexity: 5
Method Name : replaceThisExpressionWithSourceClassParameterInVariableDeclarationInitializers-> Complexity: 6
Method Name : addParamTagElementToJavadoc-> Complexity: 5
Method Name : removeParamTagElementFromJavadoc-> Complexity: 8
Method Name : checkFinalConditions-> Complexity: 1
Method Name : checkInitialConditions-> Complexity: 1
Method Name : getDescriptor-> Complexity: 1
Method Name : createChange-> Complexity: 1
Method Name : getName-> Complexity: 1
	 WMC: 46
Total Complexity: 382


Class name: MoveMethodRefactoringDescriptor
Method Name : createRefactoring-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: PolymorphismRefactoring
Method Name : getJavaElementsToOpenInEditor-> Complexity: 1
Method Name : modifySourceMethodInvocationsInSubclass-> Complexity: 10
Method Name : replaceThisExpressionWithContextParameterInMethodInvocationArguments-> Complexity: 5
Method Name : replaceThisExpressionWithContextParameterInClassInstanceCreationArguments-> Complexity: 4
Method Name : modifySourceVariableInstructionsInSubclass-> Complexity: 105
Method Name : setPublicModifierToSourceField-> Complexity: 13
Method Name : findSetterMethodInContext-> Complexity: 3
Method Name : findGetterMethodInContext-> Complexity: 3
Method Name : getFile-> Complexity: 11
Method Name : generateGettersForAccessedFields-> Complexity: 8
Method Name : generateSettersForAssignedFields-> Complexity: 7
Method Name : setPublicModifierToAccessedMethods-> Complexity: 7
Method Name : constructExpression-> Complexity: 3
Method Name : sourceTypeRequiredForExtraction-> Complexity: 13
Method Name : generateDefaultValue-> Complexity: 9
	 WMC: 15
Total Complexity: 202


Class name: RefactoringUtility
Method Name : generateQualifiedTypeFromTypeBinding-> Complexity: 13
Method Name : createQualifiedParameterizedType-> Complexity: 2
Method Name : generateTypeFromTypeBinding-> Complexity: 22
Method Name : createParameterizedType-> Complexity: 2
Method Name : generateWrapperTypeForPrimitiveTypeBinding-> Complexity: 10
Method Name : getSimpleTypeBindings-> Complexity: 10
Method Name : containsTypeBinding-> Complexity: 3
Method Name : hasQualifiedType-> Complexity: 1
Method Name : extractType-> Complexity: 6
Method Name : isQualifiedType-> Complexity: 6
Method Name : findFieldDeclaration-> Complexity: 7
Method Name : findGetterDeclarationForField-> Complexity: 6
Method Name : findDeclaringTypeDeclaration-> Complexity: 5
Method Name : findDeclaringTypeDeclaration-> Complexity: 5
Method Name : findTypeDeclaration-> Complexity: 3
Method Name : findCompilationUnit-> Complexity: 3
Method Name : needsQualifier-> Complexity: 1
Method Name : isArrayLengthQualifiedName-> Complexity: 1
Method Name : isEnumConstantInSwitchCaseExpression-> Complexity: 3
Method Name : implementsSerializableInterface-> Complexity: 4
Method Name : isSerializedField-> Complexity: 1
	 WMC: 21
Total Complexity: 114


Class name: ReplaceConditionalWithPolymorphism
Method Name : apply-> Complexity: 1
Method Name : modifyClient-> Complexity: 20
Method Name : setPublicModifierToSourceTypeDeclaration-> Complexity: 11
Method Name : modifyInheritanceHierarchy-> Complexity: 110
Method Name : replaceCastExpressionWithThisExpression-> Complexity: 7
Method Name : getRecursivelyInnerTypes-> Complexity: 2
Method Name : modifySubclassMethodInvocations-> Complexity: 18
Method Name : getRequiredImportDeclarationsBasedOnSignature-> Complexity: 23
Method Name : getRequiredImportDeclarationsBasedOnBranch-> Complexity: 2
Method Name : checkFinalConditions-> Complexity: 1
Method Name : checkInitialConditions-> Complexity: 1
Method Name : getDescriptor-> Complexity: 1
Method Name : createChange-> Complexity: 1
Method Name : getName-> Complexity: 1
	 WMC: 14
Total Complexity: 199


Class name: ReplaceConditionalWithPolymorphismDescriptor
Method Name : createRefactoring-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: @SuppressWarnings("restriction")
Method Name : apply-> Complexity: 4
Method Name : modifyContext-> Complexity: 4
Method Name : createStateField-> Complexity: 1
Method Name : createStateFieldVariableDeclarationFragment-> Complexity: 15
Method Name : replacePrimitiveStateField-> Complexity: 5
Method Name : removePrimitiveStateField-> Complexity: 5
Method Name : generateSetterMethodForStateField-> Complexity: 12
Method Name : setterMethodName-> Complexity: 3
Method Name : generateGetterMethodForStateField-> Complexity: 3
Method Name : replaceConditionalStructureWithPolymorphicMethodInvocation-> Complexity: 16
Method Name : initializeReturnedVariableDeclaration-> Complexity: 4
Method Name : addRequiredImportDeclarationsToContext-> Complexity: 4
Method Name : modifyTypeCheckMethod-> Complexity: 1
Method Name : createGetterMethodForStateObject-> Complexity: 18
Method Name : replaceConditionalStructureWithPolymorphicMethodInvocationThroughStateObject-> Complexity: 20
Method Name : typeObjectGetterMethodAlreadyExists-> Complexity: 13
Method Name : createStateStrategyHierarchy-> Complexity: 111
Method Name : createIntermediateClassAndItsSubclasses-> Complexity: 69
Method Name : modifyTypeFieldAssignmentsInContextClass-> Complexity: 25
Method Name : modifyTypeFieldAccessesInContextClass-> Complexity: 70
Method Name : getAllMethodDeclarationsInSourceClass-> Complexity: 4
Method Name : getMethodDeclarationsWithinAnonymousClassDeclarations-> Complexity: 5
Method Name : getMethodDeclarationsWithinAnonymousClassDeclarations-> Complexity: 6
Method Name : isAssignmentChild-> Complexity: 3
Method Name : nodeExistsInsideTypeCheckCodeFragment-> Complexity: 2
Method Name : generateRequiredImportDeclarationsBasedOnSignature-> Complexity: 23
Method Name : getRequiredImportDeclarationsBasedOnBranch-> Complexity: 2
Method Name : addImportDeclaration-> Complexity: 9
Method Name : setPublicModifierToStaticFields-> Complexity: 12
Method Name : identifyTypeLocalVariableAssignmentsInTypeCheckMethod-> Complexity: 14
Method Name : identifyTypeLocalVariableAccessesInTypeCheckMethod-> Complexity: 44
Method Name : containsStaticFieldKey-> Complexity: 3
Method Name : containsVariable-> Complexity: 3
Method Name : generateSubclassName-> Complexity: 2
Method Name : commonSubstring-> Complexity: 7
Method Name : commonSubstrings-> Complexity: 7
Method Name : getSourceCompilationUnit-> Complexity: 1
Method Name : getAbstractClassName-> Complexity: 1
Method Name : getTypeVariableSimpleName-> Complexity: 1
Method Name : getStaticFieldMapEntrySet-> Complexity: 1
Method Name : getAdditionalStaticFieldMapEntrySet-> Complexity: 1
Method Name : setTypeNameForNamedConstant-> Complexity: 3
Method Name : getTypeNameForNamedConstant-> Complexity: 3
Method Name : checkFinalConditions-> Complexity: 1
Method Name : checkInitialConditions-> Complexity: 3
Method Name : getDescriptor-> Complexity: 1
Method Name : createChange-> Complexity: 1
Method Name : getName-> Complexity: 1
	 WMC: 48
Total Complexity: 567


Class name: ReplaceTypeCodeWithStateStrategyDescriptor
Method Name : createRefactoring-> Complexity: 1
	 WMC: 1
Total Complexity: 1


Class name: TypeCheckElimination
Method Name : addTypeCheck-> Complexity: 2
Method Name : addEmptyTypeCheck-> Complexity: 2
Method Name : containsTypeCheckExpression-> Complexity: 1
Method Name : addDefaultCaseStatement-> Complexity: 1
Method Name : addStaticType-> Complexity: 1
Method Name : addSubclassType-> Complexity: 1
Method Name : addRemainingIfStatementExpression-> Complexity: 1
Method Name : addAdditionalStaticField-> Complexity: 1
Method Name : addAccessedField-> Complexity: 1
Method Name : addAssignedField-> Complexity: 1
Method Name : addSuperAccessedField-> Complexity: 1
Method Name : addSuperAccessedFieldBinding-> Complexity: 1
Method Name : getGetterMethodBindingOfSuperAccessedField-> Complexity: 1
Method Name : getSuperAccessedFields-> Complexity: 1
Method Name : getSuperAccessedFieldBindings-> Complexity: 1
Method Name : addSuperAssignedField-> Complexity: 1
Method Name : addSuperAssignedFieldBinding-> Complexity: 1
Method Name : getSetterMethodBindingOfSuperAssignedField-> Complexity: 1
Method Name : getSuperAssignedFields-> Complexity: 1
Method Name : getSuperAssignedFieldBindings-> Complexity: 1
Method Name : addAccessedLocalVariable-> Complexity: 1
Method Name : addAssignedLocalVariable-> Complexity: 1
Method Name : addAccessedParameter-> Complexity: 1
Method Name : addAssignedParameter-> Complexity: 1
Method Name : addAccessedMethod-> Complexity: 1
Method Name : addSuperAccessedMethod-> Complexity: 1
Method Name : getAccessedLocalVariables-> Complexity: 1
Method Name : getAccessedFields-> Complexity: 1
Method Name : getAssignedFields-> Complexity: 1
Method Name : getAccessedParameters-> Complexity: 1
Method Name : getAccessedMethods-> Complexity: 1
Method Name : getSuperAccessedMethods-> Complexity: 1
Method Name : getTypeCheckExpressions-> Complexity: 1
Method Name : getTypeCheckStatements-> Complexity: 1
Method Name : getTypeCheckStatements-> Complexity: 1
Method Name : getDefaultCaseStatements-> Complexity: 1
Method Name : getStaticFields-> Complexity: 1
Method Name : getStaticFields-> Complexity: 4
Method Name : getAdditionalStaticFields-> Complexity: 1
Method Name : getRemainingIfStatementExpression-> Complexity: 1
Method Name : getExpressionCorrespondingToTypeCheckStatementList-> Complexity: 3
Method Name : getTypeField-> Complexity: 1
Method Name : setTypeField-> Complexity: 1
Method Name : getTypeFieldGetterMethod-> Complexity: 1
Method Name : setTypeFieldGetterMethod-> Complexity: 1
Method Name : getTypeFieldSetterMethod-> Complexity: 1
Method Name : setTypeFieldSetterMethod-> Complexity: 1
Method Name : getTypeCheckCodeFragment-> Complexity: 1
Method Name : setTypeCheckCodeFragment-> Complexity: 1
Method Name : getTypeCheckCompositeStatement-> Complexity: 1
Method Name : setTypeCheckCompositeStatement-> Complexity: 1
Method Name : getTypeCheckMethod-> Complexity: 1
Method Name : setTypeCheckMethod-> Complexity: 1
Method Name : getTypeCheckClass-> Complexity: 1
Method Name : setTypeCheckClass-> Complexity: 1
Method Name : getTypeCheckIFile-> Complexity: 1
Method Name : setTypeCheckIFile-> Complexity: 1
Method Name : getTypeLocalVariable-> Complexity: 1
Method Name : setTypeLocalVariable-> Complexity: 1
Method Name : getTypeMethodInvocation-> Complexity: 1
Method Name : setTypeMethodInvocation-> Complexity: 1
Method Name : getForeignTypeField-> Complexity: 1
Method Name : setForeignTypeField-> Complexity: 1
Method Name : getExistingInheritanceTree-> Complexity: 1
Method Name : setExistingInheritanceTree-> Complexity: 1
Method Name : getInheritanceTreeMatchingWithStaticTypes-> Complexity: 1
Method Name : setInheritanceTreeMatchingWithStaticTypes-> Complexity: 1
Method Name : putStaticFieldSubclassTypeMapping-> Complexity: 1
Method Name : allTypeCheckingsContainStaticFieldOrSubclassType-> Complexity: 1
Method Name : isApplicable-> Complexity: 2
Method Name : isSubclassTypeAnInterface-> Complexity: 4
Method Name : returnStatementAfterTypeCheckCodeFragment-> Complexity: 8
Method Name : containsLocalVariableAssignment-> Complexity: 44
Method Name : containsBranchingStatement-> Complexity: 12
Method Name : containsSuperMethodInvocation-> Complexity: 5
Method Name : containsSuperFieldAccess-> Complexity: 5
Method Name : getTypeCheckMethodReturnType-> Complexity: 1
Method Name : getTypeCheckMethodParameters-> Complexity: 1
Method Name : getTypeCheckMethodReturnedVariable-> Complexity: 17
Method Name : getTypeVariableSimpleName-> Complexity: 8
Method Name : getAbstractClassName-> Complexity: 7
Method Name : getAbstractClassType-> Complexity: 29
Method Name : equalTypeBindings-> Complexity: 3
Method Name : getSubclassNames-> Complexity: 14
Method Name : getCastingType-> Complexity: 16
Method Name : getThrownExceptions-> Complexity: 14
Method Name : allTypeCheckBranchesAreEmpty-> Complexity: 3
Method Name : isTypeCheckMethodStateSetter-> Complexity: 11
Method Name : typeCheckCodeFragmentContainsReturnStatement-> Complexity: 2
Method Name : getAbstractMethodName-> Complexity: 1
Method Name : setAbstractMethodName-> Complexity: 1
Method Name : getAverageNumberOfStatements-> Complexity: 5
Method Name : equals-> Complexity: 3
Method Name : hashCode-> Complexity: 2
Method Name : toString-> Complexity: 1
Method Name : getGroupSizeAtClassLevel-> Complexity: 1
Method Name : setGroupSizeAtClassLevel-> Complexity: 1
Method Name : matchingStatesOrSubTypes-> Complexity: 14
Method Name : getUserRate-> Complexity: 1
Method Name : setUserRate-> Complexity: 1
Method Name : compareTo-> Complexity: 5
	 WMC: 101
Total Complexity: 318


Class name: TypeCheckEliminationGroup
Method Name : addCandidate-> Complexity: 1
Method Name : getCandidates-> Complexity: 1
Method Name : getGroupSizeAtSystemLevel-> Complexity: 1
Method Name : setGroupSizeAtSystemLevel-> Complexity: 1
Method Name : getAverageGroupSizeAtClassLevel-> Complexity: 1
Method Name : setAverageGroupSizeAtClassLevel-> Complexity: 1
Method Name : getAverageNumberOfStatementsInGroup-> Complexity: 1
Method Name : setAverageNumberOfStatementsInGroup-> Complexity: 1
Method Name : getConstantVariables-> Complexity: 4
Method Name : getInheritanceTree-> Complexity: 3
Method Name : compareTo-> Complexity: 11
Method Name : toString-> Complexity: 3
	 WMC: 12
Total Complexity: 29


Class name: CloneDiffContentProvider
Method Name : getChildren-> Complexity: 1
Method Name : getParent-> Complexity: 1
Method Name : hasChildren-> Complexity: 2
	 WMC: 3
Total Complexity: 4


Class name: CloneDiffStyledLabelProvider
Method Name : update-> Complexity: 8
Method Name : setCellBackgroundWithoutCode-> Complexity: 2
Method Name : setCellBackgroundWithCode-> Complexity: 2
Method Name : generateStyledString-> Complexity: 3
Method Name : generateStyledStringForGap-> Complexity: 7
Method Name : generateStyledStringForElseGap-> Complexity: 7
Method Name : getToolTipText-> Complexity: 1
Method Name : getToolTipShift-> Complexity: 1
Method Name : getToolTipLocation-> Complexity: 1
Method Name : getToolTipDisplayDelayTime-> Complexity: 1
Method Name : getToolTipTimeDisplayed-> Complexity: 1
	 WMC: 11
Total Complexity: 34


Class name: @SuppressWarnings("restriction")
Method Name : controlResized-> Complexity: 1
Method Name : createViewerToolTipContentArea-> Complexity: 10
Method Name : packAndFillLastColumn-> Complexity: 4
Method Name : isHideOnMouseDown-> Complexity: 1
Method Name : inputChanged-> Complexity: 1
Method Name : dispose-> Complexity: 1
Method Name : getElements-> Complexity: 2
Method Name : getChildren-> Complexity: 2
Method Name : getParent-> Complexity: 2
Method Name : hasChildren-> Complexity: 1
Method Name : update-> Complexity: 4
	 WMC: 11
Total Complexity: 29


Class name: CloneDiffWizardPage
Method Name : getText-> Complexity: 2
Method Name : modifyText-> Complexity: 1
Method Name : selectionChanged-> Complexity: 2
Method Name : selectionChanged-> Complexity: 2
Method Name : selectionChanged-> Complexity: 2
Method Name : treeExpanded-> Complexity: 1
Method Name : treeCollapsed-> Complexity: 1
Method Name : treeExpanded-> Complexity: 1
Method Name : treeCollapsed-> Complexity: 1
Method Name : handleEvent-> Complexity: 1
Method Name : handleEvent-> Complexity: 1
Method Name : handleEvent-> Complexity: 1
Method Name : handleEvent-> Complexity: 1
Method Name : createControl-> Complexity: 5
Method Name : updateRenamedVariables-> Complexity: 4
Method Name : handleInputChanged-> Complexity: 5
Method Name : methodDeclaredInTypeBinding-> Complexity: 4
Method Name : dispose-> Complexity: 1
	 WMC: 18
Total Complexity: 36


Class name: CloneRefactoringAction
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 11
Method Name : wrongSelectionMessage-> Complexity: 1
Method Name : selectionChanged-> Complexity: 1
Method Name : setActivePart-> Complexity: 1
	 WMC: 7
Total Complexity: 17


Class name: CodeSmellPackageExplorer
Method Name : run-> Complexity: 2
Method Name : keyPressed-> Complexity: 2
Method Name : keyReleased-> Complexity: 2
Method Name : zoom-> Complexity: 4
Method Name : mouseScrolled-> Complexity: 2
Method Name : createPartControl-> Complexity: 14
Method Name : selectionChanged-> Complexity: 2
Method Name : getMenu-> Complexity: 1
Method Name : dispose-> Complexity: 2
Method Name : getMenu-> Complexity: 1
Method Name : addActionToMenu-> Complexity: 1
Method Name : newZoomAction-> Complexity: 2
Method Name : setFocus-> Complexity: 1
Method Name : mouseHover-> Complexity: 1
Method Name : widgetDisposed-> Complexity: 1
Method Name : hookTooltips-> Complexity: 4
	 WMC: 16
Total Complexity: 42


Class name: CodeSmellVisualization
Method Name : keyPressed-> Complexity: 2
Method Name : keyReleased-> Complexity: 2
Method Name : zoom-> Complexity: 4
Method Name : mouseScrolled-> Complexity: 2
Method Name : createPartControl-> Complexity: 10
Method Name : selectionChanged-> Complexity: 2
Method Name : getMenu-> Complexity: 1
Method Name : dispose-> Complexity: 2
Method Name : getMenu-> Complexity: 1
Method Name : addActionToMenu-> Complexity: 1
Method Name : setFocus-> Complexity: 1
Method Name : newZoomAction-> Complexity: 2
	 WMC: 12
Total Complexity: 30


Class name: CodeSmellVisualizationDataSingleton
Method Name : getCandidates-> Complexity: 1
Method Name : setCandidates-> Complexity: 1
Method Name : getData-> Complexity: 1
Method Name : setData-> Complexity: 1
	 WMC: 4
Total Complexity: 4


Class name: DuplicatedCode
Method Name : inputChanged-> Complexity: 1
Method Name : dispose-> Complexity: 1
Method Name : getElements-> Complexity: 10
Method Name : getChildren-> Complexity: 2
Method Name : getParent-> Complexity: 4
Method Name : hasChildren-> Complexity: 1
Method Name : update-> Complexity: 16
Method Name : selectionChanged-> Complexity: 10
Method Name : run-> Complexity: 1
Method Name : elementChanged-> Complexity: 1
Method Name : processDelta-> Complexity: 15
Method Name : selectionChanged-> Complexity: 2
Method Name : handleEvent-> Complexity: 7
Method Name : handleEvent-> Complexity: 6
Method Name : historyNotification-> Complexity: 2
Method Name : createPartControl-> Complexity: 14
Method Name : widgetSelected-> Complexity: 1
Method Name : createDetectionSettingsPanel-> Complexity: 2
Method Name : createLegend-> Complexity: 1
Method Name : widgetSelected-> Complexity: 1
Method Name : widgetDefaultSelected-> Complexity: 1
Method Name : widgetSelected-> Complexity: 1
Method Name : widgetDefaultSelected-> Complexity: 1
Method Name : getRightClickMenu-> Complexity: 1
Method Name : contributeToActionBars-> Complexity: 1
Method Name : fillLocalToolBar-> Complexity: 1
Method Name : run-> Complexity: 2
Method Name : run-> Complexity: 5
Method Name : makeActions-> Complexity: 6
Method Name : doubleClick-> Complexity: 1
Method Name : hookDoubleClickAction-> Complexity: 1
Method Name : setFocus-> Complexity: 1
Method Name : dispose-> Complexity: 1
Method Name : getICompilationUnit-> Complexity: 5
Method Name : wrongSelectionMessage-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : applyRefactoring-> Complexity: 8
Method Name : getSelectedCloneInstances-> Complexity: 5
Method Name : prepareInput-> Complexity: 1
Method Name : getImage-> Complexity: 1
Method Name : getName-> Complexity: 1
Method Name : getType-> Complexity: 1
Method Name : createStream-> Complexity: 1
Method Name : showCompareDialog-> Complexity: 2
	 WMC: 46
Total Complexity: 150


Class name: ElementChangedListener
Method Name : getInstance-> Complexity: 2
Method Name : elementChanged-> Complexity: 1
Method Name : processDelta-> Complexity: 11
	 WMC: 3
Total Complexity: 14


Class name: EvolutionDialog
Method Name : selectionChanged-> Complexity: 2
Method Name : createDialogArea-> Complexity: 6
Method Name : inputChanged-> Complexity: 1
Method Name : dispose-> Complexity: 1
Method Name : getElements-> Complexity: 2
Method Name : getColumnText-> Complexity: 5
Method Name : getColumnImage-> Complexity: 1
Method Name : getImage-> Complexity: 1
	 WMC: 8
Total Complexity: 19


Class name: EvolutionRow
Method Name : getProjectVersionPair-> Complexity: 1
Method Name : getPercentage-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: ExtractClassInputPage
Method Name : modifyText-> Complexity: 1
Method Name : widgetSelected-> Complexity: 2
Method Name : widgetSelected-> Complexity: 2
Method Name : createControl-> Complexity: 4
Method Name : handleInputChanged-> Complexity: 5
	 WMC: 5
Total Complexity: 14


Class name: ExtractMethodInputPage
Method Name : modifyText-> Complexity: 1
Method Name : widgetSelected-> Complexity: 2
Method Name : createControl-> Complexity: 3
Method Name : handleInputChanged-> Complexity: 4
Method Name : methodDeclaredInTypeBinding-> Complexity: 4
	 WMC: 5
Total Complexity: 14


Class name: FeatureEnvy
Method Name : inputChanged-> Complexity: 1
Method Name : dispose-> Complexity: 1
Method Name : getElements-> Complexity: 2
Method Name : getColumnText-> Complexity: 9
Method Name : getColumnImage-> Complexity: 6
Method Name : getImage-> Complexity: 1
Method Name : compare-> Complexity: 1
Method Name : selectionChanged-> Complexity: 8
Method Name : selectionChanged-> Complexity: 3
Method Name : canModify-> Complexity: 1
Method Name : getValue-> Complexity: 3
Method Name : modify-> Complexity: 6
Method Name : historyNotification-> Complexity: 3
Method Name : createPartControl-> Complexity: 12
Method Name : widgetSelected-> Complexity: 2
Method Name : widgetDefaultSelected-> Complexity: 1
Method Name : getRightClickMenu-> Complexity: 2
Method Name : contributeToActionBars-> Complexity: 1
Method Name : fillLocalToolBar-> Complexity: 1
Method Name : run-> Complexity: 3
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 2
Method Name : run-> Complexity: 7
Method Name : run-> Complexity: 5
Method Name : makeActions-> Complexity: 14
Method Name : doubleClick-> Complexity: 1
Method Name : hookDoubleClickAction-> Complexity: 1
Method Name : setFocus-> Complexity: 1
Method Name : dispose-> Complexity: 1
Method Name : getPrerequisiteRefactorings-> Complexity: 6
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : getTable-> Complexity: 10
Method Name : widgetSelected-> Complexity: 1
Method Name : createToolTipContentArea-> Complexity: 3
Method Name : shouldCreateToolTip-> Complexity: 3
Method Name : saveResults-> Complexity: 7
Method Name : setSelectedLine-> Complexity: 3
Method Name : openPackageExplorerViewPart-> Complexity: 2
	 WMC: 40
Total Complexity: 138


Class name: GodClass
Method Name : inputChanged-> Complexity: 1
Method Name : dispose-> Complexity: 1
Method Name : getElements-> Complexity: 2
Method Name : getChildren-> Complexity: 3
Method Name : getParent-> Complexity: 3
Method Name : hasChildren-> Complexity: 1
Method Name : getColumnText-> Complexity: 15
Method Name : getColumnImage-> Complexity: 6
Method Name : getImage-> Complexity: 1
Method Name : compare-> Complexity: 3
Method Name : selectionChanged-> Complexity: 8
Method Name : selectionChanged-> Complexity: 3
Method Name : canModify-> Complexity: 1
Method Name : getValue-> Complexity: 3
Method Name : modify-> Complexity: 8
Method Name : historyNotification-> Complexity: 3
Method Name : createPartControl-> Complexity: 15
Method Name : widgetSelected-> Complexity: 2
Method Name : widgetDefaultSelected-> Complexity: 1
Method Name : getRightClickMenu-> Complexity: 2
Method Name : contributeToActionBars-> Complexity: 1
Method Name : fillLocalToolBar-> Complexity: 1
Method Name : run-> Complexity: 3
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 2
Method Name : run-> Complexity: 10
Method Name : run-> Complexity: 8
Method Name : makeActions-> Complexity: 20
Method Name : doubleClick-> Complexity: 1
Method Name : hookDoubleClickAction-> Complexity: 1
Method Name : setFocus-> Complexity: 1
Method Name : dispose-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : getTable-> Complexity: 13
Method Name : getParentCandidateGroup-> Complexity: 4
Method Name : getParentConcept-> Complexity: 4
Method Name : saveResults-> Complexity: 4
Method Name : openPackageExplorerViewPart-> Complexity: 3
Method Name : setSelectedLine-> Complexity: 3
Method Name : setSelectedLineWithinCandidateGroup-> Complexity: 5
	 WMC: 42
Total Complexity: 171


Class name: ImportClonesWizard
Method Name : getCloneGroupList-> Complexity: 1
Method Name : addPages-> Complexity: 1
Method Name : notify-> Complexity: 2
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 2
Method Name : performFinish-> Complexity: 9
	 WMC: 6
Total Complexity: 16


Class name: ImportClonesWizardPage
Method Name : widgetSelected-> Complexity: 4
Method Name : createControl-> Complexity: 5
Method Name : widgetSelected-> Complexity: 4
Method Name : initializeBasicFileInput-> Complexity: 9
Method Name : widgetSelected-> Complexity: 3
Method Name : initializeSecondaryFileInput-> Complexity: 4
Method Name : getSelectedCloneDetectorType-> Complexity: 1
Method Name : getBasicInputFile-> Complexity: 1
Method Name : getSecondaryInputFile-> Complexity: 1
	 WMC: 9
Total Complexity: 32


Class name: LabelControlContribution
Method Name : createControl-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: LongMethod
Method Name : inputChanged-> Complexity: 1
Method Name : dispose-> Complexity: 1
Method Name : getElements-> Complexity: 2
Method Name : getChildren-> Complexity: 2
Method Name : getParent-> Complexity: 4
Method Name : hasChildren-> Complexity: 1
Method Name : getColumnText-> Complexity: 11
Method Name : getColumnImage-> Complexity: 6
Method Name : getImage-> Complexity: 1
Method Name : compare-> Complexity: 2
Method Name : selectionChanged-> Complexity: 9
Method Name : canModify-> Complexity: 1
Method Name : getValue-> Complexity: 3
Method Name : modify-> Complexity: 6
Method Name : historyNotification-> Complexity: 3
Method Name : createPartControl-> Complexity: 10
Method Name : contributeToActionBars-> Complexity: 1
Method Name : fillLocalToolBar-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 6
Method Name : run-> Complexity: 6
Method Name : makeActions-> Complexity: 11
Method Name : doubleClick-> Complexity: 1
Method Name : hookDoubleClickAction-> Complexity: 1
Method Name : setFocus-> Complexity: 1
Method Name : dispose-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 10
Method Name : getTable-> Complexity: 20
Method Name : processMethod-> Complexity: 13
Method Name : saveResults-> Complexity: 4
	 WMC: 33
Total Complexity: 143


Class name: MethodEvolutionAction
Method Name : run-> Complexity: 2
Method Name : run-> Complexity: 5
Method Name : selectionChanged-> Complexity: 1
Method Name : setActivePart-> Complexity: 1
	 WMC: 4
Total Complexity: 9


Class name: MethodNameValidator
Method Name : isValid-> Complexity: 2
	 WMC: 1
Total Complexity: 2


Class name: MoveMethodInputPage
Method Name : modifyText-> Complexity: 1
Method Name : widgetSelected-> Complexity: 2
Method Name : widgetSelected-> Complexity: 2
Method Name : createControl-> Complexity: 4
Method Name : handleInputChanged-> Complexity: 3
	 WMC: 5
Total Complexity: 12


Class name: MultilineButton
Method Name : checkSubclass-> Complexity: 1
Method Name : computeSize-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: MyComboBoxCellEditor
Method Name : widgetSelected-> Complexity: 1
Method Name : createControl-> Complexity: 1
	 WMC: 2
Total Complexity: 2


Class name: MyRefactoringWizard
Method Name : addUserInputPages-> Complexity: 6
Method Name : performFinish-> Complexity: 7
	 WMC: 2
Total Complexity: 13


Class name: ReplaceTypeCodeWithStateStrategyInputPage
Method Name : modifyText-> Complexity: 1
Method Name : widgetSelected-> Complexity: 2
Method Name : createControl-> Complexity: 5
Method Name : handleInputChanged-> Complexity: 5
	 WMC: 4
Total Complexity: 13


Class name: SliceAnnotation
	 WMC: 0
Total Complexity: 0


Class name: SliceProfileAction
Method Name : setActivePart-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 3
Method Name : run-> Complexity: 10
Method Name : selectionChanged-> Complexity: 1
	 WMC: 6
Total Complexity: 17


Class name: SliceProfileDialog
Method Name : createDialogArea-> Complexity: 10
Method Name : inputChanged-> Complexity: 1
Method Name : dispose-> Complexity: 1
Method Name : getElements-> Complexity: 2
Method Name : update-> Complexity: 2
Method Name : getColumnText-> Complexity: 4
Method Name : getColumnImage-> Complexity: 1
Method Name : getImage-> Complexity: 1
Method Name : inputChanged-> Complexity: 1
Method Name : dispose-> Complexity: 1
Method Name : getElements-> Complexity: 1
Method Name : widgetSelected-> Complexity: 5
Method Name : checkStateChanged-> Complexity: 2
Method Name : computeSliceProfileIntersectionStatements-> Complexity: 3
Method Name : tightness-> Complexity: 1
Method Name : coverage-> Complexity: 3
Method Name : overlap-> Complexity: 3
Method Name : getColumnIndex-> Complexity: 3
Method Name : updateMetrics-> Complexity: 3
	 WMC: 19
Total Complexity: 48


Class name: SliceProfileRow
Method Name : getStatementID-> Complexity: 1
Method Name : put-> Complexity: 1
Method Name : getValue-> Complexity: 1
Method Name : statementBelongsToAllSlices-> Complexity: 4
	 WMC: 4
Total Complexity: 7


Class name: StringCompareEditorInput
Method Name : prepareInput-> Complexity: 1
Method Name : getName-> Complexity: 1
Method Name : getImage-> Complexity: 1
Method Name : getType-> Complexity: 1
Method Name : getContents-> Complexity: 1
	 WMC: 5
Total Complexity: 5


Class name: StyledStringStyler
Method Name : appendTextStyle-> Complexity: 14
Method Name : applyStyles-> Complexity: 2
	 WMC: 2
Total Complexity: 16


Class name: StyledStringVisitor
Method Name : generateDifferenceASTNodes-> Complexity: 10
Method Name : getStyledString-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 4
Method Name : visit-> Complexity: 3
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 4
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 5
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 3
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 3
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 4
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 2
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 4
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 3
Method Name : visit-> Complexity: 4
Method Name : visit-> Complexity: 3
Method Name : visit-> Complexity: 4
Method Name : visit-> Complexity: 1
Method Name : visit-> Complexity: 3
Method Name : handleExpression-> Complexity: 27
Method Name : handleType-> Complexity: 7
Method Name : handleModifier-> Complexity: 5
Method Name : handleTypeArguments-> Complexity: 4
Method Name : handleParameters-> Complexity: 3
Method Name : isDifference-> Complexity: 1
Method Name : isNamedConstant-> Complexity: 4
Method Name : isNonStaticField-> Complexity: 4
Method Name : isStaticMethodCall-> Complexity: 4
Method Name : determineDiffStyle-> Complexity: 2
Method Name : activateDiffStyle-> Complexity: 2
Method Name : deactivateDiffStyle-> Complexity: 2
Method Name : appendOpenParenthesis-> Complexity: 2
Method Name : appendClosedParenthesis-> Complexity: 2
Method Name : appendOpenBracket-> Complexity: 2
Method Name : appendClosedBracket-> Complexity: 2
Method Name : appendOpenBrace-> Complexity: 2
Method Name : appendClosedBrace-> Complexity: 2
Method Name : appendOpenCurlyBracket-> Complexity: 2
Method Name : appendClosedCurlyBracket-> Complexity: 2
Method Name : appendPeriod-> Complexity: 2
Method Name : appendColon-> Complexity: 2
Method Name : appendSemicolon-> Complexity: 2
Method Name : appendComma-> Complexity: 2
Method Name : appendEquals-> Complexity: 2
Method Name : appendSpace-> Complexity: 2
Method Name : appendQuestionMark-> Complexity: 2
Method Name : appendPipe-> Complexity: 2
Method Name : appendAtSign-> Complexity: 2
Method Name : initializeKeywordStyle-> Complexity: 1
Method Name : initializeNamedConstantStyle-> Complexity: 1
Method Name : initializeNonStaticFieldStyle-> Complexity: 1
Method Name : initializeStringStyle-> Complexity: 1
Method Name : initializeStaticMethodCallStyle-> Complexity: 1
Method Name : initializeOrdinaryStyle-> Complexity: 1
Method Name : initializeDifferenceStyle-> Complexity: 1
Method Name : initializeFont-> Complexity: 1
Method Name : initializeBoldFont-> Complexity: 1
Method Name : initializeItalicFont-> Complexity: 1
	 WMC: 102
Total Complexity: 228


Class name: TypeChecking
Method Name : inputChanged-> Complexity: 1
Method Name : dispose-> Complexity: 1
Method Name : getElements-> Complexity: 2
Method Name : getChildren-> Complexity: 2
Method Name : getParent-> Complexity: 4
Method Name : hasChildren-> Complexity: 1
Method Name : getColumnText-> Complexity: 16
Method Name : getColumnImage-> Complexity: 6
Method Name : getImage-> Complexity: 1
Method Name : compare-> Complexity: 2
Method Name : selectionChanged-> Complexity: 8
Method Name : canModify-> Complexity: 1
Method Name : getValue-> Complexity: 3
Method Name : modify-> Complexity: 7
Method Name : historyNotification-> Complexity: 3
Method Name : createPartControl-> Complexity: 11
Method Name : contributeToActionBars-> Complexity: 1
Method Name : fillLocalToolBar-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 8
Method Name : run-> Complexity: 3
Method Name : run-> Complexity: 4
Method Name : makeActions-> Complexity: 13
Method Name : doubleClick-> Complexity: 1
Method Name : hookDoubleClickAction-> Complexity: 1
Method Name : setFocus-> Complexity: 1
Method Name : dispose-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : run-> Complexity: 1
Method Name : getTable-> Complexity: 10
Method Name : saveResults-> Complexity: 4
	 WMC: 33
Total Complexity: 122


Class name: ZoomValueValidator
Method Name : isValid-> Complexity: 2
	 WMC: 1
Total Complexity: 2



------------------------------------------------------------






Lack of Cohesion of Methods(LCOM):

~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
~~~ PAAY NAI WTF
CCFinderOutputParser [containerPackage: parsers],  Metrics: [LCOM:13, CBO:2, RFC:20]

CloneDetectorOutputParseException [containerPackage: parsers],  Metrics: [LCOM:0, CBO:0, RFC:0]

CloneDetectorOutputParser [containerPackage: parsers],  Metrics: [LCOM:17, CBO:4, RFC:28]

CloneDetectorOutputParserFactory [containerPackage: parsers],  Metrics: [LCOM:1, CBO:0, RFC:1]

CloneDetectorOutputParserProgressObserver [containerPackage: parsers],  Metrics: [LCOM:1, CBO:1, RFC:1]

CloneDetectorType [containerPackage: parsers],  Metrics: [LCOM:1, CBO:0, RFC:1]

CloneDROutputParser [containerPackage: parsers],  Metrics: [LCOM:3, CBO:2, RFC:8]

CloneGroup [containerPackage: parsers],  Metrics: [LCOM:15, CBO:8, RFC:21]

CloneGroupList [containerPackage: parsers],  Metrics: [LCOM:8, CBO:7, RFC:12]

CloneInstance [containerPackage: parsers],  Metrics: [LCOM:29, CBO:3, RFC:29]

CloneInstanceLocationInfo [containerPackage: parsers],  Metrics: [LCOM:20, CBO:0, RFC:20]

CloneInstanceStatus [containerPackage: parsers],  Metrics: [LCOM:0, CBO:0, RFC:0]

ClonesRelativeLocation [containerPackage: parsers],  Metrics: [LCOM:1, CBO:0, RFC:1]

ConQATOutputParser [containerPackage: parsers],  Metrics: [LCOM:1, CBO:3, RFC:7]

DeckardOutputParser [containerPackage: parsers],  Metrics: [LCOM:1, CBO:2, RFC:5]

InvalidInputFileException [containerPackage: parsers],  Metrics: [LCOM:0, CBO:0, RFC:0]

JavaModelUtility [containerPackage: parsers],  Metrics: [LCOM:3, CBO:0, RFC:3]

NiCadOutputParser [containerPackage: parsers],  Metrics: [LCOM:1, CBO:3, RFC:6]

ResourceInfo [containerPackage: parsers],  Metrics: [LCOM:8, CBO:1, RFC:8]

TextDiff [containerPackage: parsers],  Metrics: [LCOM:19, CBO:1, RFC:47]

AbstractMethodDeclaration [containerPackage: ast],  Metrics: [LCOM:57, CBO:7, RFC:57]

AbstractMethodInvocationObject [containerPackage: ast],  Metrics: [LCOM:17, CBO:1, RFC:18]

Access [containerPackage: ast],  Metrics: [LCOM:1, CBO:0, RFC:1]

AnonymousClassDeclarationObject [containerPackage: ast],  Metrics: [LCOM:9, CBO:4, RFC:10]

ArrayAccessObject [containerPackage: ast],  Metrics: [LCOM:3, CBO:0, RFC:3]

ArrayCreationObject [containerPackage: ast],  Metrics: [LCOM:2, CBO:1, RFC:2]

Association [containerPackage: association],  Metrics: [LCOM:7, CBO:4, RFC:7]

AssociationDetection [containerPackage: association],  Metrics: [LCOM:4, CBO:4, RFC:17]

ASTInformation [containerPackage: ast],  Metrics: [LCOM:6, CBO:0, RFC:6]

ASTInformationGenerator [containerPackage: ast],  Metrics: [LCOM:2, CBO:0, RFC:2]

ASTReader [containerPackage: ast],  Metrics: [LCOM:8, CBO:10, RFC:59]

ClassDeclarationObject [containerPackage: ast],  Metrics: [LCOM:26, CBO:8, RFC:38]

ClassInstanceCreationObject [containerPackage: ast],  Metrics: [LCOM:9, CBO:2, RFC:9]

ClassObject [containerPackage: ast],  Metrics: [LCOM:30, CBO:31, RFC:50]

CommentObject [containerPackage: ast],  Metrics: [LCOM:12, CBO:2, RFC:12]

CommentType [containerPackage: ast],  Metrics: [LCOM:0, CBO:0, RFC:0]

CompilationErrorDetectedException [containerPackage: ast],  Metrics: [LCOM:1, CBO:0, RFC:1]

CompilationUnitCache [containerPackage: ast],  Metrics: [LCOM:22, CBO:3, RFC:22]

ConstructorInvocationObject [containerPackage: ast],  Metrics: [LCOM:2, CBO:2, RFC:2]

ConstructorObject [containerPackage: ast],  Metrics: [LCOM:70, CBO:6, RFC:74]

CreationObject [containerPackage: ast],  Metrics: [LCOM:1, CBO:1, RFC:1]

AbstractExpression [containerPackage: decomposition],  Metrics: [LCOM:5, CBO:6, RFC:8]

AbstractMethodFragment [containerPackage: decomposition],  Metrics: [LCOM:58, CBO:18, RFC:120]

AbstractStatement [containerPackage: decomposition],  Metrics: [LCOM:4, CBO:7, RFC:4]

CatchClauseObject [containerPackage: decomposition],  Metrics: [LCOM:13, CBO:3, RFC:13]

AbstractVariable [containerPackage: cfg],  Metrics: [LCOM:9, CBO:8, RFC:9]

BasicBlock [containerPackage: cfg],  Metrics: [LCOM:14, CBO:6, RFC:14]

BasicBlockCFG [containerPackage: cfg],  Metrics: [LCOM:2, CBO:2, RFC:4]

CFG [containerPackage: cfg],  Metrics: [LCOM:5, CBO:8, RFC:37]

CFGBlockNode [containerPackage: cfg],  Metrics: [LCOM:2, CBO:1, RFC:2]

CFGBranchConditionalNode [containerPackage: cfg],  Metrics: [LCOM:3, CBO:4, RFC:7]

CFGBranchDoLoopNode [containerPackage: cfg],  Metrics: [LCOM:2, CBO:2, RFC:4]

CFGBranchIfNode [containerPackage: cfg],  Metrics: [LCOM:2, CBO:5, RFC:5]

CFGBranchLoopNode [containerPackage: cfg],  Metrics: [LCOM:2, CBO:3, RFC:6]

CFGBranchNode [containerPackage: cfg],  Metrics: [LCOM:6, CBO:4, RFC:15]

CFGBranchSwitchNode [containerPackage: cfg],  Metrics: [LCOM:0, CBO:2, RFC:0]

CFGBreakNode [containerPackage: cfg],  Metrics: [LCOM:4, CBO:5, RFC:4]

CFGContinueNode [containerPackage: cfg],  Metrics: [LCOM:4, CBO:5, RFC:4]

CFGExitNode [containerPackage: cfg],  Metrics: [LCOM:1, CBO:0, RFC:1]

CFGNode [containerPackage: cfg],  Metrics: [LCOM:12, CBO:11, RFC:16]

CFGSwitchCaseNode [containerPackage: cfg],  Metrics: [LCOM:1, CBO:1, RFC:1]

CFGSynchronizedNode [containerPackage: cfg],  Metrics: [LCOM:0, CBO:0, RFC:0]

CFGThrowNode [containerPackage: cfg],  Metrics: [LCOM:0, CBO:0, RFC:0]

CFGTryNode [containerPackage: cfg],  Metrics: [LCOM:4, CBO:1, RFC:4]

CompositeVariable [containerPackage: cfg],  Metrics: [LCOM:10, CBO:8, RFC:10]

Flow [containerPackage: cfg],  Metrics: [LCOM:7, CBO:5, RFC:7]

Graph [containerPackage: cfg],  Metrics: [LCOM:4, CBO:0, RFC:4]

GraphEdge [containerPackage: cfg],  Metrics: [LCOM:2, CBO:0, RFC:2]

GraphNode [containerPackage: cfg],  Metrics: [LCOM:4, CBO:2, RFC:4]

BottomUpCDTMapper [containerPackage: mapping],  Metrics: [LCOM:2, CBO:5, RFC:22]

CloneInstanceMapper [containerPackage: mapping],  Metrics: [LCOM:14, CBO:5, RFC:42]

CloneRefactoringType [containerPackage: mapping],  Metrics: [LCOM:0, CBO:0, RFC:0]

CloneStructureNode [containerPackage: mapping],  Metrics: [LCOM:24, CBO:10, RFC:41]

CloneType [containerPackage: mapping],  Metrics: [LCOM:1, CBO:0, RFC:1]

CodeFragmentDecomposer [containerPackage: mapping],  Metrics: [LCOM:5, CBO:3, RFC:10]

CompleteSubTreeMatch [containerPackage: mapping],  Metrics: [LCOM:9, CBO:2, RFC:9]

ControlDependenceTreeGenerator [containerPackage: mapping],  Metrics: [LCOM:2, CBO:4, RFC:18]

ControlDependenceTreeNode [containerPackage: mapping],  Metrics: [LCOM:40, CBO:8, RFC:46]

ControlDependenceTreeNodeMatchPair [containerPackage: mapping],  Metrics: [LCOM:15, CBO:4, RFC:18]

ControlDependenceTreeNodeMatchPairComparator [containerPackage: mapping],  Metrics: [LCOM:1, CBO:0, RFC:1]

DivideAndConquerMatcher [containerPackage: mapping],  Metrics: [LCOM:62, CBO:17, RFC:138]

ExtractStatementsVisitor [containerPackage: mapping],  Metrics: [LCOM:26, CBO:0, RFC:27]

IdBasedGap [containerPackage: mapping],  Metrics: [LCOM:4, CBO:1, RFC:4]

IdBasedMapping [containerPackage: mapping],  Metrics: [LCOM:3, CBO:1, RFC:3]

IdenticalStatementDecomposer [containerPackage: mapping],  Metrics: [LCOM:1, CBO:1, RFC:1]

MappingState [containerPackage: mapping],  Metrics: [LCOM:27, CBO:9, RFC:72]

NodeMapping [containerPackage: mapping],  Metrics: [LCOM:10, CBO:11, RFC:23]

PDGEdgeMapping [containerPackage: mapping],  Metrics: [LCOM:6, CBO:3, RFC:10]

PDGElseGap [containerPackage: mapping],  Metrics: [LCOM:6, CBO:1, RFC:6]

PDGElseMapping [containerPackage: mapping],  Metrics: [LCOM:9, CBO:2, RFC:9]

PDGMapper [containerPackage: mapping],  Metrics: [LCOM:5, CBO:1, RFC:13]

PDGNodeGap [containerPackage: mapping],  Metrics: [LCOM:7, CBO:5, RFC:9]

PDGNodeMapping [containerPackage: mapping],  Metrics: [LCOM:23, CBO:12, RFC:31]

PDGRegionSubTreeMapper [containerPackage: mapping],  Metrics: [LCOM:6, CBO:2, RFC:12]

PDGSubTreeMapper [containerPackage: mapping],  Metrics: [LCOM:6, CBO:2, RFC:11]

BoldStyler [containerPackage: precondition],  Metrics: [LCOM:1, CBO:0, RFC:1]

DualExpressionPreconditionViolation [containerPackage: precondition],  Metrics: [LCOM:3, CBO:1, RFC:4]

DualExpressionWithCommonSuperTypePreconditionViolation [containerPackage: precondition],  Metrics: [LCOM:2, CBO:0, RFC:2]

ExpressionPreconditionViolation [containerPackage: precondition],  Metrics: [LCOM:2, CBO:1, RFC:3]

NormalStyler [containerPackage: precondition],  Metrics: [LCOM:1, CBO:0, RFC:1]

NotAllPossibleExecutionFlowsEndInReturnPreconditionViolation [containerPackage: precondition],  Metrics: [LCOM:2, CBO:0, RFC:2]

PreconditionViolation [containerPackage: precondition],  Metrics: [LCOM:6, CBO:3, RFC:6]

PreconditionViolationType [containerPackage: precondition],  Metrics: [LCOM:1, CBO:0, RFC:1]

ReturnedVariablePreconditionViolation [containerPackage: precondition],  Metrics: [LCOM:2, CBO:0, RFC:2]

StatementPreconditionViolation [containerPackage: precondition],  Metrics: [LCOM:3, CBO:1, RFC:3]

Suggestion [containerPackage: precondition],  Metrics: [LCOM:3, CBO:1, RFC:3]

UncommonSuperclassPreconditionViolation [containerPackage: precondition],  Metrics: [LCOM:2, CBO:0, RFC:2]

ZeroMatchedStatementsPreconditionViolation [containerPackage: precondition],  Metrics: [LCOM:2, CBO:0, RFC:2]

PreconditionExaminer [containerPackage: mapping],  Metrics: [LCOM:69, CBO:42, RFC:230]

StatementCollector [containerPackage: mapping],  Metrics: [LCOM:26, CBO:1, RFC:26]

SubTreeMatchComparator [containerPackage: mapping],  Metrics: [LCOM:1, CBO:0, RFC:1]

SwitchBodyDecomposer [containerPackage: mapping],  Metrics: [LCOM:1, CBO:1, RFC:1]

TopDownCDTMapper [containerPackage: mapping],  Metrics: [LCOM:2, CBO:5, RFC:13]

VariableBindingKeyPair [containerPackage: mapping],  Metrics: [LCOM:5, CBO:2, RFC:5]

VariableBindingPair [containerPackage: mapping],  Metrics: [LCOM:7, CBO:2, RFC:7]

MethodCallAnalyzer [containerPackage: cfg],  Metrics: [LCOM:2, CBO:14, RFC:51]

PDG [containerPackage: cfg],  Metrics: [LCOM:35, CBO:16, RFC:76]

PDGAbstractDataDependence [containerPackage: cfg],  Metrics: [LCOM:6, CBO:1, RFC:6]

PDGAntiDependence [containerPackage: cfg],  Metrics: [LCOM:0, CBO:0, RFC:0]

PDGBlockNode [containerPackage: cfg],  Metrics: [LCOM:2, CBO:5, RFC:5]

PDGControlDependence [containerPackage: cfg],  Metrics: [LCOM:6, CBO:12, RFC:6]

PDGControlPredicateNode [containerPackage: cfg],  Metrics: [LCOM:1, CBO:3, RFC:4]

PDGDataDependence [containerPackage: cfg],  Metrics: [LCOM:0, CBO:5, RFC:0]

PDGDependence [containerPackage: cfg],  Metrics: [LCOM:3, CBO:4, RFC:3]

PDGDependenceType [containerPackage: cfg],  Metrics: [LCOM:0, CBO:0, RFC:0]

PDGExitNode [containerPackage: cfg],  Metrics: [LCOM:1, CBO:3, RFC:1]

PDGExpression [containerPackage: cfg],  Metrics: [LCOM:7, CBO:3, RFC:12]

PDGMethodEntryNode [containerPackage: cfg],  Metrics: [LCOM:5, CBO:0, RFC:5]

PDGNode [containerPackage: cfg],  Metrics: [LCOM:39, CBO:20, RFC:48]

PDGObjectSliceUnion [containerPackage: cfg],  Metrics: [LCOM:32, CBO:7, RFC:47]

PDGObjectSliceUnionCollection [containerPackage: cfg],  Metrics: [LCOM:1, CBO:2, RFC:1]

PDGOutputDependence [containerPackage: cfg],  Metrics: [LCOM:0, CBO:1, RFC:0]

PDGSlice [containerPackage: cfg],  Metrics: [LCOM:22, CBO:6, RFC:47]

PDGSliceUnion [containerPackage: cfg],  Metrics: [LCOM:33, CBO:7, RFC:48]

PDGSliceUnionCollection [containerPackage: cfg],  Metrics: [LCOM:1, CBO:2, RFC:1]

PDGStatementNode [containerPackage: cfg],  Metrics: [LCOM:1, CBO:2, RFC:3]

PDGSynchronizedNode [containerPackage: cfg],  Metrics: [LCOM:0, CBO:0, RFC:0]

PDGTryNode [containerPackage: cfg],  Metrics: [LCOM:3, CBO:5, RFC:7]

PlainVariable [containerPackage: cfg],  Metrics: [LCOM:6, CBO:11, RFC:6]

ReachingAliasSet [containerPackage: cfg],  Metrics: [LCOM:8, CBO:0, RFC:8]

CompositeStatementObject [containerPackage: decomposition],  Metrics: [LCOM:30, CBO:12, RFC:30]

ExpressionType [containerPackage: decomposition],  Metrics: [LCOM:0, CBO:0, RFC:0]

ASTNodeDifference [containerPackage: matching],  Metrics: [LCOM:15, CBO:13, RFC:23]

ASTNodeMatcher [containerPackage: matching],  Metrics: [LCOM:54, CBO:19, RFC:112]

BindingSignature [containerPackage: matching],  Metrics: [LCOM:9, CBO:1, RFC:9]

BindingSignaturePair [containerPackage: matching],  Metrics: [LCOM:8, CBO:2, RFC:8]

BindingSignatureVisitor [containerPackage: matching],  Metrics: [LCOM:9, CBO:0, RFC:38]

AbstractControlCase [containerPackage: conditional],  Metrics: [LCOM:7, CBO:1, RFC:7]

AbstractControlStructure [containerPackage: conditional],  Metrics: [LCOM:7, CBO:0, RFC:7]

AbstractControlStructureUtilities [containerPackage: conditional],  Metrics: [LCOM:4, CBO:1, RFC:8]

IfControlCase [containerPackage: conditional],  Metrics: [LCOM:2, CBO:0, RFC:2]

IfControlStructure [containerPackage: conditional],  Metrics: [LCOM:5, CBO:0, RFC:5]

Pair [containerPackage: conditional],  Metrics: [LCOM:7, CBO:0, RFC:7]

SwitchControlCase [containerPackage: conditional],  Metrics: [LCOM:2, CBO:0, RFC:5]

SwitchControlStructure [containerPackage: conditional],  Metrics: [LCOM:5, CBO:2, RFC:7]

TernaryControlStructure [containerPackage: conditional],  Metrics: [LCOM:9, CBO:0, RFC:9]

Difference [containerPackage: matching],  Metrics: [LCOM:8, CBO:6, RFC:8]

DifferenceType [containerPackage: matching],  Metrics: [LCOM:1, CBO:0, RFC:1]

FieldAccessReplacedWithGetterInvocationDifference [containerPackage: matching],  Metrics: [LCOM:7, CBO:2, RFC:7]

FieldAssignmentReplacedWithSetterInvocationDifference [containerPackage: matching],  Metrics: [LCOM:17, CBO:2, RFC:17]

AbstractControlVariable [containerPackage: loop],  Metrics: [LCOM:3, CBO:3, RFC:5]

AbstractLoop [containerPackage: loop],  Metrics: [LCOM:6, CBO:0, RFC:6]

AbstractLoopBindingInformation [containerPackage: loop],  Metrics: [LCOM:9, CBO:2, RFC:9]

AbstractLoopUtilities [containerPackage: loop],  Metrics: [LCOM:12, CBO:3, RFC:33]

ConditionalLoop [containerPackage: loop],  Metrics: [LCOM:6, CBO:5, RFC:13]

ConditionalLoopASTNodeMatcher [containerPackage: loop],  Metrics: [LCOM:3, CBO:2, RFC:5]

ControlVariable [containerPackage: loop],  Metrics: [LCOM:6, CBO:5, RFC:22]

EarliestStartPositionComparator [containerPackage: loop],  Metrics: [LCOM:1, CBO:0, RFC:1]

EnhancedForLoop [containerPackage: loop],  Metrics: [LCOM:5, CBO:3, RFC:7]

VariableUpdater [containerPackage: loop],  Metrics: [LCOM:3, CBO:2, RFC:3]

VariableValue [containerPackage: loop],  Metrics: [LCOM:5, CBO:1, RFC:5]

NodePair [containerPackage: matching],  Metrics: [LCOM:2, CBO:0, RFC:2]

NodePairComparisonCache [containerPackage: matching],  Metrics: [LCOM:12, CBO:1, RFC:12]

MethodBodyObject [containerPackage: decomposition],  Metrics: [LCOM:49, CBO:12, RFC:67]

StatementObject [containerPackage: decomposition],  Metrics: [LCOM:2, CBO:5, RFC:2]

StatementType [containerPackage: decomposition],  Metrics: [LCOM:3, CBO:0, RFC:3]

SynchronizedStatementObject [containerPackage: decomposition],  Metrics: [LCOM:0, CBO:1, RFC:0]

TryStatementObject [containerPackage: decomposition],  Metrics: [LCOM:13, CBO:9, RFC:15]

DelegationDetection [containerPackage: delegation],  Metrics: [LCOM:2, CBO:1, RFC:3]

DelegationPath [containerPackage: delegation],  Metrics: [LCOM:4, CBO:2, RFC:4]

DelegationTree [containerPackage: delegation],  Metrics: [LCOM:3, CBO:2, RFC:8]

EnumConstantDeclarationObject [containerPackage: ast],  Metrics: [LCOM:10, CBO:1, RFC:10]

FieldInstructionObject [containerPackage: ast],  Metrics: [LCOM:11, CBO:10, RFC:11]

FieldObject [containerPackage: ast],  Metrics: [LCOM:19, CBO:15, RFC:20]

IfStatementExpressionAnalyzer [containerPackage: ast],  Metrics: [LCOM:23, CBO:1, RFC:24]

Indexer [containerPackage: ast],  Metrics: [LCOM:22, CBO:1, RFC:25]

CompleteInheritanceDetection [containerPackage: inheritance],  Metrics: [LCOM:5, CBO:3, RFC:9]

InheritanceDetection [containerPackage: inheritance],  Metrics: [LCOM:2, CBO:3, RFC:9]

InheritanceTree [containerPackage: inheritance],  Metrics: [LCOM:7, CBO:7, RFC:8]

TypeBindingInheritanceDetection [containerPackage: inheritance],  Metrics: [LCOM:3, CBO:2, RFC:10]

LibraryClassStorage [containerPackage: ast],  Metrics: [LCOM:2, CBO:1, RFC:2]

LiteralObject [containerPackage: ast],  Metrics: [LCOM:7, CBO:1, RFC:7]

LiteralType [containerPackage: ast],  Metrics: [LCOM:0, CBO:0, RFC:0]

LocalVariableDeclarationObject [containerPackage: ast],  Metrics: [LCOM:8, CBO:2, RFC:8]

LocalVariableInstructionObject [containerPackage: ast],  Metrics: [LCOM:10, CBO:3, RFC:10]

MethodInvocationObject [containerPackage: ast],  Metrics: [LCOM:2, CBO:9, RFC:2]

MethodObject [containerPackage: ast],  Metrics: [LCOM:78, CBO:31, RFC:100]

ConnectivityMetric [containerPackage: metrics],  Metrics: [LCOM:2, CBO:3, RFC:12]

LCOM [containerPackage: metrics],  Metrics: [LCOM:3, CBO:3, RFC:13]

MMImportCoupling [containerPackage: metrics],  Metrics: [LCOM:3, CBO:4, RFC:10]

ParameterObject [containerPackage: ast],  Metrics: [LCOM:9, CBO:8, RFC:9]

Standalone [containerPackage: ast],  Metrics: [LCOM:4, CBO:10, RFC:24]

SuperFieldInstructionObject [containerPackage: ast],  Metrics: [LCOM:10, CBO:1, RFC:10]

SuperMethodInvocationObject [containerPackage: ast],  Metrics: [LCOM:2, CBO:2, RFC:2]

SystemObject [containerPackage: ast],  Metrics: [LCOM:29, CBO:21, RFC:76]

TypeCheckCodeFragmentAnalyzer [containerPackage: ast],  Metrics: [LCOM:1, CBO:3, RFC:30]

TypeObject [containerPackage: ast],  Metrics: [LCOM:11, CBO:11, RFC:11]

TypeSearchRequestor [containerPackage: ast],  Metrics: [LCOM:1, CBO:0, RFC:1]

ExpressionExtractor [containerPackage: util],  Metrics: [LCOM:1, CBO:19, RFC:42]

ExpressionInstanceChecker [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfArrayAccess [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfArrayCreation [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfAssignment [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfBranchingStatement [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfBreakStatement [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfCastExpression [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfClassInstanceCreation [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfConditionalExpression [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfConstructorInvocation [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfContinueStatement [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfDoStatement [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfEnhancedForStatement [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfExpression [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfFieldAccess [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfForStatement [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfIfStatement [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfInfixExpression [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfInstanceofExpression [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfLiteral [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfMethodInvocation [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfPostfixExpression [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfPrefixExpression [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfReturnStatement [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfSimpleName [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfSuperFieldAccess [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfSuperMethodInvocation [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfSwitchStatement [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfThisExpression [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfTryStatement [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfTypeDeclarationStatement [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfTypeLiteral [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfVariableDeclarationExpression [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfVariableDeclarationStatement [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfVariableModifier [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

InstanceOfWhileStatement [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

AdjacencyList [containerPackage: math],  Metrics: [LCOM:6, CBO:1, RFC:7]

Cluster [containerPackage: math],  Metrics: [LCOM:6, CBO:3, RFC:7]

Clustering [containerPackage: math],  Metrics: [LCOM:2, CBO:1, RFC:2]

DoubleArray [containerPackage: math],  Metrics: [LCOM:7, CBO:0, RFC:9]

Edge [containerPackage: math],  Metrics: [LCOM:6, CBO:1, RFC:6]

Hierarchical [containerPackage: math],  Metrics: [LCOM:1, CBO:1, RFC:4]

HumaniseCamelCase [containerPackage: math],  Metrics: [LCOM:1, CBO:1, RFC:7]

LevenshteinDistance [containerPackage: math],  Metrics: [LCOM:2, CBO:0, RFC:2]

Node [containerPackage: math],  Metrics: [LCOM:5, CBO:2, RFC:5]

Stemmer [containerPackage: math],  Metrics: [LCOM:15, CBO:1, RFC:21]

TarjanAlgorithm [containerPackage: math],  Metrics: [LCOM:2, CBO:1, RFC:2]

MethodDeclarationUtility [containerPackage: util],  Metrics: [LCOM:5, CBO:0, RFC:6]

StatementExtractor [containerPackage: util],  Metrics: [LCOM:2, CBO:12, RFC:16]

StatementInstanceChecker [containerPackage: util],  Metrics: [LCOM:1, CBO:0, RFC:1]

SuperMethodInvocationVisitor [containerPackage: util],  Metrics: [LCOM:2, CBO:1, RFC:2]

ThrownExceptionVisitor [containerPackage: util],  Metrics: [LCOM:5, CBO:1, RFC:5]

TopicFinder [containerPackage: util],  Metrics: [LCOM:2, CBO:2, RFC:6]

TypeVisitor [containerPackage: util],  Metrics: [LCOM:4, CBO:4, RFC:4]

VariableDeclarationObject [containerPackage: ast],  Metrics: [LCOM:3, CBO:2, RFC:3]

ClassFigure [containerPackage: visualization],  Metrics: [LCOM:10, CBO:0, RFC:11]

ClassFigureMover [containerPackage: visualization],  Metrics: [LCOM:6, CBO:0, RFC:8]

CompartmentFigure [containerPackage: visualization],  Metrics: [LCOM:1, CBO:0, RFC:1]

CompartmentFigureBorder [containerPackage: visualization],  Metrics: [LCOM:2, CBO:0, RFC:2]

ConnectionType [containerPackage: visualization],  Metrics: [LCOM:0, CBO:0, RFC:0]

DecorationConstants [containerPackage: visualization],  Metrics: [LCOM:0, CBO:0, RFC:0]

EntityFigure [containerPackage: visualization],  Metrics: [LCOM:28, CBO:3, RFC:39]

EntityFigureListener [containerPackage: visualization],  Metrics: [LCOM:5, CBO:1, RFC:9]

FeatureEnviedMethodInformationControl [containerPackage: visualization],  Metrics: [LCOM:11, CBO:4, RFC:16]

FeatureEnviedMethodInformationControlCreator [containerPackage: visualization],  Metrics: [LCOM:2, CBO:0, RFC:2]

FeatureEnvyDiagram [containerPackage: visualization],  Metrics: [LCOM:1, CBO:1, RFC:1]

FeatureEnvyVisualizationData [containerPackage: visualization],  Metrics: [LCOM:15, CBO:4, RFC:22]

GodClassDiagram [containerPackage: visualization],  Metrics: [LCOM:1, CBO:0, RFC:1]

GodClassDiagram2 [containerPackage: visualization],  Metrics: [LCOM:1, CBO:1, RFC:1]

GodClassInformationControl [containerPackage: visualization],  Metrics: [LCOM:7, CBO:3, RFC:11]

GodClassInformationControlCreator [containerPackage: visualization],  Metrics: [LCOM:2, CBO:0, RFC:2]

GodClassVisualizationData [containerPackage: visualization],  Metrics: [LCOM:20, CBO:3, RFC:23]

ICustomInformationControlCreator [containerPackage: visualization],  Metrics: [LCOM:1, CBO:1, RFC:1]

IInformationProvider [containerPackage: visualization],  Metrics: [LCOM:2, CBO:0, RFC:2]

InformationControlManager [containerPackage: visualization],  Metrics: [LCOM:17, CBO:2, RFC:18]

JConnection [containerPackage: visualization],  Metrics: [LCOM:15, CBO:3, RFC:15]

LeftAnchor [containerPackage: visualization],  Metrics: [LCOM:1, CBO:0, RFC:1]

Legend [containerPackage: visualization],  Metrics: [LCOM:2, CBO:1, RFC:3]

MethodClassSection [containerPackage: visualization],  Metrics: [LCOM:2, CBO:0, RFC:2]

MyContentProposalProvider [containerPackage: visualization],  Metrics: [LCOM:1, CBO:0, RFC:1]

PackageFigure [containerPackage: visualization],  Metrics: [LCOM:9, CBO:1, RFC:11]

PackageMapDiagram [containerPackage: visualization],  Metrics: [LCOM:18, CBO:1, RFC:22]

PackageMapDiagramInformationProvider [containerPackage: visualization],  Metrics: [LCOM:2, CBO:1, RFC:3]

PackageMapFigure [containerPackage: visualization],  Metrics: [LCOM:2, CBO:1, RFC:2]

PMClassFigure [containerPackage: visualization],  Metrics: [LCOM:21, CBO:6, RFC:21]

ProportionalFlowLayout [containerPackage: visualization],  Metrics: [LCOM:1, CBO:0, RFC:1]

RightAnchor [containerPackage: visualization],  Metrics: [LCOM:1, CBO:0, RFC:1]

SearchDialog [containerPackage: visualization],  Metrics: [LCOM:7, CBO:2, RFC:8]

SearchInputAction [containerPackage: visualization],  Metrics: [LCOM:2, CBO:3, RFC:4]

SectionCompartment [containerPackage: visualization],  Metrics: [LCOM:3, CBO:0, RFC:3]

SmellyClassMouseListener [containerPackage: visualization],  Metrics: [LCOM:3, CBO:2, RFC:9]

VisualizationData [containerPackage: visualization],  Metrics: [LCOM:2, CBO:0, RFC:2]

ZoomAction [containerPackage: visualization],  Metrics: [LCOM:2, CBO:2, RFC:3]

ZoomInputAction [containerPackage: visualization],  Metrics: [LCOM:2, CBO:2, RFC:2]

CandidateRefactoring [containerPackage: distance],  Metrics: [LCOM:12, CBO:2, RFC:12]

ClusterSizeComparator [containerPackage: distance],  Metrics: [LCOM:1, CBO:0, RFC:1]

DistanceCalculator [containerPackage: distance],  Metrics: [LCOM:3, CBO:0, RFC:3]

DistanceMatrix [containerPackage: distance],  Metrics: [LCOM:5, CBO:12, RFC:29]

Entity [containerPackage: distance],  Metrics: [LCOM:3, CBO:2, RFC:3]

ExtractClassCandidateGroup [containerPackage: distance],  Metrics: [LCOM:6, CBO:4, RFC:12]

ExtractClassCandidateRefactoring [containerPackage: distance],  Metrics: [LCOM:28, CBO:10, RFC:54]

ExtractedConcept [containerPackage: distance],  Metrics: [LCOM:7, CBO:3, RFC:8]

MoveMethodCandidateRefactoring [containerPackage: distance],  Metrics: [LCOM:25, CBO:7, RFC:45]

MyAbstractExpression [containerPackage: distance],  Metrics: [LCOM:20, CBO:3, RFC:25]

MyAbstractStatement [containerPackage: distance],  Metrics: [LCOM:24, CBO:4, RFC:31]

MyAttribute [containerPackage: distance],  Metrics: [LCOM:20, CBO:5, RFC:21]

MyAttributeInstruction [containerPackage: distance],  Metrics: [LCOM:8, CBO:4, RFC:8]

MyClass [containerPackage: distance],  Metrics: [LCOM:20, CBO:4, RFC:23]

MyCompositeStatement [containerPackage: distance],  Metrics: [LCOM:13, CBO:3, RFC:24]

MyMethod [containerPackage: distance],  Metrics: [LCOM:30, CBO:4, RFC:31]

MyMethodBody [containerPackage: distance],  Metrics: [LCOM:15, CBO:3, RFC:19]

MyMethodInvocation [containerPackage: distance],  Metrics: [LCOM:8, CBO:0, RFC:8]

MyStatement [containerPackage: distance],  Metrics: [LCOM:0, CBO:1, RFC:0]

MySystem [containerPackage: distance],  Metrics: [LCOM:9, CBO:8, RFC:39]

Evolution [containerPackage: history],  Metrics: [LCOM:3, CBO:0, RFC:3]

FeatureEnvyEvolution [containerPackage: history],  Metrics: [LCOM:5, CBO:2, RFC:12]

MethodEvolution [containerPackage: history],  Metrics: [LCOM:5, CBO:1, RFC:6]

ProjectEvolution [containerPackage: history],  Metrics: [LCOM:1, CBO:1, RFC:1]

ProjectVersion [containerPackage: history],  Metrics: [LCOM:2, CBO:0, RFC:2]

ProjectVersionPair [containerPackage: history],  Metrics: [LCOM:3, CBO:0, RFC:3]

TypeCheckingEvolution [containerPackage: history],  Metrics: [LCOM:6, CBO:2, RFC:21]

PreferenceConstants [containerPackage: preferences],  Metrics: [LCOM:0, CBO:0, RFC:0]

PreferenceInitializer [containerPackage: preferences],  Metrics: [LCOM:1, CBO:0, RFC:1]

PropertyManagerPreferencePage [containerPackage: preferences],  Metrics: [LCOM:4, CBO:0, RFC:4]

BadSmellsMenu [containerPackage: actions],  Metrics: [LCOM:4, CBO:0, RFC:4]

Activator [containerPackage: refactoring],  Metrics: [LCOM:4, CBO:0, RFC:4]

ASTSlice [containerPackage: manipulators],  Metrics: [LCOM:21, CBO:3, RFC:26]

ASTSliceGroup [containerPackage: manipulators],  Metrics: [LCOM:10, CBO:3, RFC:12]

ExtractClassRefactoring [containerPackage: manipulators],  Metrics: [LCOM:14, CBO:7, RFC:96]

ExtractClassRefactoringDescriptor [containerPackage: manipulators],  Metrics: [LCOM:1, CBO:0, RFC:1]

ExtractCloneRefactoring [containerPackage: manipulators],  Metrics: [LCOM:14, CBO:30, RFC:148]

ExtractCloneRefactoringDescriptor [containerPackage: manipulators],  Metrics: [LCOM:1, CBO:0, RFC:1]

ExtractMethodFragmentRefactoring [containerPackage: manipulators],  Metrics: [LCOM:7, CBO:2, RFC:17]

ExtractMethodRefactoring [containerPackage: manipulators],  Metrics: [LCOM:10, CBO:1, RFC:15]

ExtractMethodRefactoringDescriptor [containerPackage: manipulators],  Metrics: [LCOM:1, CBO:0, RFC:1]

MoveMethodRefactoring [containerPackage: manipulators],  Metrics: [LCOM:9, CBO:5, RFC:59]

MoveMethodRefactoringDescriptor [containerPackage: manipulators],  Metrics: [LCOM:1, CBO:0, RFC:1]

PolymorphismRefactoring [containerPackage: manipulators],  Metrics: [LCOM:12, CBO:1, RFC:16]

RefactoringUtility [containerPackage: manipulators],  Metrics: [LCOM:13, CBO:2, RFC:23]

ReplaceConditionalWithPolymorphism [containerPackage: manipulators],  Metrics: [LCOM:6, CBO:3, RFC:19]

ReplaceConditionalWithPolymorphismDescriptor [containerPackage: manipulators],  Metrics: [LCOM:1, CBO:0, RFC:1]

ReplaceTypeCodeWithStateStrategy [containerPackage: manipulators],  Metrics: [LCOM:17, CBO:2, RFC:54]

ReplaceTypeCodeWithStateStrategyDescriptor [containerPackage: manipulators],  Metrics: [LCOM:1, CBO:0, RFC:1]

TypeCheckElimination [containerPackage: manipulators],  Metrics: [LCOM:91, CBO:9, RFC:120]

TypeCheckEliminationGroup [containerPackage: manipulators],  Metrics: [LCOM:12, CBO:4, RFC:17]

CloneDiffContentProvider [containerPackage: views],  Metrics: [LCOM:3, CBO:1, RFC:5]

CloneDiffSide [containerPackage: views],  Metrics: [LCOM:0, CBO:0, RFC:0]

CloneDiffStyledLabelProvider [containerPackage: views],  Metrics: [LCOM:6, CBO:2, RFC:14]

CloneDiffTooltip [containerPackage: views],  Metrics: [LCOM:10, CBO:6, RFC:19]

CloneDiffWizardPage [containerPackage: views],  Metrics: [LCOM:14, CBO:2, RFC:20]

CloneRefactoringAction [containerPackage: views],  Metrics: [LCOM:5, CBO:3, RFC:12]

CodeSmellPackageExplorer [containerPackage: views],  Metrics: [LCOM:12, CBO:4, RFC:17]

CodeSmellVisualization [containerPackage: views],  Metrics: [LCOM:9, CBO:4, RFC:15]

CodeSmellVisualizationDataSingleton [containerPackage: views],  Metrics: [LCOM:4, CBO:0, RFC:4]

DuplicatedCode [containerPackage: views],  Metrics: [LCOM:31, CBO:4, RFC:64]

ElementChangedListener [containerPackage: views],  Metrics: [LCOM:2, CBO:0, RFC:3]

EvolutionDialog [containerPackage: views],  Metrics: [LCOM:8, CBO:2, RFC:10]

EvolutionRow [containerPackage: views],  Metrics: [LCOM:2, CBO:1, RFC:2]

ExtractClassInputPage [containerPackage: views],  Metrics: [LCOM:4, CBO:0, RFC:5]

ExtractMethodInputPage [containerPackage: views],  Metrics: [LCOM:3, CBO:0, RFC:5]

FeatureEnvy [containerPackage: views],  Metrics: [LCOM:31, CBO:4, RFC:67]

GodClass [containerPackage: views],  Metrics: [LCOM:31, CBO:6, RFC:71]

ImportClonesWizard [containerPackage: views],  Metrics: [LCOM:5, CBO:2, RFC:9]

ImportClonesWizardPage [containerPackage: views],  Metrics: [LCOM:4, CBO:0, RFC:9]

LabelControlContribution [containerPackage: views],  Metrics: [LCOM:1, CBO:0, RFC:1]

LongMethod [containerPackage: views],  Metrics: [LCOM:25, CBO:10, RFC:61]

MethodEvolutionAction [containerPackage: views],  Metrics: [LCOM:3, CBO:2, RFC:5]

MethodNameValidator [containerPackage: views],  Metrics: [LCOM:1, CBO:0, RFC:1]

MoveMethodInputPage [containerPackage: views],  Metrics: [LCOM:4, CBO:0, RFC:5]

MultilineButton [containerPackage: views],  Metrics: [LCOM:2, CBO:0, RFC:2]

MyComboBoxCellEditor [containerPackage: views],  Metrics: [LCOM:2, CBO:0, RFC:2]

MyRefactoringWizard [containerPackage: views],  Metrics: [LCOM:2, CBO:0, RFC:2]

ReplaceTypeCodeWithStateStrategyInputPage [containerPackage: views],  Metrics: [LCOM:3, CBO:0, RFC:4]

SliceAnnotation [containerPackage: views],  Metrics: [LCOM:0, CBO:0, RFC:0]

SliceProfileAction [containerPackage: views],  Metrics: [LCOM:5, CBO:3, RFC:10]

SliceProfileDialog [containerPackage: views],  Metrics: [LCOM:15, CBO:3, RFC:24]

SliceProfileRow [containerPackage: views],  Metrics: [LCOM:4, CBO:1, RFC:4]

StringCompareEditorInput [containerPackage: views],  Metrics: [LCOM:5, CBO:0, RFC:5]

StyledStringStyler [containerPackage: views],  Metrics: [LCOM:2, CBO:1, RFC:2]

StyledStringVisitor [containerPackage: views],  Metrics: [LCOM:10, CBO:4, RFC:105]

TypeChecking [containerPackage: views],  Metrics: [LCOM:26, CBO:3, RFC:51]

ZoomValueValidator [containerPackage: views],  Metrics: [LCOM:1, CBO:0, RFC:1]

duration to execute(in ms): 11196
